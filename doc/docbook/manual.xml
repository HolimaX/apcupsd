<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE book PUBLIC 
    "-//OASIS//DTD DocBook XML V4.1.2//EN" 
    "docbook/docbookxx.dtd"
 [<!ENTITY release_notes   SYSTEM "release_notes.xml"> 
  <!ENTITY usage           SYSTEM "usage.xml"> 
  <!ENTITY install         SYSTEM "install.xml"> 
  <!ENTITY post_install    SYSTEM "post_install.xml"> 
  <!ENTITY config_examples SYSTEM "config_examples.xml"> 
  <!ENTITY testing         SYSTEM "testing.xml"> 
  <!ENTITY troubleshooting SYSTEM "troubleshooting.xml"> 
  <!ENTITY monitoring      SYSTEM "monitoring.xml"> 
  <!ENTITY maintaining     SYSTEM "maintaining.xml"> 
  <!ENTITY faq             SYSTEM "faq.xml"> 
  <!ENTITY master_slave    SYSTEM "master_slave.xml"> 
  <!ENTITY snmp            SYSTEM "snmp.xml"> 
  <!ENTITY multiple_upses  SYSTEM "multiple_upses.xml"> 
  <!ENTITY events          SYSTEM "events.xml"> 
  <!ENTITY cables          SYSTEM "cables.xml"> 
 ]>

<!--
Rebuild the HTML with:
xmlto -m manual.xsl xhtml-nochunks manual.xml
-->

<book>
<title><application>apcupsd</application> User's Manual</title>
<bookinfo>

<editor>
  <firstname>Eric</firstname>
  <othername>Steven</othername>
  <surname>Raymond</surname>
  <affiliation>
    <orgname><ulink url="http://www.catb.org/~esr/">
    Thyrsus Enterprises</ulink></orgname> 
    <address>
    <email>esr@thyrsus.com</email>
    </address>
  </affiliation>
</editor>

<revhistory id="history">
   <revision>
      <revnumber>2.0</revnumber>
      <date>20 Sept 2003</date>
      <authorinitials>esr</authorinitials>
       <revremark>
          First XML-DocBook version.
       </revremark>
   </revision>
   <revision>
      <revnumber>3.0</revnumber>
      <date>25 Jan 2004</date>
      <authorinitials>KES</authorinitials>
       <revremark>
          Last time Book changed.
       </revremark>
   </revision>
</revhistory>
</bookinfo>


&release_notes;

&usage;

<part id='basics'><title>Basic User's Guide</title>

&install;

&post_install;

&config_examples;

&testing;

&troubleshooting;

&monitoring;

&maintaining;

&faq;

<chapter><title>Apcupsd Bugs</title>

<para>Unfortunately, it seems that every program has some bugs. We do
our best to keep the bugs to a minimum by extensive testing. However,
because of our inherent nature to occasionally overlook things and the
fact that we don't have all the UPS models nor the APC documentation
on those models, <application>apcupsd</application> will have
some bugs.</para>

<para>As the bugs become known to us, we will post them on
the bug tracking system at SourceForge.</para>

</chapter>

</part>

<part id='advanced'><title>Advanced topics</title>

&events;

&master_slave;

&multiple_upses;

&snmp;

<chapter><title>Alternate Ways To Run The Network Information Server</title>

<para><application>apcupsd</application> maintains STATUS and EVENTS
data concerning the UPS and its operation. This information can be
obtained over the network using either
<application>apcnisd</application> or
<application>apcupsd</application>'s internal network information
server, which is essentially the same code as
<application>apcnisd</application> but compiled into
<application>apcupsd</application>. Clients on the network make a
connection to the information server and send requests for status or
events data, which the server then transmits to them.</para>

<para>The information served to the network by this interface should
not be confused with master/slave mode that shares a UPS between two
or more computers. That code is described in <xref
linkend="UPS_Sharing"/> of this documentation.</para>

<para>There are three different ways to run the information server
depending on your requirements and preferences. It can be run as 1.  a
standalone program, 2. a standalone program invoked by the inetd
daemon, or 3. as a thread (or child process) of
<application>apcupsd</application> (default configuration). We
recommend option 3 unless you have specific reasons to do
otherwise. Option 3 is what is configured in by default.</para>

<sect1><title>Running the server as a child of <application>apcupsd</application></title>

<para>This is probably the simplest way to run the network information
server. To do so, you simply make sure the <emphasis
role="bold">NETSERVER</emphasis> directive in
<filename>/etc/apcupsd/apcupsd.conf</filename> is <emphasis
role="bold">on</emphasis>, and then stop and restart
<application>apcupsd.</application> It will automatically create the
server thread (or spawn an additional child process named
<application>apcnis</application>) to handle network clients. In the
case where pthreads are enabled, a new thread will be created rather
than a child process to handle the network information requests. Note,
the above modification should not be necessary if you use the default
<filename>apcupsd.conf</filename>, since it is already turned
on.</para>

<para>Although this method is simple, it affords no protection from
the outside world accessing your network server unless you
are behind a firewall. In addition, if there is a bug in the network
server code, or if a malicious user sends bad data, it may be possible
for <application>apcnis</application> to die, in which case, though it
is not supposed to, <application>apcupsd</application> may also exit,
thus leaving your machine without shutdown protection. In addition,
since <application>apcupsd</application> is running at root level, all
threads or any child process will do so also. That being said, most of
us prefer to run the server this way.</para>

<para>With <application>apcupsd</application> version 3.8.2 and later,
you may enable the TCP Libwrap subroutines to add additional
security. In this case, access to the network server will be
controlled by the statements you put in
<filename>/etc/hosts.allow</filename>.</para>

</sect1>
<sect1><title id="ApcnisdINETD">Running apcnisd from INETD</title>

<para>This is probably the most secure and most desirable way of
running the network information server. Unfortunately, it is a bit
more complicated to set up. However, once running, the server remains
unexecuted until a connection is attempted, at which point, inetd will
invoke <application>apcnisd</application>. Once
<application>apcnisd</application> has responded to the client's
requests, it will exit. None of the disadvantages of running it
standalone apply since <application>apcnisd</application> runs only
when a client is requesting data. Note, running in this manner works
only if you are using the old forking code and have pthreads
explicitly turned off. The pthreads version of
<application>apcupsd</application> does not support the shared memory
calls that are necessary for <application>apcnisd</application> to
access the internal state of
<application>apcupsd</application>.</para>

<para>An additional advantage of this method of running the network
information server is that you can call it with a TCP wrapper and thus
use access control lists (ACL) such as
<filename>hosts.allow</filename>. See the man pages for
<filename>hosts.allow</filename> for more details.</para>

<para>To configure <application>apcnisd</application> to run from
INETD, you must first put an entry in
<filename>/etc/services</filename> as follows:</para>

<programlisting>
apcnisd         3551/tcp
</programlisting>

<para>This defines the port number (3551) and the service (TCP) that
<application>apcnisd</application> will be using. This statement can
go anywhere in the services file. Normally, one adds local changes
such as these to the end of the file.</para>

<para>Next, you must modify <filename>/etc/inetd.conf</filename> to have the
following line:</para>

<programlisting>
apcnisd stream  tcp     nowait  root    /usr/sbin/tcpd  /sbin/apcnisd -i
</programlisting>

<para>If you do not want to run the TCP wrapper, then the line should
be entered as follows (not tested):</para>

<programlisting>
apcnisd stream  tcp     nowait  root    /sbin/apcnisd -i
</programlisting>

<para>Please check that the file locations are correct for your
system. Also, note that the <option>-i</option> option is necessary so
that <application>apcnisd</application> knows that it was called by
INETD. Before restarting INETD, first ensure that the <emphasis
role="bold">NETSERVER</emphasis> directive in
<filename>/etc/apcupsd/apcupsd.conf</filename> is set to <emphasis
role="bold">off</emphasis>. This is necessary to prevent
<application>apcupsd</application> from starting a child process that
acts as a server. If you change <emphasis
role="bold">NETSERVER</emphasis>, you must stop and restart
<application>apcupsd</application> for the configuration change to be
effective.</para>

<para>Finally, you must restart INETD for it to listen on port 3551.
On a Red Hat system, you can do so by:</para>

<programlisting>
/etc/rc.d/init.d/inet reload
</programlisting>

<para>At this point, when a client attempts to make a connection on
port 3551, INETD will automatically invoke
<application>apcnisd</application>.</para>

</sect1>
<sect1><title>Running <application>apcnisd</application> Standalome</title>

<para>This is probably the least desirable of the three ways to run an
<application>apcupsd</application> network information server because
if <application>apcupsd</application> is stopped, you must also stop
<application>apcnisd</application> before you can restart
<application>apcupsd</application>. This is because
<application>apcnisd</application>, when run standalone, holds the
shared memory buffer by which <application>apcnisd</application> and
<application>apcupsd</application> communicate. This prevents a new
execution of <application>apcupsd</application> from creating
it.</para>

<para>To execute <application>apcnisd</application> in standalone
mode, first ensure that the <emphasis role="bold">NETSERVER</emphasis>
directive in <emphasis
role="bold">/etc/apcupsd/apcupsd.conf</emphasis> is set to <emphasis
role="bold">off</emphasis>. This is necessary to prevent
<application>apcupsd</application> from starting a child process that
acts as a server. Restart <application>apcupsd</application> normally,
then:</para>

<programlisting>
/sbin/apcnisd
</programlisting>

<para>The advantage of running the network information server
standalone is that if for some reason, a client causes the network
server to crash, it will not affect the operation of
<application>apcupsd</application>.</para>
</sect1>
</chapter>
<chapter><title><application>apcupsd</application> System Logging</title>

<para>The <application>apcupsd</application> philosophy is that all
logging should be done through the <emphasis
role="bold">syslog</emphasis> facility (see: <command>man
syslog</command>). This is now implemented with the exceptions that
<emphasis role="bold">STATUS</emphasis> logging, for compatibility,
with prior versions is still done to a file, and <emphasis
role="bold">EVENTS</emphasis> logging can be directed to a
&quot;temporary&quot; file so that it can be reported by the network
information server.</para>

<sect1><title>Logging Types</title>

<para><application>apcupsd</application> splits its logging into four
separate types called:</para>

<orderedlist>
  <listitem>
    <para>DEBUG</para>
  </listitem>
  <listitem>
    <para>DATA</para>
  </listitem>
  <listitem>
    <para>STATUS</para>
  </listitem>
  <listitem>
    <para>EVENTS</para>
  </listitem>
</orderedlist>

<para>Debug logging consists of debug messages. Normally these are
turned on only by developers, and currently there exist very few of
these debug messages.</para>

<bridgehead>DATA Logging</bridgehead>

<para>Data logging consists of periodically logging important data
concerning the operation of the UPS. See the <link
linkend='datalogging'>Data Logging</link> section of this manual for
more details.</para>

<bridgehead>STATUS Logging</bridgehead>

<para>Status logging consists of logging all available information known
about your UPS as a series of ASCII records. This information is
also made available by the <application>apcupsd</application> network
information server.</para>

<para>For more details on STATUS logging, see the <link
linkend="statusformat">Status</link> section of the Technical
Reference.</para>

<bridgehead>EVENTS Logging</bridgehead>

<para>Events logging consists of logging events as they happen. For
example, successful startup, power fail, battery failure, system
shutdown, ...</para>

<para>See the manual section on <link linkend='events'>customizing event
handling</link> for more details.</para>

</sect1>
<sect1><title>Implementation Details</title>

<para>In order to ensure that the data logged to syslog() can be directed
to different files, I have assigned syslog() levels to each of our
four types of data as follows:</para>

<orderedlist>
<listitem><para>1. DEBUG logging has level LOG_DEBUG</para></listitem>

<listitem><para>2. DATA logging has level LOG_INFO</para></listitem>

<listitem><para>3. STATUS logging has level LOG_NOTICE</para></listitem>

<listitem><para>4. EVENTS logging has levels LOG_WARNING, LOG_ERR, 
LOG_CRIT, and LOG_ALERT</para></listitem>
</orderedlist>

<para>It should be noted that more work needs to be done on the
precise definitions of each of the levels for EVENTS logging.
Currently, it is roughly broken down as follows:</para>

<para>LOG_WARNING general information such as startup, etc.</para>

<para>LOG_ERR an error condition detected, e.g. communications problem
with the UPS.</para>

<para>LOG_CRIT a serious problem has occurred such as power failure,
running on UPS batteries, ...</para>

<para>LOG_ALERT a condition that needs immediate attention such as
pending system shutdown, ...</para>

<para>The default Facility for syslog() logging is DAEMON, although this
can be changed with the FACILITY directive in apcupsd.conf. In the
following example, we should the facility as local0.</para>

<para>More work needs to be done to the code to ensure that it
corresponds to the above levels.</para>

<para>As a practical example of how to setup your syslog() to use the
new logging feature, suppose you wish to direct all DATA logging to a
file named <filename>/var/log/apcupsd.data</filename>, all EVENTS to
the standard <filename>/var/log/messages</filename> file (to be mixed
with other system messages), and at the same time send all EVENTS to
<filename>/var/log/apcupsd.events</filename>, and finally, you want to
send all STATUS logging to the named pipe
<filename>/var/log/apcupsd.status</filename></para>

<para>First as root, you create the named pipe:</para>

<programlisting>
mkfifo /var/log/apcupsd.status
</programlisting>

<para>Change its permissions as necessary or use the -m option to set
them when creating the pipe.</para>

<para>Then you modify your <filename>/etc/syslog.conf</filename> file
to direct the appropriate levels of messages where you want them. To
accomplish the above, my syslog.conf file looks like:</para>

<programlisting>
# exclude all apcupsd info by default
*.info;local0.none                    /var/log/messages

# Everything for apcupsd goes here
local0.info;local0.!notice             /var/log/apcupsd.data
local0.notice;local0.!warn            |/var/log/apcupsd.status
local0.warn                            /var/log/apcupsd.events
local0.warn                            /var/log/messages
</programlisting>

</sect1>
<sect1><title>Developer's Notes</title>

<para>All logging functions and all error reporting are now done
through the log_event() subroutine call. Exceptions to this are:
initialization code where printf's are done, and writing to the
status file. Once the initialization code has completed and the
fork() to become a daemon is done, no printf's are used.
log_event() has exactly the same format as syslog(). In fact, the
subroutine consists of only a syslog() call. If anyone really
wishes to log to a file, the code to do so can easily be done by
adding code to log_event() in apclog.c.</para>

</sect1>
</chapter>
</part>
<part id='win32'><title>Legacy Installation: Windows</title>

<chapter><title>The Windows Version of <application>apcupsd</application></title>

<para>The Windows version of <application>apcupsd</application> has
been tested on Win95, Win98, WinMe, WinNT, WinXP, and Win2000
systems. This version of <application>apcupsd</application> has been
built to run under the CYGWIN environment, which provides many of the
features of Unix on Windows systems. It also permitted a rapid port
with very few source code changes, which means that the Windows
version is for the most part running code that has long proved stable
on Unix systems. Even though the Win32 version of
<application>apcupsd</application> is a port that relies on many Unix
features, it is just the same a true Windows program. When running, it
is perfectly integrated with Windows and displays its icon in the
system icon tray, and provides a system tray menu to obtain additional
information on how <application>apcupsd</application> is running
(status and events dialogue boxes). If so desired, it can also be
stopped by using the system tray menu, though this should normally
never be necessary.</para>

<para>Once installed <application>apcupsd</application> normally runs
as a system service.  This means that it is immediately started by the
operating system when the system is booted, and runs in the background
even if there is no user logged into the system.</para>

<sect1><title>Installation</title>

<para>Normally, you will install the Windows version of
<application>apcupsd</application> from the binaries. This install is
somewhat Unix like since you do many parts of the installation by
hand. To install the binaries, you need <emphasis
role="bold">WinZip</emphasis>.</para>

<itemizedlist>
<listitem>
  <para>Simply double click on the
  <filename>winapcupsd-3.8.5.tar.gz</filename> icon.  The actual name
  of the icon will vary from one release version to another.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="wininstall3.png" depth="299" width="254"/>
      </imageobject>
    </mediaobject>
  </listitem>
  <listitem>
    
  <para>When Zip says that it has one file and asks if it should unpack
  it into a temporary file, respond with <emphasis
  role="bold">Yes</emphasis>.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="wininstall4.png" depth="152" width="374"/>
      </imageobject>
    </mediaobject>
  </listitem>
  <listitem>
    
  <para>Ensure that you extract all files and that the extraction will
  go into <filename>C:\</filename></para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="wininstall5.png" depth="246" width="486"/>
      </imageobject>
    </mediaobject>
  </listitem>
</itemizedlist>

<para>If you wish to install the package elsewhere, please note that you
will need to proceed with a manual installation, which is not
particularly easy as you must rebuild the source and change the
configuration file as well.</para>

<para>This installation assumes that you do <emphasis
role="bold">not</emphasis> have CYGWIN installed on your computer. If
you do, and you use mount points, you may need to do a special manual
installation.</para>

<para>Once you have unzipped the binaries, open a window pointing to
the binary installation folder (normally
<filename>c:\apcupsd</filename>). This folder should contain folders
with the name bin, etc, examples, and manual. If and when you no
longer need them, the examples and manual sub-folders of the
<filename>c:\apcupsd</filename> directory may be removed.</para>

<para>Continuing the installation process:</para>
<itemizedlist>
  <listitem>
    <para>Open the directory <filename>c:\apcupsd\etc\apcupsd</filename>
    in the Windows Explorer by Clicking on the apcupsd folder then on the
    <filename>etc</filename> folder, then on the apcupsd folder. Finally
    double click on the file <filename>apcupsd.conf</filename> and edit it
    to contain the values appropriate for your site. In most cases, no
    changes will be needed, but if you are not using COM1 for your serial
    port, you will need to set the <emphasis role="bold">DEVICE</emphasis>
    configuration directive to the correct serial port. Note, if you are
    using WinNT or Win2000, the operating system may probe the port
    attempting to attach a serial mouse. This will cause
    <application>apcupsd</application> to be unable to communicate with
    the serial port. If this happens, or out of precaution, you can edit
    the <filename>c:\boot.ini</filename> file. Find the line that looks
    something like the following:</para>

    <para>multi(0)disk(0)rdisk(0)partition(1)\WINNT=&quot;Windows NT
    Workstation Version 4.00&quot;</para>

    <para>and add the following to the end of the line: /NoSerialMice:COM1
    (or COM2 depending on what you want to use). The new line should
    look similar to:</para>

    <para>multi(0)disk(0)rdisk(0)partition(1)\WINNT=&quot;Windows NT
    Workstation Version 4.00&quot; /NoSerialMice:COM1</para>

    <para>where the only thing you have changed is to append to the end of
    the line. This addition will prevent the operating system from
    interferring with <application>apcupsd</application></para>
  </listitem>
  <listitem> 
    <para>Then return to <filename>c:\apcupsd</filename> and open on the
    <filename>bin</filename> folder so that you see its contents.</para>
  </listitem>
  <listitem>
    <para>To do the final step of installation, double click on the
    <filename>setup.bat</filename> program. This script will setup the
    appropriate mount points for the directories that
    <application>apcupsd</application> uses, it will install
    <application>apcupsd</application> in the system registry, and on
    Windows 98, it will start <application>apcupsd</application>
    running.</para>

    <para>If everything went well, you will get something similar to the
    following output in a DOS shell window:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="wininstall1.png" depth="359" width="652"/>
      </imageobject>
    </mediaobject>

    <para>What is important to verify in the DOS window is that the root
    directory <filename>\</filename> is mounted on device
    <filename>c:\</filename>.</para>

    <para>The DOS window will be followed immediately by a Windows
    dialogue box as follows:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="wininstall2.png" depth="139" width="324"/>
      </imageobject>
    </mediaobject>
  </listitem>
  <listitem>
    <para>On Windows 98, to actually start the service, either reboot the
    machine, which is not necessary, or open a DOS shell window, and
    type the following commands:</para>

    <programlisting>
    cd c:\apcupsd\bin
    apcupsd /service
    </programlisting>

    <para>Alternatively, you can go to the
    <filename>c:\apcupsd\bin</filename> folder with the Explorer and
    double click on the <emphasis role="bold">Start</emphasis>
    icon.</para>
  </listitem>
  <listitem>
    <para>On Windows NT, to start the service, either reboot the machine,
    which is not necessary, or go to the Control Panel, open the Services
    folder and start the <application>apcupsd</application> daemon program
    by selecting the <application>apcupsd</application> UPS Server and
    then clicking on the Start button as shown below:</para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="wininstall6.png" depth="339" width="672"/>
      </imageobject>
    </mediaobject>
    <para>If the Services dialog reports a problem, it is normally
    because your DEVICE statement does not contain the correct serial
    port name.</para>
  </listitem>
</itemizedlist>

<para>You probably should also click on the <emphasis
role="bold">Startup...</emphasis> button to ensure that the correct
defaults are set. The dialogue box that appears should have <emphasis
role="bold">Startup Type</emphasis> set to <emphasis
role="bold">Automatic</emphasis> and <emphasis
role="bold">Logon</emphasis> should be set to <emphasis
role="bold">System Account</emphasis> with <emphasis role="bold">Allow
Service to Interact with Desktop</emphasis> checked. If these values
are not set correctly by default, please change them otherwise
<application>apcupsd</application> will not work.</para>

<para>For WinXP systems (and probably Win2K), the dialogs are a bit
different from those shown here for WinNT, but he concept is the
same. You get to the Services dialog by clicking on: <emphasis
role="bold">Control Panel -&gt; Administrative Tools -&gt; Component
Services</emphasis>. The <application>apcupsd</application> service
should appear in the right hand window when you click on <emphasis
role="bold">Services (Local)</emphasis> in the left hand menu
window.</para>

<para>That should complete the installation process. When the system
tray icon turns from a battery
<inlinemediaobject><imageobject><imagedata fileref="onbatt.png"
depth="16" width="16"/></imageobject></inlinemediaobject> into a plug
<inlinemediaobject><imageobject><imagedata fileref="online.png"
depth="16" width="16"/></imageobject></inlinemediaobject>, right click
on it and a menu will appear. Select the <emphasis
role="bold">Events</emphasis> item, and the Events dialogue box should
appear. There should be no error messages. By right clicking again on
the system tray plug and selecting the <emphasis
role="bold">Status</emphasis> item, you can verify that all the values
for your UPS are correct.</para>

<para>When the UPS switches to the battery, the battery icon will
reappear in the system tray. While the UPS is online, if the battery
is not at least 99% charged, the plug icon will become a plug with a
lightning bolt in the middle
<inlinemediaobject><imageobject><imagedata fileref="charging.png"
depth="16" width="16"/></imageobject></inlinemediaobject> to indicate
that the battery is charging.</para> 

</sect1>
<sect1><title>Installation Directory</title>

<para>The Win32 version of <application>apcupsd</application> must
reside in the <filename>c:\apcupsd\</filename> directory, and there
must be a <filename>c:\tmp</filename> directory on your machine. The
installation will do this automatically, and we recommend that you do
not attempt to place <application>apcupsd</application> in another
directory. If you do so, you are on your own, and you will need to do
a rebuild of the source.</para> </sect1>
<sect1><title>Testing</title>

<para>It would be hard to overemphasize the need to do a full testing
of your installation of <application>apcupsd</application> as there
are a number of reasons why it may not behave properly in a real power
failure situation.</para>

<para>Please read <xref linkend="testing"/> of
this document for general instructions on testing the Win32
version. However, on Win32 systems, there is no Unix system log
file, so if something goes wrong, look in the file
<filename>c:\apcupsd\etc\apcupsd\apcupsd.events</filename> where apcupsd
normally logs its events, and you will generally find more detailed
information on why the program is not working. The most common
cause of problems is either improper configuration of the cable
type, or an incorrect address for the serial port.</para>

</sect1>
<sect1><title>Upgrading</title>

<para>On Win98 and Win95 systems, to upgrade to a new release, simply
stop <application>apcupsd</application> by using the tray icon and
selecting the <emphasis role="bold">Close
<application>apcupsd</application></emphasis> menu item, or by double
clicking on the <emphasis role="bold">Stop</emphasis> icon located in
the <filename>c:\apcupsd\bin</filename> directory, then apply the
upgrade and restart <application>apcupsd</application>.</para>

<para>On WinNT systems (and Win2000 systems), you may stop
<application>apcupsd</application> as indicated abover or
alternatively you may stop <application>apcupsd</application> by using
the <emphasis role="bold">Services</emphasis> item in the <emphasis
role="bold">Control Panel</emphasis>. In addition, at least on my
system, there seems to be a WinNT bug that causes the system to
prevent <emphasis role="bold">apcupsd.exe</emphasis> from being
overwritten even though the file is no longer being used.  This is
manifested by an error message when attempting load a new version and
overwrite the old <application>apcupsd.exe</application> (the extract
part of WinZip as described above). To circumvent this problem (if it
happens to you), after shutting down the running version of
<application>apcupsd</application>, through the <emphasis
role="bold">Services</emphasis> dialogue in the <emphasis
role="bold">Control Panel</emphasis>, first click on the <emphasis
role="bold">Stop button</emphasis>:</para>

<mediaobject>
  <imageobject>
    <imagedata fileref="wininstall6.png" depth="339" width="672"/>
  </imageobject>
</mediaobject>

<para>then click on the <emphasis role="bold">Startup ...</emphasis>
button, and in the Startup dialogue select the <emphasis
role="bold">Disabled</emphasis> button to disable
<application>apcupsd</application>:</para>

<mediaobject>
  <imageobject>
    <imagedata fileref="wininstall7.png" depth="405" width="382"/>
  </imageobject>
</mediaobject>

<para>After closing the dialogues, reboot the system, typical of
Microsoft :-(. When the system comes back up,
<application>apcupsd</application> will not be automatically launched
as a service, and you can install the new version. To reinstate
<application>apcupsd</application> as an automatic service, using the
<emphasis role="bold">Control Panel</emphasis>: reset
<application>apcupsd</application> to <emphasis
role="bold">Automatic</emphasis> startup in the Startup dialogue, then
restart <application>apcupsd</application> in the <emphasis
role="bold">Services</emphasis> dialogue as shown above in the
installation instructions. Frequently after an upgrade, you will click
on the <emphasis role="bold">Start</emphasis> button and after a few
seconds, the system reports that it failed to start. The cause of this
problem is unknown, but the solution is simply to click again on the
<emphasis role="bold">Start</emphasis> button.</para> </sect1>
<sect1><title>Post
Installation</title>

<para>After installing <application>apcupsd</application> and before
running it, you should check the contents of two files to ensure that
it is configured properly for your system. The first is
<filename>c:\apcupsd\etc\apcupsd\apcupsd.conf</filename>. You will
probably need to change your UPSCABLE directive, your UPSTYPE and
possibly your DEVICE directives. Please refer to the configuration
section of this manual for more details.</para>

<para>The second file that you should examine is
<filename>c:\apcupsd\etc\apcupsd\apccontrol</filename>. This file is
called by <application>apcupsd</application> when events (power loss,
etc) are generated. It permits the user to program handling the
event. In particular, it permits the user to be notified of the
events. For the Win32 version, each event is programmed to display a
Windows popup dialogue box. If your machine is mostly unattended, you
may want to comment out some of these popup dialogue boxes by putting
a pound sign (#) in column one of the appropriate line.</para>

</sect1>
<sect1><title>Problem Areas</title>

<para>In addition to possible problems of reinstallation or upgrade on
WinNT systems, as noted above, we have discovered the following
problem: On some Windows systems, the domain resolution does not seem
to work if you have not configured a DNS server in the Network section
of the Control Panel. This problem should be apparent only when
running a master or a slave configuration. In this case, when you
specify the name of the master or the slave machine(s) in your
<filename>apcupsd.conf</filename> file, apcupsd will be unable to
resolve the name to a valid IP address. To circumvent this problem,
simply enter all machine addresses as an IP address rather than a
domain name, or alternatively, ensure that you have a valid DNS server
configured on your system (often not the case on Win32 systems).  For
example, instead of using the directive &quot;MASTER
my.master.com&quot; use something like &quot;MASTER 192.168.1.54&quot;
where you replace the IP address with your actual IP address.</para>

<para>Also, on WinNT systems, the PIF files in
<filename>/apcupsd/bin</filename> used for starting and stopping
<application>apcupsd</application> do not work. Use the services
control panel instead.</para>

<para>On Win95 systems, there are reports that the PIF files do not
work. If you find that to be the case, the simplest solution is to use
the batch files that we have supplied in the
<filename>c:/apcupsd/bin</filename> directory. Also, on Win95 systems,
we have an unconfirmed report that indicates that
<application>apcupsd</application> does not start automatically as a
service even though the Registry has been properly updated. If you
experience this problem, a work around is to put a shortcut to
<application>apcupsd</application> in the StartUp folder.</para>

<para>As noted above, after an upgrade, you may need to start
<application>apcupsd</application> several times before it will
actually run.</para>

<para>On WinNT, WinXP, and Win2K systems, you can examine the System
Applications log to which <application>apcupsd</application> writes
Windows error messages during startup.</para>

<para>Regardless of which Windows system you are running,
<application>apcupsd</application> logs most error messages to
<filename>c:\apcupsd\etc\apcupsd\apcupsd.events</filename>. This type
error messages such as configuration file not found, etc are written
to this file.</para>

</sect1>
<sect1><title>Utility Functions</title>

<para>The directory <filename>c:\apcupsd\bin</filename> contains six
utility routines (actually .pif files) that you may find useful. They
are:</para>

<programlisting>
Start
Stop
Install
Uninstall
ups-events
ups-status
</programlisting>

<para>Any of these utilities may be used on any system, with the
exception of the Start utility, which cannot be used on WinNT and
Win2000 systems. On those systems, the apcupsd service must always be
started through the <emphasis role="bold">Services</emphasis>
sub-dialogue of the <emphasis role="bold">Control
Panel</emphasis>.</para>

<para>The <emphasis role="bold">Install</emphasis> and <emphasis
role="bold">Uninstall</emphasis> utilities install and uninstall
apcupsd from the system registry only. All other pieces (files) of
apcupsd remain intact. It is not absolutely necessary for apcupsd to
be installed in the registry as it can run as a regular
program. However, if it is not installed in the registry, it cannot be
run as a service.</para>

<para>The functions of <emphasis role="bold">Stop</emphasis>,
<emphasis role="bold">ups-events</emphasis>, and <emphasis
role="bold">ups-status</emphasis> can be more easily invoked by right
clicking on the apcupsd icon in the system tray and selecting the
desired function from the popup menu.</para>

</sect1>
<sect1><title>Disclaimer</title>

<para>Some of the features such as EEPROM programming have not been
exhaustively tested on Win32 systems. If at all possible, we
recommend not to use it as a network master on Win95, Win98, and
WinMe due to the instability of those operating systems.</para>

<para>Some items to note:</para>

<itemizedlist>
  <listitem>    
    <para>This version of apcupsd will not attempt to shut off the
    UPS power when the battery is exhausted. Thus if the power returns
    before the UPS completely shuts down, your computer may not reboot
    automatically. This is because we do not know how to regain control
    after the disks have been synced in order to shut off the UPS
    power.</para>

    <para>Nevertheless, it is possible to use the
    <option>--kill-on-powerfail</option> option on the apcupsd command
    line, but the use of this option could cause the power to be cut
    off while your machine is still running. See <xref
    linkend="shutdown"/> of this document for a more complete
    discussion of this subject. If you are still interested in trying
    to get this to work, please look at the code that is commented out
    in <filename>c:\apcupsd\etc\apcupsd\apccontrol</filename> under
    the <emphasis role="bold">doshutdown</emphasis> case.</para>

    <para>An alternative to the <option>--kill-on-powerfail</option>
    option is to use the <link linkend="KILLDELAY">KILLDELAY</link>
    configuration directive.</para>

    <para>This configuration directive is appropriate on Windows machines
    where apcupsd continues to run even when the machine is
    halted (as is the case on most NT machines).</para>
  </listitem>
  <listitem>
    <para>When apcupsd detects important events, it calls
    <filename>c:\apcupsd\etc\apcupsd\apccontrol</filename>, which is a
    Unix shell script. You may modify this script to suit your
    particular needs.  Currently, it puts a Windows dialogue on the
    screen with a brief explanation of the event. If these dialogues
    annoy you, you can remove or comment out the calls to <emphasis
    role="bold">popup</emphasis> from this file.</para>
  </listitem>
</itemizedlist>

</sect1>
<sect1><title>Email Notification of Events</title>

<para>On Win95/98 systems, it is possible to receive notification of
apcupsd events that are passed to
<application>apccontrol</application>. This is possible using a simple
email program that unfortunately is not functioning 100% correctly. In
addition, I (Kern) was not able to make this program work on WinNT
while apcupsd is running as a service under the system account (it
works fine with any user account).</para>

<para>If you wish to try this program on Win95/98 systems, look at the
files named <emphasis role="bold">changeme, commfailure, commok,
onbattery, and mainsback</emphasis> in the directory
<filename>c:\apcupsd\examples</filename>. To use them, you must modify
the SYSADMIN variable to have a valid email address, then copy the
files into the directory
<filename>c:\apcupsd\etc\apcupsd</filename>.</para>

</sect1>
<sect1><title>Killpower under Windows</title>

<para>If your batteries become exhausted during a power failure and
you want your machine to automatically reboot when the power comes
back, it is useful to implement the
<application>killpower</application> feature of the UPS where apcupsd
sends the UPS the command to shut off the power.  In doing so, the
power will be cut to your PC and if your BIOS is properly setup, the
machine will automatically reboot when the power comes back. This is
important for servers.</para>

<para>This feature is implemented on Unix systems by first requesting
a system shutdown. As a part of the shutdown, apcupsd is terminated
by the system, but the shutdown process executes a script where
apcupsd is recalled after the disks are synced and the machine is
idle. Bacula then requests the UPS to shut off the power
(killpower).</para>

<para>Unfortunately on Windows, there is no such shutdown script that
we are aware of and no way for apcupsd to get control after the
machine is idled. If this feature is important to you, it is
possible to do it by telling apcupsd to immediately issue the
killpower command after issuing the shutdown request. The danger in
doing so is that if the machine is not sufficiently idled when the
killpower takes place, the disks will need to be rescanned (and
there is a possibility of lost data however small). Generally,
UPSes have a shutdown grace period which gives sufficient time for
the OS to shutdown before the power is cut.</para>

<para>To implement this feature, you need to add the
<option>-p</option> option to the apcupsd command line that is
executed by the system.  Currently the procedure is manual. You do so
by editing the registry and changing the line:</para>

<programlisting>
c:\apcupsd\apcupsd.exe /service
</programlisting>

<para>found under the key:</para>

<programlisting>
HKEY_LOCAL_MACHINE Software\Microsoft\Windows\CurrentVersion\RunServices
</programlisting>

<para>to</para>

<programlisting>
c:\apcupsd\apcupsd.exe /service -p
</programlisting>

<para>If you have a Smart UPS, you can configure the kill power grace
period, and you might want to set it to 3 minutes. If you have a
dumb UPS, there is no grace period and you should not use this
procedure. If you have a Back-UPS CS or ES, these UPSes generally
have a fixed grace period of 2 minutes, which is probably
sufficient.</para>

</sect1>
<sect1><title>Power Down During Shutdown</title>

<para>Our philosophy is to shutdown a computer but not to power it down
itself (as opposed to having the UPS cut the power as described
above). That is we prefer to idle a computer but leave it running.
This has the advantage that in a power fail situation, if the
killpower function described above does not work, the computer will
continue to draw down the batteries and the UPS will hopefully
shutoff before the power is restore thus permitting an automatic
reboot. </para>

<para>Nevertheless some people prefer to do a full power down. To do
so, you might want to get a copy of PsShutdown, which does have a
power down option. You can find it and a lot more useful software at:
<ulink
url="http://www.sysinternals.com/ntw2k/freeware/pstools.shtml">http://www.sysinternals.com/ntw2k/freeware/pstools.shtml</ulink>.
to use their shutdown program rather than the apcupsd supplied
version, you simply edit:</para>

<programlisting>
c:\apcupsd\etc\apcupsd\apccontrol
</programlisting>

<para>with any text editor and change our calls to shutdown to
psshutdown.</para>
</sect1>
<sect1><title>Command Line Options Specific to the Windows Version</title>

<para>These options are not normally seen or used by the user, and are
documented here only for information purposes. At the current time,
to change the default options, you must either manually run
apcupsd or you must manually edit the system registry and
modify the appropriate entries.</para>

<para>In order to avoid option clashes between the options necessary
for apcupsd to run on Windows and the standard
apcupsd options, all Windows specific options are signaled
with a forward slash character (/), while as usual, the standard
apcupsd options are signaled with a minus (-), or a minus
minus (--). All the standard apcupsd options can be used on
the Windows version. In addition, the following Windows only
options are implemented:</para>

<variablelist>
  <varlistentry>
    <term>/servicehelper</term>
    <listitem>
      <para>Run the service helper application</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>/service</term>
    <listitem>
      <para>Start apcupsdas a service</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>/run</term>
    <listitem>
      <para>Run the apcupsd application</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>/install</term>
    <listitem>
      <para>Install apcupsd as a service in the system registry</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>/remove</term>
    <listitem>
      <para>Uninstall apcupsd from the system registry</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>/about</term>
    <listitem>
      <para>Show the apcupsd about dialogue box</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>/status</term>
    <listitem>
      <para>Show the apcupsd status dialogue box</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>/events</term>
    <listitem>
      <para>Show the apcupsd events dialogue box</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>/kill</term>
    <listitem>
      <para>Stop any running apcupsd</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>/help</term>
    <listitem>
      <para>Show the apcupsd help dialogue box</para>
    </listitem>
  </varlistentry>
</variablelist>

<para>It is important to note that under normal circumstances the user
should never need to use these options as they are normally handled
by the system automatically once apcupsd is installed.
However, you may note these options in some of the .pif files that
have been created for your use.</para>

</sect1>
<sect1><title>Building the Win32 Version from the Source</title>

<para>If you have the source code, follow the standard procedures for
building <application>apcupsd</application> on Unix in <xref
linkend='build_install'/> of this manual. Please don't forget to look
at the system specifics for CYGWIN.</para>
</sect1>
</chapter>
</part>
<part id='legacy'><title>Legacy Installation: Serial-Line UPSes</title>

<chapter><title>Overview of Serial-Interface UPSes</title>

<para>If you have a UPS that communicates via serial port, you need to
do two things before you can even think about configuring the
software. First, you need to figure out whether it's a dumb
(voltage-signalling) UPS or speaks the apcsmart protocol (see <link
linkend='upstypes'>this discussion</link>).  Second, if you have an
interface cable from APC, you need to figure out what kind it is.  If
you don't have such a cable, you need to build one.  A
straight-through serial cable <link linkend='crazy'>won't
work</link>.</para>

</chapter>
<chapter><title>Connecting a Serial-Line UPS to a USB Port</title>

<para>By using a special adaptor, you can connect your serial-line UPS
to a USB port. If you would like to free up your serial port and
connect your existing serial port UPS to a USB port, it is possible if
you have one of the later kernels. You simply get a serial to USB
adapter that is supported by the kernel, plug it in and make one minor
change to your <filename>apcupsd.conf</filename> file and away you
go. (Kern adds: Thanks to Joe Acosta for this out to
me.)</para>

<para>The device that Joe Acosta and Kern are using is IOgear guc232a USB 2
serial adapter. There may be other adapters that work equally well.
If you know of one, please let us know.</para>

<para>At Kern's site, running Red Hat 7.1 with kernel 2.4.9-12, he
simply changed his <filename>/etc/apcupsd/apcupsd.conf</filename>
configuration line to be:</para>

<programlisting>
DEVICE /dev/ttyUSB0
</programlisting>

<para>Depending on whether or not you have <emphasis
role="bold">hotplug</emphasis> working, you may need to explicitly
load the kernel modules <emphasis role="bold">usbserial</emphasis> and
<emphasis role="bold">pl2303</emphasis>. In Kern's case, this was not
necessary.</para>

<para>In fact, it turns out the protocol adaptor isn't necessary if
you have the right cable.  The ports on APC USB UPSes not only speak
USB, but also serial apcsmart and dumb voltage-signalling as well!
This is something that one of our users discovered by accident. With the
Custom RJ45 cable described below plugged into the APC UPS USB socket at
one end and the other end plugged into a serial port on your PC, any
APPC USB UPS will act as a serial-line device.</para>

</chapter>

&cables;

<chapter id='dumb_testing'><title>Testing Serial-Line UPSes</title>

<para>If you have a serial-line UPS, there are some tests you should
run before the general ones described in the <link
linkend='testing'>Testing</link> section.</para>

<para>To test your computer's connection with a serial-line UPS, you first
need to establish that the serial line is functioning, and then that the
UPS is responding to commands.  This can be a bit tricky, especially
with a dumb voltage-signalling interface, because it is completely
quiescent when there are no commands being passed, and the command 
repertoire doesn't include any self-tests.</para>

<para>Because it is easy to configure a serial cable incorrectly in
such a way as to cause premature shutdowns of the UPS power, we
<emphasis>strongly</emphasis> recommend, especially for voltage-
signaling (dumb) UPSes, that you do most of the initial testing with
your computer plugged into the wall rather than your UPS. Thus if the
UPS power is suddenly shut off, your computer will continue to run. We
also recommend using <application>safe-apccontrol</application> as
described below, until you are sure that the signaling is
correct.</para>

<para>Also note that if you launch the execution of
<application>apcupsd</application> while your voltage-signaling UPS is
on battery power, it is very likely that your UPS will immediately
shut off the power. This is due to the initialization of the serial
port line signals, which often looks to the UPS like a shutdown
command.</para>

<para>Finally, double-check the state of your cabling and UPS
indicator lights frequently during testing.  For voltage-signaling
UPSes, <application>apcupsd</application> is not currently able to
detect whether or not the serial cable is connected. In addition, some
simple signaling UPSes with certain cable combinations are not able to
detect the low battery condition.  For more details please see
<xref linkend="CableModes"/>.</para>

<sect1><title id="SerialPort">Establishing Serial Port Connection</title>

<para>Once you have compiled, installed, and invoked
<application>apcupsd</application>, you should wait to allow
<application>apcupsd</application> to configure itself and establish
contact with the UPS.</para>

<para>If you see the following message about 30 seconds after starting
<application>apcupsd</application>:</para>

<programlisting>
apcupsd FATAL ERROR in apcserial.c at line 156
PANIC! Cannot communicate with UPS via serial port.
</programlisting>

<para>it means that <application>apcupsd</application> tried for about
30 seconds to establish contact with the UPS via the serial port, but
was unable to do so. Before continuing, you must correct this
problem. Some of the possible sources of the problem are:</para>

<itemizedlist>
  <listitem>
    <para>You have not configured the correct serial port name on the 
    DEVICE directive in your <filename>apcupsd</filename> configuration 
    file.</para>
  </listitem>
  <listitem>
    <para>The serial port that you have chosen has logins enabled. You must 
    disable logins on that port, otherwise, the system prevents 
    <application>apcupsd</application> from using it.
    Normally, the file <filename>/etc/inittab</filename> specifies the
    ports for which a <application>getty</application> process is started 
    (on Sun machines, the serial port program equivalent to 
    <application>getty</application> is called 
    <application>ttymon</application>). You must disable this for the port
    that you wish to use.</para>
  </listitem>
  <listitem>
    <para>Make sure you are doing your testing as 
    <emphasis role="bold">root</emphasis> otherwise, you may have permissions
    problems accessing the serial port.</para>
  </listitem>
  <listitem>
    <para>You may have cabling problems, either with an incorrect cable, or the
    incorrect cable specification directive in the configuration file.</para>
  </listitem>
  <listitem>
    <para>You may have a problem with the 
    <filename>/etc/apcupsd/acpupsd.conf</filename> file. For example, check 
    that you have specified the correct type of UPS and the correct networking
    directives.  For more details, see the 
    <xref linkend="after_installation"/>.</para>
  </listitem>
  <listitem>
    <para>If you have a SmartUPS 5000 RM 15U or similar model, that comes 
    with a &quot;Web/SNMP management card&quot; in one of the &quot;Smart
    Slots&quot;, this card may interfere with the serial port operation. 
    If you are having problems, please remove this card and try again. 
    Supposedly V3.0 of the card firmware has been corrected to properly
    release the serial port.</para>
  </listitem>
  <listitem>
    <para>Ensure that you have no other programs that are using the serial 
    port. One user reported that he had problems because the serial port
    mouse (gpm) was using the same port as <application>apcupsd</application>.
    This causes intermittent seemingly random problems.</para>
  </listitem>
  <listitem>
    <para>If you are using a WinNT or Win2000 machine, the OS is probably
    attempting to attach a serial mouse to the port you are using (COM1 or 
    COM2). To prevent this, edit your <filename>c:\boot.ini</filename> file, 
    and you will find a line that looks something like the following:

<programlisting>
multi(0)disk(0)rdisk(0)partition(1)\WINNT=&quot;Windows NT Workstation Version 4.00&quot;
</programlisting>

    Add the following to the end of the line: 
    <filename>/NoSerialMice:COM1</filename> (or COM2) so that the new line
    looks like:</para>

<programlisting>
multi(0)disk(0)rdisk(0)partition(1)\WINNT=&quot;Windows NT Workstation Version 4.00&quot; /NoSerialMice:COM1
</programlisting>
    </listitem>
    <listitem>
    <para>If you are using a WinNT or Win2000 machine, try connecting 
    <application>apcupsd</application> to COM2 rather than COM1 (be sure to 
    change your <filename>c:\apcupsd\etc\apcupsd\apcupsd.conf</filename> to
    reflect the change).</para>
  </listitem>
  <listitem>
    <para>If you are using a Solaris machine, you may have similar problems 
    as described above for the WinNT machine. A possible fix is documented
    in the Sun section of the Configuration chapter of this manual.</para>
  </listitem>
  <listitem>
    <para>Try connecting your UPS to another machine. If it works, then you
    probably have a bad serial port card. As unlikely as this may sound, at
    least two of our users have had to replace bad serial port cards.</para>
  </listitem>
  <listitem>
    <para>Try doing an <command>lsof /dev/ttyS0</command> where you replace
    the <emphasis role="bold">/dev/ttyS0</emphasis> with your serial port
    name. If you get no output, the port is free (or there is no physical
    port). If you get output, then another program is using the port, and
    you should see which one.</para>
  </listitem>
  <listitem>
    <para>Try doing a <command>dmesg | grep tty</command>. This may show 
    you if a program has grabbed the port. (Thanks to Joe Acosta for the 
    suggestion.)</para>
  </listitem>
  <listitem>
    <para>If all else fails, make sure your system is configured for serial 
    port support.</para>
  </listitem>
  <listitem>
    <para>If you are running Linux, check your <filename>/proc</filename> 
    file system. For example: <command>cat /proc/devices</command> should 
    print something like <emphasis>4 ttyS</emphasis> if you have a serial
    port. If your serial port is working, a <command>cat 
    /proc/interrupts</command> should show the serial port usage (e.g. 
    <emphasis role="bold">4: 294553 XT-PIC serial</emphasis>) Also, 
    <command>cat /proc/ioports</command> should show up something like 
    <emphasis role="bold">03f8-03ff : serial(auto)</emphasis>. Or, 
    <command>cat /proc/tty</command> should print a line like 
    <emphasis role="bold">serial /dev/ttyS 4 64-127 serial</emphasis>. 
    Finally, a <command>cat /proc/tty/driver/serial</command> should
    print something like the following:</para>

<programlisting>
serinfo:1.0 driver:5.05c revision:2001-07-08 
0: uart:16550A port:3F8 irq:4 baud:9600 tx:1503168 rx:1461721 fe:8
</programlisting>
</listitem>
</itemizedlist>

<para>The first thing to do is to look at your log file, usually
<filename>/var/log/messages</filename> because
<application>apcupsd</application> writes more detailed information to
the log file whenever there is an error.</para>

<para>If you have a UPS that uses apcsmart protcol (see <link
linkend="type_table">table of types</link> for a list of the UPSes
using these protocols), you can manually test the serial
communications with the UPS by starting a serial port communications
program (such as <application>minicom</application>,
<application>tip</application>, or <application>cu</application>) with
the settings 2400 8N1 (2400 baud, 8 bits, no parity, 1 stop bit). Be
extremely careful what you send to your UPS as certain characters may
cause it to power down or may even cause damage to the UPS. Try
sending an upper case Y to the UPS (without a return at the end). It
should respond with SM. If this is not the case, review the possible
problems listed above. If you fat finger the Y and enter y instead, no
cause for alarm, you will simply get the APC copyright notice.</para>
<para>Once you are sure that serial port communications is working,
proceed to the next test.</para>

</sect1>

<sect1 id='serial_apctest'><title>Using <application>apctest</application> on
Serial-Line UPSses</title>

<para>On an apcsmart serial-line UPS, <application>apctest</application>
will give you access to the battery of low-level tests we described in
<xref linkend='usb_apctest'/>.  If you have a voltage-signalling UPS,
it enables a different test repertoire which is described here,  Among
other things, if you are uncertain about what kind of cable you have, 
you may be able to use <application>apctest</application> to figure
that out.</para>

<para>Shutdown <application>apcupsd</application> if it is running.
Make sure your <filename>/etc/apcupsd/apcupsd.conf</filename> file has
<emphasis role="bold">UPSTYPE backups</emphasis> and <emphasis
role="bold">UPSCABLE simple</emphasis> Normally
<application>apctest</application> will have been built and installed
by default, otherwise, you can explicitly build it on Unix
with:</para>

<programlisting>
cd &lt;apcupsd-source-directory&gt;
make apctest
./apctest
</programlisting>

<para>on Win32 systems, use:</para>

<programlisting>
make apctestwin32
./apctest
</programlisting>

<para>It will present you with the following output</para>

<programlisting>
2001-02-07 04:08:26 apctest 3.8.5 (3 January 2002) redhat
Checking configuration ...
sharenet.type = DISABLE
cable.type = CUSTOM_SIMPLE
mode.type = BK
Setting up serial port ...
Creating serial port lock file ...
Doing prep_serial() ...
Hello, this is the apcupsd Cable Test program.
This part of apctest is for testing dumb UPSes (ones that uses signaling rather than commands.
Most tests enter a loop polling every second for 10 seconds.
</programlisting>

<para>Then it will present you with the following list of choices: </para>

<programlisting>
1) Test 1 - normal mode
2) Test 2 - no cable
3) Test 3 - no power
4) Test 4 - low battery (requires test 3 first)
5) Test 5 - battery exhausted
6) Test 6 - kill UPS power
7) Test 7 - run tests 1 through 5
8) Guess which is the appropriate cable
9) quit

Select test number: 
</programlisting>

<para>Run tests 1, 2, and 3. Note, none of the currently supported cables
will indicate a change for test 2. You can then run test 8 to see
what cable it thinks you should be using. Finally run test 4.</para>

<para>apctest can also be run for Smart UPSes.</para>

<para>The print out of your testing will be written to the file
<filename>apctest.output</filename>. If you are unable to solve your
problem, you can try posting that file to the development mailing
list, and perhaps we can help you. In this case, please also include
information on your operating system, which version of
<application>apcupsd</application> you are using, your UPS model, and
also your <filename>apcupsd.conf</filename> file.</para>

<sect2><title>Expected <application>apctest</application> Signals for a UPS</title>

<para>If you have configured your UPS as:</para>
<programlisting>
UPSTYPE backups
UPSCABLE APC_940_0119A
    or APC_940_0127A
    or APC_940_0128A
    or APC_940_0020B
    or APC_940_0020C
</programlisting>

<para>here are typical signals you would expect to see in the output from
the various tests of apctest:</para>

<programlisting>
<emphasis role="bold">Test 1</emphasis> normal:              RTS for cables (0119A 0127A 0128A)
<emphasis role="bold">Test 2</emphasis> no serial cable:     not important
<emphasis role="bold">Test 3</emphasis> no AC power:         <emphasis role="bold">CTS</emphasis> for all cables
<emphasis role="bold">Test 4</emphasis> batteries exhausted: <emphasis role="bold">CTS</emphasis> and <emphasis role="bold">CD</emphasis> for all cables
</programlisting>

<para>Note: <emphasis role="bold">RTS</emphasis> if set in Test 1 will
probably also be set in all the other tests. This is not important,
what counts is the appearance of <emphasis role="bold">CTS</emphasis>
when the power fails and additionally <emphasis
role="bold">CD</emphasis> when the batteries are low.</para>

</sect2>
<sect2><title>Expected apctest Signals for a BackUPS Pro</title>

<para>If you have configured your UPS as:</para>

<programlisting>
UPSTYPE backupspro
UPSCABLE APC_940_0095A
    or APC_940_0095C
</programlisting>

<para>here are the typical signals you would expect to see in the output
from the various tests of apctest:</para>

<programlisting>
<emphasis role="bold">Test 1</emphasis> normal:              RTS not set
<emphasis role="bold">Test 2</emphasis> no serial cable:     not important
<emphasis role="bold">Test 3</emphasis> no AC power:         <emphasis
role="bold">RNG</emphasis>
<emphasis role="bold">Test 4</emphasis> batteries exhausted: <emphasis role="bold">RNG</emphasis> and <emphasis role="bold">CD</emphasis></programlisting>

<para>Note: <emphasis role="bold">RTS</emphasis> should never be set
in any of the tests as it is the killpower signal. What is important
is the appearance of <emphasis role="bold">RNG</emphasis> when the
power fails and additionally <emphasis role="bold">CD</emphasis> when
the batteries are low.</para> 

</sect2>
</sect1>
</chapter>
<chapter><title>Troubleshooting Serial Line communications</title>

<sect1><title>Determining Which Voltage-Signaling Cable You Have</title>

<para><emphasis>The most frequently encountered problem with
voltage-signalling UPSes (e.g. BackUPS 650) is that you have
incorrectly specified which cable is being used.</emphasis> All cables
furnished by APC have the cable number stamped on the side of the
computer connector end of the cable. Using this number with
<application>apcupsd</application> will normally work fine. If you do
not know what cable you have, you can use the
<application>apctest</application> program to determine the type of
the cable.</para>

<para>For simple signaling UPSes, you should <emphasis>not</emphasis>
use <emphasis role="bold">simple</emphasis> in the cable specification
(i.e. <emphasis role="bold">UPSCABLE simple</emphasis>) unless you
have made the cable yourself according to the wiring diagram given in
the cables chapter of this manual.</para>

</sect1>
<sect1><title>Once you have established serial communications</title>

<para>Once you have established that
<application>apcupsd</application> can talk to the UPS over the serial
part, go do the series of functional tests described in the main
<link linkend='testing'>Testing</link> section.</para>

<para>One additional note applies:</para>

<sect2><title>Bizarre Intermittent Behavior</title>

<para>In one case, a user reported that he received random incorrect
values from the UPS in the status output. It turned out that
<application>gpm</application>, the mouse control program for command
windows, was using the serial port without using the standard Unix
locking mechanism. As a consequence, both
<application>apcupsd</application> and <application>gpm</application>
were reading the serial port. Please ensure that if you are running
<application>gpm</application> that it is not configured with a serial
port mouse on the same serial port.</para>
</sect2>

</sect1>
</chapter>
<chapter><title>Recalibrating the UPS Runtime</title>

<para>Note: In a future release of <application>apcupsd</application>
this procedure will be replaced by a daemon operation that can be
performed on all types of UPS.</para>

<para>This section does not apply to voltage-signalling or dumb UPSes
such as the older BackUPS models.</para>

<para>Smart UPSes internally compute the remaining runtime, and
<application>apcupsd</application> uses the value supplied by the
UPS. As the batteries age (after say two or three years), the runtime
computation may no longer be accurate since the batteries no longer
hold the same charge. As a consequence, in the event of a power
failure, the UPS and thus <application>apcupsd</application> can
report a runtime of 5 minutes remaining when in fact only one minute
remains. This can lead to a shutdown before you might expect it,
because regardless of the runtime remaining that is reported, the UPS
will always correctly detect low batteries and report it, thus causing
<application>apcupsd</application> to correctly shutdown your
computer.</para>

<para>If you wish to have the UPS recalibrate the remaining runtime
calculations, you can do so manually as the current version of
<application>apcupsd</application> does not support this feature. To
do so,</para>

<itemizedlist>
  <listitem>
    <para>Shutdown <application>apcupsd</application></para>
  </listitem>
  <listitem>
    <para>contact your UPS directly using some terminal program such as
    <application>minicom</application>, <application>tip</application>, or <application>cu</application> with the settings 2400 8N1 (2400 baud, 8 bits,
no parity, 1 stop bit). Be extremely careful what you send to your
UPS as certain characters may cause it to power down or may even
cause damage to the UPS. Try sending an upper case Y to the UPS
(without a return at the end). It should respond with SM. If this
is not the case, read the chapter on testing. If you fat finger the
Y and enter y instead, no cause for alarm, you will simply get the
APC copyright notice.</para>
  </listitem>
  <listitem>
    <para>when you are sure you are properly connected send an upper case
D (no cr). This will put the UPS into calibration mode, and it will
drain the battery down to 25% capacity (35% for a Matrix) at which
point it will go back on the mains. In doing so, it will recompute
the runtime calibration.</para>
  </listitem>
  <listitem>
    <para>If you wish to abort the calibration, enter a second D command.</para>
  </listitem>
  <listitem>
    <para>When you are done, restart <application>apcupsd</application>.</para>
  </listitem>
</itemizedlist>

<para>In principle, you should be able to do this with the computer
powered by the UPS, but if you wish to be completely safe, you should
plug your computer into the wall prior to performing the runtime
calibration. In that case, you will need to artificially load the UPS
with light bulbs or other means. You should supply a load of about 30
to 35% but not more than 50%. You can determine the load by looking at
the output of the <command>apcaccess status</command> command while
<application>apcupsd</application> is running.</para>

<para>You should not run the recalibration command more than once or
twice per year as discharging these kinds of batteries tends to
shorten their life span.</para>

<sect1><title>Status Logging On Serial-Line UPSes</title>

<para>Serial-line UPSes that speak the apcsmart protocol log all of
the events described in the <link linkend='statusformat'>Status
Format</link> section of the Technical Reference.  Voltage-signalling
UPSes, on the other hand, have a much narrower data channel.  They
can only report a small handful of conditions.</para>

<para>The following summarizes (rather sketchily, sorry) the 
data you can expect to get from this obsolete hardware.  All
corrections and additions will be welcome.</para>

<para>From BackUPS Pro and SmartUPS v/s:</para>

<programlisting>
LINEFAIL : OnlineStatus
BATTSTAT : BatteryStatus
MAINS    : LineVoltageState
LASTEVNT : LastEventObserved
</programlisting>

<para>BackUPS and NetUPS Simple Signals</para>

<programlisting>
LINEFAIL : OnlineStatus
BATTSTAT : BatteryStatus
</programlisting>

</sect1>
</chapter>
<chapter id='datalogging'><title>DATA Logging</title>

<para>This feature is somewhat outdated and not often used.</para>

<para>Data logging consists of periodically logging important data
concerning the operation of the UPS. For the definitive definition
of the format, see log_data() in apcreports.c. The format varies
according to the UPS model and the information available from the
UPS.</para>

<para>For UPS models, NBKPRO, SMART, SHARESMART, and MATRIX, the
output is written in a format very similar to what PowerChute
writes. That is:</para>

<para>MinLineVoltage, MaxLineVoltage, OutputVoltage, BatteryVoltage,
LineFrequency, LoadPercent,
UPSTemperature,AmbientTemperature,Humidity,LineVoltage,
BatteryCharge,toggle</para>

<para>Any value that is not supported by your UPS such as
AmbientTemperature and Humidity will be blank or possibly as 0.0.
In any case the commas before and after that field will still be
output. The toggle value alternates from 0 to 1 on each line. This
was added at user request so that no two adjacent samples are
identical.</para>

<para>An actual example from the log file is:</para>

<programlisting>
Nov  2 12:43:05 matou apcupsd[23439]: 224.9,227.5,226.2,27.74,50.00,100.0,30.6,,,226.2,50.0,1
</programlisting>
</chapter>
</part>

<part id='arcana'><title>Technical Reference</title>

<chapter id='directive_reference'><title>Configuration Directive
Reference</title>

<para>Configuration directives in 
<filename>/etc/apcupsd/apcupsd.conf</filename> control the behavior
of the <application>apcupsd</application> daemon.  For most installations
it is only necessary to set a handful of general directives. The rest
can be left at their defaults unless you have an exotic configuration.</para>

<sect1><title>General Configuration Directives</title>

<para>In general, each of these directives is required (ecept that the DEVICE
directive is ignored for UPSCABLE ether).</para>

<variablelist>
  <varlistentry>
    <term> UPSTYPE &lt;type of APC UPS you have&gt;</term>

    <listitem>
      <para>The name of a driver.  Should be one of
      <literal>dumb</literal>, <literal>apcsmart</literal>,
      <literal>net</literal>, <literal>usb</literal>,
      <literal>snmp</literal>, or <literal>test</literal>. This
      describes your interface type.</para>

      <para>The UPSTYPE directive can be defined during
      installation by using the <option>--with-upstype=</option> option of
      the <command>./configure</command> program.</para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>UPSCABLE &#xA0;&#xA0; &lt;type of cable you are using&gt;&gt;</term>
    <listitem>
<literallayout>
      [ simple | 940-0020B | 940-0023A ]
      [ smart | 940-0024B | 940-0024C ]
      [ 940-1524C | 940-0024G | 940-0095A | 940-0095B | 940-0095C | 940-0119A]
      [ ether | usb ] 
</literallayout>

      <para>The <option>--with-upscable=</option> option of 
      <command>./configure</command> can be used to set a default for 
      this directive during the your build.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>DEVICE&#xA0;&#xA0; &lt;name of device&gt;</term>
    <listitem>
       <para>Specify which device is used for UPS communications
       (normally a USB or serial port. The default is platform-dependent,
       and is usually something like <filename>/dev/ttyS0</filename>. For
       USB ports, you may leave the name of the device blank (no
       specification) and <application>apcupsd</application> will
       automatically search the standard locations for the UPS.
       You may also specify a port range specification of the form
       <filename>/dev/usb/hid/hiddev[0-15]</filename>, .</para>

       <para>Normally, the <command>./configure</command> program will
       set an appropriate default value.  You may also specify the 
       <option>--with-serial-dev=</option> option of the
       <command>./configure</command> program to set this directive 
       at build time.</para>

       <para>If you have specified 
       <emphasis role="bold">UPSTYPE net</emphasis>, then the device name
       to be specified consists of 
       <emphasis role="bold">hostname:port</emphasis> where the hostname
       is the fully qualified name or IP address of the host (NIS server)
       and the port (optional) is the port to use to contact the
       server.</para>

       <para>If you specified <emphasis role="bold">UPSTYPE snmp</emphasis>,
       then the device name becomes 
       <emphasis role="bold">hostname:vendor:community</emphasis>. Please 
       see the <link linkend='snmp'>SNMP chapter</link> in this manual 
       for more details.</para>
     </listitem>
  </varlistentry>
  <varlistentry>
    <term> LOCKFILE &#xA0;&#xA0; &lt;path to lockfile&gt;</term>
    <listitem>
      <para>This option tells <application>apcupsd</application>
      where to create a lockfile for the USB or serial port in the
      specified directory. This is important to keep two programs from
      reading or writing the port at the same time. Please note
      that although the directive name is LOCKFILE, you are actually
      specifying the lock file path. <application>apcupsd</application> 
      automatically appends the name of the device when creating the file.
      On most systems, this directive is automatically set by the
      <command>./configure</command> program.  You may also explicitly
      set it during the build process by using the 
      <option>--with-lock-dir=</option> option of the 
      <command>./configure</command> program.</para>
    </listitem>
  </varlistentry>
</variablelist>

</sect1>
<sect1 id="ConfigInfoServer"><title>Configuration Directives Used by the Network Information Server</title>

<para>None of these directives are required for proper operation of
<application>apcupsd</application>. For the Network Information Server
to work, it must be enabled in the configuration (default) with
<option>--enable-nis</option></para>

<variablelist>
  <varlistentry>
    <term>NETSERVER [on | off]</term>
    <listitem>
      <para>This configuration directive turns the network information
      server on or off. If it is on, <application>apcupsd</application>
      will spawn a child process that serves STATUS and EVENTS information
      over the network. This information is currently used by the Web-based
      CGI programs. The default is on. In some cases, for added security,
      you may want to invoke a separate information server daemon from the
      inetd daemon. In that case, <emphasis>NETSERVER</emphasis> should be 
      <emphasis>off</emphasis>.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>NISIP &lt;IP-address&gt;</term>
    <listitem>
      <para>This directive specifies an IP address on which NIS server will
      listen for incoming connections. Default value is 0.0.0.0 that
      means any incoming request will be serviced but if you want it to
      listen to a single subnet you can set it up to that subnet address,
      for example 192.168.10.0. Additionally you can listen for a single
      IP like 192.168.10.1. You may also use the <option>--with-nisip=</option>
      option of the <command>./configure</command> program to set this 
      directive during the build.</para> 

      <para>This directive does not work on Win32 machines because
      inet_ipton() is not implemented there.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term> NISPORT &lt;port&gt;</term>
    <listitem>
      <para>This configuration directive specifies the port to be used by
      the <application>apcupsd</application> Network Information Server.
      The default is platform dependent, but typically 3551, which we have
      received from IANA as the official <application>apcupsd</application>
      networking port. If you change this port, you must manually change the
      #define SERV_TCP_PORT in cgi/upsfetch.c and rebuild the CGI programs.
      An alternative is to use the <option>--with-nis-port=</option> option
      of the <command>./configure</command> program during the build. 
      In this case, all the appropriate locations will be automatically
      changed.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term> EVENTSFILE &lt;filename&gt;</term>
    <listitem>
      <para>If you want the <application>apcupsd</application>
      network information server to provide the last 10 events via the
      network, you must specify a file where <application>apcupsd</application>
      will save these events. The default is: 
      <filename>/etc/apcupsd/apcupsd.events</filename>.
      Currently, <application>apcupsd</application> will save at most the 
      last 50 events. Periodically (once an hour by default), 
      <application>apcupsd</application> will check the size of this file.
      When more than 50 events are recorded, <application>apcupsd</application>
      will truncate the file to the most recent 10 events. Consequently this
      file will not grow indefinitely. Although we do not recommend it, 
      you may change these values by editing apcevents.c and changing the
      appropriate defines. Be aware that if you set these values to very 
      large numbers, <application>apcupsd</application> may make excessive
      memory demands on the system during the data access and file truncation 
      operations.</para>

      <para>This filename may also be specified at build time by
      using the <option>--with-log-dir=</option> option of the 
      <command>./configure</command> program.</para>
    </listitem>
  </varlistentry>
</variablelist>

</sect1>
<sect1 id="ConfigPowerFail"><title>Configuration Directives used during Power Failures</title>

<para>In general, none of these directives are required. However, if
you have a voltage-signalling (dumb) UPS with a cable that does not
support the Low Battery signal, you must set the TIMEOUT directive to
force a shutdown. Please see the <link linkend='cables'>Cables</link>
section of this manual for more details. </para>

<variablelist>
  <varlistentry>
    <term>ANNOY &#xA0;&#xA0; &lt;time in seconds&gt;</term>
    <listitem>
      <para>Specify the time in seconds between messages requesting logged
      in users to get off the system during a power failure. This timer
      starts only when the UPS is running on batteries. The default is
      300 seconds (5 minutes). <application>apcupsd</application> sends
      the annoy messages by invoking the <application>apccontrol</application>
      script with the <command>annoyme</command> argument. The default is
      to send a <application>wall</application> message on Unix
      systems and a popup message in Windows.</para>

      <para>The value of <emphasis role="bold">ANNOYDELAY</emphasis> must be 
      greater than the value of <emphasis role="bold">ANNOY</emphasis> in
      order to receive annoy messages (this doesn't make sense, and means
      that the default values do not generate annoy messages: KES).</para>

      <para>Note that if <emphasis role="bold">NOLOGON</emphasis> 
      is set to <emphasis role="bold">disable</emphasis> the annoy messages
      will also be disabled.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>ANNOYDELAY&#xA0;&#xA0; &lt;time in seconds&gt;</term>
    <listitem>
      <para>Specify delay time in seconds before 
      <application>apcupsd</application> begins requesting logged in users 
      to get off the system during a power failure. This timer starts only
      after the UPS is running on batteries. This timer is reset when the
      power returns. The default is 60 seconds. Thus, the first warning to 
      log off the system occurs after 60 seconds on batteries, assuming
      that <emphasis role="bold">NOLOGON</emphasis> is not set to 
      <emphasis role="bold">disable</emphasis>.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>NOLOGON&#xA0;&#xA0;
&lt;specifies when <application>apcupsd</application> should prevent user
logins&gt;</term>
    <listitem>
      <para>[ disable | timeout | percent | minutes | always ] are valid types.</para>

      <para>The type specified allows you define the point when
      <application>apcupsd</application> will create the 
      <filename>/etc/nologin</filename> file and thus when user
      logins are prohibited. Once the <filename>/etc/nologin</filename> file
      is created, normal users are prevented from logging in. Control of
      when this file is created is important for allowing systems with
      big UPSes to run as normally until the system administrator
      determines the need for preventing user logins. The feature also
      allows the system administrator to hold the "ANNOY" factor until
      the <filename>/etc/nologin</filename> file is created. The default is
      always if no NOLOGON directive is specified.</para>

      <para>As far as I can tell, the only useful types are disable
      and always since the difference in the time when the logout
      warning is given and shutdown occurs for the other types is very
      short (KES).</para>

      <variablelist>
      <varlistentry>
      <term>disable</term>
      <listitem>
        <para>prevents <application>apcupsd</application> from creating
        the nologin file.  Consequently, any user can login during a
        power failure condition.  Also, the ANNOY feature is disabled so
        users will not be warned to logoff the system.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
      <term>timeout</term>
      <listitem>
        <para>specifies that <application>apcupsd</application> should
        prohibit logins after the UPS is on batteries for 90% of the
        time specified on the <emphasis role='bold'>TIMEOUT</emphasis>
        configuration directive. Note! Normally you don't want to
        specify a TIMEOUT value, so this option is probably not too
        useful (KES).</para>
      </listitem>
      </varlistentry>
      <varlistentry>
      <term>percent</term>
      <listitem>
        <para>specifies that <application>apcupsd</application> should
        prohibit logins when the remaining battery charge percentage
        reaches 110% or less than the value specified on the <emphasis
        role='bold'>BATTERYLEVEL</emphasis> configuration directive.
        Thus if the <emphasis role='bold'>BATTERYLEVEL</emphasis> is
        specified as 15, <application>apcupsd</application> will
        prohibit logins when the battery charge drops below 16% (15% X
        110% = 16%).</para>
      </listitem>
      </varlistentry>
      <varlistentry>
      <term>minutes</term>
      <listitem>
        <para>specifies that <application>apcupsd</application> should
        prohibit logins when the remaining runtime in minutes reaches
        110% or less than the value specified on the <emphasis
        role='bold'>MINUTES</emphasis> configuration directive. Thus if
        <emphasis role='bold'>MINUTES</emphasis> is set to 3,
        <application>apcupsd</application> will prohibit logins when the
        remaining runtime is less than 3 minutes (3 X 110% = 3).</para>
      </listitem>
      </varlistentry>
      <varlistentry>
      <term>always</term>
      <listitem>
        <para>causes <application>apcupsd</application> to immediately
        prohibit logins when a power failure occurs. This will also
        enable the ANNOY feature.</para>
      </listitem>
      </varlistentry>
      </variablelist>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>BATTERYLEVEL &#xA0;&#xA0; &lt;percent of battery&gt;</term>
    <listitem>
      <para>If BATTERYLEVEL is specified, during a power failure,
      <application>apcupsd</application> will halt the system when the 
      remaining battery charge falls below the specified percentage. 
      The default is 5 percent. This directive is ignored for dumb 
      (voltage-signalling) UPSes. To totally disable this counter, set 
      <emphasis role="bold">BATTERYLEVEL -1</emphasis> in your
      <filename>apcupsd.conf</filename> file.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>MINUTES &#xA0;&#xA0; &lt;battery runtime in minutes&gt;</term>
    <listitem>
      <para>If MINUTES is specified, during a power failure,
      <application>apcupsd</application> will shutdown the system when
      the remaining runtime on batteries as internally calculated by
      the UPS falls below the time specified. The default is 3. This
      directive is ignored for dumb (voltage-signalling) UPSes. It
      should be noted that some UPSes report an incorrect value for
      remaining runtime when the battery is fully charged. This can be
      checked by examining the <emphasis
      role="bold">TIMELEFT</emphasis> value as printed in the output
      of an <command>apcaccess status</command> command. If the value
      is zero or otherwise unreasonable, your UPS is probably broken.
      In this case, we recommend that you disable this timer by
      setting <emphasis role="bold">MINUTES -1</emphasis> in your
      <filename>apcupsd.conf</filename> file.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>TIMEOUT &#xA0;&#xA0; &lt;time in seconds&gt;</term>
    <listitem>
      <para>After a power failure, <application>apcupsd</application>
      will halt the system when TIMEOUT seconds have expired. A value
      of zero disables this timer. Normally for all Smart UPS models
      and dumb UPSes with cables that support low battery detection,
      this should be zero so that the shutdown time will be determined
      by the battery level and/or remaining runtime (see above) or in
      the case of a voltage-signalling UPS, when the battery is
      exhausted. This command is required for dumb UPSes that do not
      provide a battery exhausted signal (only testing can determine
      this point). For more information, see the <link
      linkend='testing'>Testing</link> section of this manual. This
      timer can also be useful if you want some slave machines to
      shutdown before other machines to conserve battery power. It is
      also useful for testing <application>apcupsd</application>
      because you can force a rapid shutdown by setting a small value
      (e.g. 60) and pulling the plug to the UPS.</para>

      <para>When apcupsd is running in master mode (UPSCLASS
      netmaster), and a shutdown condition is determined,
      <application>apcupsd</application> will notify each of the
      slaves to perform a shutdown then apcupsd will sleep for 30
      seconds before issuing the shutdown of its own computer. If you
      need the master to wait additional time before shutting down (to
      allow for shutdown of slower slaves or of slaves running
      software that requires more time to shutdown &mdash; e.g. databases),
      you can do so by adding additional sleep() commands to
      <filename>/etc/apcupsd/apccontrol</filename> in each case that 
      causes a shutdown.</para>

      <para><emphasis role='bold'>TIMEOUT</emphasis>, <emphasis
      role='bold'>BATTERYLEVEL</emphasis>, and <emphasis
      role='bold'>MINUTES</emphasis> can be set together without
      problems. apcupsd will react to the first case or test that is
      valid. Normally SmartUPS users will set <emphasis
      role='bold'>TIMEOUT</emphasis> to zero so that the system is
      shutdown depending on the percentage battery charge remaining
      (<emphasis role='bold'>BATTERYLEVEL</emphasis>) or the remaining
      battery runtime (<emphasis role='bold'>MINUTES</emphasis>).</para>
    </listitem>
  </varlistentry>
  <varlistentry id="KILLDELAY">
    <term> KILLDELAY &#xA0;&#xA0; &lt;time in seconds&gt;</term>
    <listitem>
      <para>If killdelay is set, <application>apcupsd</application> will 
      continue running after a shutdown has been requested, and after the 
      specified time in seconds, <application>apcupsd</application> will 
      attempt to shut off the UPS the power. This directive should
      normally be disabled by setting the value to zero, but on some
      systems such as Win32 systems <application>apcupsd</application> 
      cannot regain control after a shutdown to force the UPS to shut 
      off the power. In this case, with proper consideration for the timing,
      the <emphasis role="bold">KILLDELAY</emphasis> directive can be useful.
      Please be aware, if you cause <application>apcupsd</application> to 
      kill the power to your computer too early, the system and the disks 
      may not have been properly prepared. In addition, 
      <application>apcupsd</application> must continue running after the 
      shutdown is requested, and on Unix systems, this is not normally the 
      case as the system will terminate all processes during the 
      shutdown.</para>
    </listitem>
  </varlistentry>
</variablelist>

</sect1>
<sect1 id="ConfigLogging"><title>Configuration
Directives used to Control System Logging</title>

<variablelist>
  <varlistentry>
    <term>STATTIME&#xA0;&#xA0;&lt;time&gt;</term>
    <listitem>
      <para>This directive supplies the time interval between writes to the
      STATUS file. If set to zero, the STATUS file will not be written.
      Please note that in a future version of 
      <application>apcupsd</application> the STATUS
      file code will disappear since its functionality has been replaced
      by the Network Information Server and by 
      <emphasis role="bold">apcaccess status</emphasis>, as a consequence, 
      it is normally disabled by setting it to zero.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>STATFILE &#xA0;&#xA0;&lt;file&gt;</term>
    <listitem>
      <para>This directive specifies the file to be used when writing the
      STATUS information. The default is 
      <filename>/etc/apcupsd/apcupsd.status</filename>.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>DATATIME&lt;time&gt;</term>
    <listitem>
      <para>This directives supplies the time interval between writes
      of PowerChute&amp;tm; like data information to the log file. See
      the <link linkend='datalogging'>Data</link> section of this
      manual for additional details.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>FACILITY&#xA0;&#xA0;&lt;log-facility&gt;</term>
    <listitem>
      <para>The facility directive can be used to change the system logging 
      class or facility. The default is 
      <emphasis role="bold">DAEMON</emphasis>. This parameter can be useful 
      if you wish to direct the <application>apcupsd</application> system 
      logging information to other than your system default files. See 
      the Logging section of this manual for additional <!-- FIXME -->
      details.</para>
    </listitem>
  </varlistentry>
</variablelist>

</sect1>
<sect1 id="UPS_Sharing"><title>Configuration Directives for Sharing 
a UPS</title>

<para>The following directives apply to the master/slave networking
mode of <application>apcupsd</application> where multiple machines can
be powered by the same UPS. One machine, the master, will have a
serial port connection to the UPS, and the other machines, the slaves,
will obtain their information via the network from the master.</para>

<para>Note, as of version 3.10.x, the old master/slave code is by
default turned off in the configuration. You must explicitly enable
it by including a <option>--enable-master-slave</option> option on your
<command>./configure</command> command before building the source.</para>

<para>In addition to the old master/slave code, there is now a new
network driver enabled with <option>--enable-net</option> (default
disabled) that can be used to control a slave from any version of
apcupsd running NIS. This is a much more flexible system of
controlling slaves because a slave machine that also has NIS turned on
can thus act as a master for another slave with
<option>--enable-net</option> turned on. With this mode turned on, the
slave obtains the address of the master from the <emphasis
role="bold">DEVICE</emphasis> directive, which takes the form
<emphasis role="bold">hostname[:port]</emphasis> as a consequence,
none of the directives apply for this form of networking. In addition,
for this mode to work, you must specify <emphasis role="bold">UPSTYPE
net</emphasis> so that the proper driver is loaded.</para>

<para>The remainder of this section presents directives that apply to
the old master/slave code that must be enabled by the <emphasis
role="bold">enable-master-slave</emphasis> configuration
option.</para>

<variablelist>
  <varlistentry>
    <term>UPSCLASS&#xA0;&#xA0; &lt;class of operation&gt;</term>
    <listitem>
      <para>[ standalone | shareslave | sharemaster ] and
      [ netslave | netmaster ] are valid types.
      [ standalone | netslave | netmaster ] are tested classes.
      [ shareslave | sharemaster ] classes are being tested.</para>

      <para>The default is <emphasis role='bold'>standalone</emphasis>
      and should be used for all machines powered by the UPS and having a
      serial port connection to the UPS, but where there are no other
      computers dependent on power from the same UPS. This is the
      normal case.</para>

      <para>Use <emphasis role='bold'>netmaster</emphasis>, if and only
      if you have a serial port connection to the UPS and there are other
      machines deriving power from the same UPS. This is required in all
      master configuration files.</para>

      <para>Use <emphasis role='bold'>netslave</emphasis> if and only if
      you have no serial port connection to the UPS, but you derive power
      from it. This is required in all slave configuration files, and in
      this case, you will also have UPSCABLE set to ether.</para>

      <para>Use <emphasis role='bold'>shareslave</emphasis> if and only
      if you are using a ShareUPS and connected to a BASIC Port with
      Simple Signal. This code is not fully tested.</para>

      <para>Use <emphasis role='bold'>sharemaster</emphasis>, if and only 
      if you are using a ShareUPS and connected to the ADVANCED Port Smart 
      Signal control. This code is not fully tested.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>UPSMODE &#xA0;&#xA0; [disable | share | net | sharenet ] are valid types.</term>
    <listitem>
      <para>[ disable | net ] are the only known and tested classes.</para>

      <para>[ share | sharenet ] classes are being tested.</para>

      <para>For normal standalone operations, you will set UPSMODE to
      disable to indicate that you are disabling the master/slave
      networking.</para>

      <para>However, if you are using a single UPS to power several
      computers and you have configured master and slave computers, then
      set this value to net.</para>

      <para>Use share for two or seven (2/7) additional simple signal ports
      on a SmartAccessories(tm) (internal/external box) for SmartUPSes.
      The share and sharenet code is not fully tested.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>NETTIME &#xA0;&#xA0; &lt;time in seconds&gt;</term>
    <listitem>
      <para>The interval in seconds that the master uses to send
      information to slave machines. This rate is automatically set to 1
      second if the UPS goes on batteries and reset to your specified
      value when the mains power returns. A typical value might be 60
      seconds.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>NETPORT &#xA0;&#xA0; &lt;IP port number&gt;</term>
    <listitem>
      <para>This port number is used for communications in 
      the master/slave networking code. Note that the master and each slave 
      must have the same port number specified on the NETPORT directive in 
      the configuration file. This port may also be specified during 
      installation by using the <option>--with-net-port=</option> option of 
      the <command>./configure</command> program.</para>

      <para>The NETPORT should not be confused with the port number for the
      Network Information Server which is specified with the
      <emphasis role="bold">SERVERPORT</emphasis> configuration 
      directive.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>MASTER&#xA0;&#xA0; &lt;name of the master&gt; for slave machines.</term>
    <listitem>
       <para>Used in slave configuration files, this is the network name of
      the master which is authorized to send commands to this slave. In
      all cases (of which I am aware), when you specify a 
      <emphasis role="bold">MASTER</emphasis> directive, you will also specify 
      <emphasis role="bold">UPSCABLE ether</emphasis> since your
      information about the UPS will come via the network from a master.</para>

      <para>The slave machine will be shutdown whichever occurs first:
      either at the request of the master when it does a shutdown or when
      the values you have specified for TIMEOUT, BATTERYLEVEL, or MINUTES
      expire (these should work but have not been fully tested).
      Consequently, if you want the slaves to begin shutting down before
      the master, you can do so by adjusting the values in the
      configuration file. If you want the slave to remain up until the
      master shuts down, you should set TIMEOUT, BATTERYLEVEL, and
      MINUTES all to zero.</para>

      <para>For proper functioning of the slave, you must specify the same
      <emphasis role="bold">UPSTYPE</emphasis> in the slave configuration 
      file as is in the master configuration file.</para>

      <para>It should be noted that the master and slaves continue to
      communicate over the network even after the master has issued a
      shutdown command to the slaves. This is because the master 
      <application>apcupsd</application> continues to run until it receives 
      the shutdown signal from the system. This is important to ensure that 
      all the slaves have been properly notified of the shutdown.</para>

      <para>We recommend that the machine names used on the 
      <emphasis role="bold">MASTER</emphasis> and 
      <emphasis role="bold">SLAVE</emphasis> directives be put in your 
      <filename>/etc/hosts</filename> file so that 
      <application>apcupsd</application> will be able to resolve the machine 
      name during startup and shutdown even if DNS is not running.
      Alternatively, you can use IP addresses on the 
      <emphasis role="bold">MASTER</emphasis> and
      <emphasis role="bold">SLAVE</emphasis> directives, but this is 
      less flexible.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>SLAVE&#xA0;&#xA0; &lt;name of slave(s)&gt; used only in MASTER 
    configuration files.</term>
    <listitem>
      <para>Used in master configuration files, this is the name of a slave
      machine that depends on this master. There can be a maximum of 20
      slaves attached to one master. Thus you can specify multiple SLAVE
      directives in a master configuration file. Only one slave name can
      be specified per SLAVE directive, thus for multiple slaves, specify
      multiple SLAVE directives.</para>

      <para>As noted above the master and slaves continue to communicate
      over the network even after the master has issued a shutdown
      command to the slaves. This is because the master 
      <application>apcupsd</application> continues to run until it receives 
      the shutdown signal from the
      system. This is important to ensure that all the slaves have been
      properly notified of the shutdown.</para>

      <para>We recommend that the machine names used on the 
      <emphasis role="bold">MASTER</emphasis> and 
      <emphasis role="bold">SLAVE</emphasis> directives be put in your 
      <filename>/etc/hosts</filename> file
      so that <application>apcupsd</application> will be able to resolve
      the machine name during startup and shutdown even if DNS is not running.
      Alternatively, you can use IP addresses on the 
      <emphasis role="bold">MASTER</emphasis> and
      <emphasis role="bold">SLAVE</emphasis> directives, but this is less 
      flexible.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>USERMAGIC&#xA0;&#xA0; &lt; user defined magic&gt; used only in 
    SLAVE configuration files.</term>
    <listitem>
      <para>The USERMAGIC directive is a sort of password that gives a second 
      level of identification security in a slave configuration file. It is a 
      character string up to 17 characters in length. It should be unique for 
      each slave. When the slave makes initial contact with the master, this 
      string is passed to the master. Then on each transmission from the 
      master to the slave, the string is passed back to the slave, which 
      checks that it is the correct string before accepting the master's 
      information. This string should be different for each and every slave 
      on the network. This directive is not required.</para>
    </listitem>
  </varlistentry>
</variablelist>

</sect1>
<sect1 id="eprom"><title>Configuration Directives Used to Set the 
UPS EPROM</title>

<para>The values specified with the following directives are only used
if the <option>--configure</option> option is specified on the 
<application>apcupsd</application> command line, and the UPS is capable of 
internal EPROM programming.  In that case, <application>apcupsd</application> 
attempts to set the values into the UPSes EPROM.</para>

<para>Under normal operations, the values for these parameters
specified in the configuration file are not used. Instead, they are
read from the UPS EPROM by <application>apcupsd</application>.  See
<xref linkend="eprom"/> of this manual for further details
before attempting to reprogram your EEPROM.</para>

<variablelist>
  <varlistentry>
    <term>SENSITIVITY &#xA0;&#xA0; &lt;sets sensitivity level&gt;</term>
    <listitem>
      <para>(H)igh, (M)edium, (L)ow</para>

      <para>This value determine how sensitive
      the UPS is to the mains quality and voltage fluctuations. The more
      sensitive it is, the quicker the UPS will switch to battery power
      when the mains line quality is bad. Normally, this should be set to
      H, but if you find your UPS switching to batteries frequently, you
      might want to try a less sensitive setting, providing that your
      computer equipment tolerates the poor quality mains. This value is
      written to the UPS EPROM when the  configure option is
      specified.</para>

      <para>Under normal apcupsd operations (no <option>--configure</option>
      option), <application>apcupsd</application> will read the value 
      stored in the UPS and display it in the STATUS output.</para>
    </listitem>
  </varlistentry>
  <varlistentry id='WAKEUP'>
    <term>WAKEUP&#xA0;&#xA0; &lt;set wakeup delay&gt;</term>
    <listitem>
      <para>The UPS power restart delay value in [0,60,180,300] in seconds
      after the UPS has shut down during a power failure. This is to
      prevent the power from coming back on too quickly after a power
      down, and is important for those who have high rpm drives that need
      to spin down before powering them up again. Some older SCSI models
      are very sensitive to this problem. Default is zero. This value is
      written to the UPS EPROM when the <option>--configure</option> option is
      specified.</para>

      <para>Under normal apcupsd operations (no 
      <option>--configure</option> option), 
      <application>apcupsd</application> will read the value stored in the 
      UPS and display it in the STATUS output.</para>
    </listitem>
  </varlistentry>
  <varlistentry id='SLEEP'>
    <term>SLEEP&#xA0;&#xA0; &lt;set sleep delay&gt;</term>
    <listitem>
      <para>The UPS delay or grace period in [20,180,300,600] seconds
      before the UPS cuts the power to your equipment. The default is 20
      seconds. This value is written to the UPS EPROM when the
      <option>--configure</option> option is specified.</para>

      <para>Under normal 
      <application>apcupsd</application>operations (no 
      <option>--configure</option> option), <application>apcupsd</application>
      will read the value stored in the UPS and display it in the STATUS
      output.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>LOTRANSFER&#xA0;&#xA0; &lt;lower limit of ups batt. transfer&gt;</term>
    <listitem>
      <para>This sets the low line voltage point at which to switch over to 
      batteries. Different values are permitted based on the UPS model, 
      classification, and manufacture date. Use <command>apcaccess 
      eeprom</command> to show you which values are permitted. This value is 
      written to the UPS EPROM when the <option>--configure</option> option 
      is specified.</para>

      <para>Under normal 
      <application>apcupsd</application>operations (no 
      <option>--configure</option> option), <application>apcupsd</application>
      will read the value stored in the UPS and display it in the STATUS
      output.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>HITRANSFER &#xA0;&#xA0; &lt;upper limit of ups batt. transfer&gt;</term>
    <listitem>
      <para>This sets the high line voltage point to switch over to batteries.
      Different values are permitted based on the UPS model, 
      classification, and manufacture date. Use <command>apcaccess 
      eeprom</command> to show you which values are permitted. This value is 
      written to the UPS EPROM when the <option>--configure</option> option 
      is specified.</para>

      <para>Under normal 
      <application>apcupsd</application>operations (no 
      <option>--configure</option> option), <application>apcupsd</application>
      will read the value stored in the UPS and display it in the STATUS
      output.</para>
    </listitem>
  </varlistentry>
  <varlistentry id='RETURNCHARGE'>
    <term>RETURNCHARGE &#xA0;&#xA0; &lt;min. batt. charge level&gt;</term>
    <listitem>
      <para>This parameter specifies what
      battery percentage charge is necessary before the UPS will supply
      power to your equipment after a power down. Different values are
      permitted based on the UPS model, classification, and manufacture
      date. Use <command>apcaccess eeprom</command> to show you which 
      values are permitted. This value is written to the UPS EPROM when the
      <option>--configure</option> option is specified.</para>

      <para>Under normal 
      <application>apcupsd</application>operations (no 
      <option>--configure</option> option), <application>apcupsd</application>
      will read the value stored in the UPS and display it in the STATUS
      output.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>BEEPSTATE&#xA0;&#xA0; &lt;alarm beep state&gt;</term>
    <listitem>
      <para>This parameter tells the UPS when it can sound its audio alarm.
      These settings are based on discrete events related to the
      remaining capacity of the UPS.</para>

      <variablelist>
        <varlistentry>
        <term>0</term>
        <listitem><para>immediately upon power failure</para></listitem>
        </varlistentry>

        <varlistentry>
        <term>T</term>
        <listitem><para>power failure + 30 seconds</para></listitem>
        </varlistentry>

        <varlistentry>
        <term>L</term>
        <listitem><para>low battery power</para></listitem>
        </varlistentry>

        <varlistentry>
        <term>N</term>
        <listitem><para>never</para></listitem>
        </varlistentry>
      </variablelist>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>UPSNAME &#xA0;&#xA0;
&lt;string&gt;</term>
    <listitem>
      <para>This is an eight character string. 
      This is the UPS name that will be stored in the UPS EPROM.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>BATTDATE &#xA0;&#xA0; &lt;string&gt;</term>
    <listitem>
      <para>This is an eight character string that is the last date the 
      batteries were changed.</para>
    </listitem>
  </varlistentry>
</variablelist>
</sect1>
</chapter>



<chapter id='statusformat'><title><application>apcupsd</application> Status Logging</title>

<para>There is a good deal of information available about the UPS and
<application>apcupsd</application>'s status. This document describes
the format of that information.  Normally you will get at it via
<application>apcaccess</application>, but there are other ways as
well.</para>

<sect1><title>Status report format</title>

<para>The STATUS output is in ASCII format with a single data value or
piece of information on each line output. Because not all UPSes supply
the same information, the output varies based on the type of UPS that
you are using. In general, if the information is not available for
your UPS, the data portion of the output record will contain an
<emphasis role="bold">N/A</emphasis> indicating that the information
is not available.</para>

<para>Status logging consists of periodically logging ALL available
information concerning the UPS. Since the volume of data is rather
large (over 1000 bytes per status), the STATUS data is not
automatically sent to the system log file, instead, it is written
as a series of data records to a specific file (normally
<filename>/etc/apcupsd/apcupsd.status</filename>).</para>

<para>After each write, the file is rewound so that the size of the
file remains constant. At the current time, this file is 1135
bytes. The format of this file is very similar to the old
<application>apcupsd</application> procfs file. The STATUS file is
kept for backward compatibility and will be eliminated in a future
version of <application>apcupsd</application>. The preferred method
for obtaining this information is from
<application>apcaccess</application> or by using the <link
linkend='cgiprogs'>CGI interface</link>.</para>

<para>To make reading the status data reliable via a named pipe, the
first record written contains a version number, the number of
records that follow the first record, and the total number of bytes
in those subsequent records. An actual example of such a status
file (/etc/apcupsd/apcupsd.status) is:</para>

<para>Consequently, the first record always consists of 24 bytes (23
characters followed by a newline). This record starts with APC and
as indicated in the example above is followed by 28 records
consisting of 675 bytes. The last record begins with END APC and
contains the date and time matching the DATE record.</para>

<para>Documentation of each record needs to be written. In the coming
weeks, I plan to add additional records and possibly change the
names of some of the fields.</para>

<para>When this data is written to a file, it is written as two
records, the first record, and all the other records together. In
reading the file, it can be either be read a record at a time, or
in one big read.</para>

<para>When this data is written to syslog(), it is written a record at
a time. The first record is the first 24 bytes. By having the
number of records and the size in the first record, the complete
status can be reliably reassembled.</para>

</sect1>
<sect1><title>Status Report Example</title>

<para>An example of output from an international SmartUPS 1000
follows:</para>

<programlisting>
DATE     : Wed Sep 27 17:30:23 CEST 2000
HOSTNAME : polymatou.sibbald.com
RELEASE  : 3.7.3-20000925
CABLE    : Custom Cable Smart
MODEL    : SMART-UPS 1000
UPSMODE  : Stand Alone
STARTTIME: Wed Sep 27 10:39:23 CEST 2000
UPSNAME  : UPS_IDEN
STATUS   : ONLINE 
LINEV    : 235.3 Volts
LOADPCT  :   9.3 Percent Load Capacity
BCHARGE  : 100.0 Percent
TIMELEFT : 130.0 Minutes
MBATTCHG : 5 Percent
MINTIMEL : 3 Minutes
MAXTIME  : 0 Seconds
MAXLINEV : 239.2 Volts
MINLINEV : 234.0 Volts
OUTPUTV  : 236.6 Volts
SENSE    : High
DWAKE    : 000 Seconds
DSHUTD   : 020 Seconds
DLOWBATT : 02 Minutes
LOTRANS  : 196.0 Volts
HITRANS  : 253.0 Volts
RETPCT   : 000.0 Percent
ITEMP    : 32.8 C Internal
ALARMDEL : 5 seconds
BATTV    : 27.9 Volts
LINEFREQ : 50.0 Hz
LASTXFER : Line voltage notch or spike
NUMXFERS : 0
XONBATT  : N/A
TONBATT  : 0 seconds
CUMONBATT: 0 seconds
XOFFBATT : N/A
SELFTEST : NO
STESTI   : 336
STATFLAG : 0x08 Status Flag
DIPSW    : 0x00 Dip Switch
REG1     : 0x00 Register 1
REG2     : 0x00 Register 2
REG3     : 0x00 Register 3
MANDATE  : 07/31/99
SERIALNO : QS9931125245
BATTDATE : 07/31/99
NOMOUTV  : 230
NOMBATTV :  24.0
HUMIDITY : N/A
AMBTEMP  : N/A
EXTBATTS : 0
BADBATTS : N/A
FIRMWARE : 60.11.I
APCMODEL : IWI
END APC  : Wed Sep 27 17:30:31 CEST 2000
</programlisting>

</sect1>
<sect1><title>Status Report Fields</title>

<para>The meaning of the above variables are:</para>

<variablelist>
  <varlistentry>
    <term>APC</term>
    <listitem>
      <para>is the header record indicating the STATUS format revision
level, the number of records that follow the APC statement, and the
number of bytes that follow the record.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>DATE</term>
    <listitem>
      <para>is the date and time that the information was last obtained
from the UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>HOSTNAME</term>
    <listitem>
      <para>is the name of the machine that collected the UPS data.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>RELEASE</term>
    <listitem>
      <para>is the <application>apcupsd</application> release number.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>CABLE</term>
    <listitem>
      <para>is the cable as specified in the configuration file.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>MODEL</term>
    <listitem>
      <para>is the UPS model as derived from information from the UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>UPSMODE</term>
    <listitem>
      <para>is the mode in which <application>apcupsd</application> is operating.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>STARTTIME</term>
    <listitem>
      <para>is the time/date that <application>apcupsd</application> was started.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>UPSNAME</term>
    <listitem>
      <para>is the name of the UPS as stored in the EEPROM.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>STATUS</term>
    <listitem>
      <para>is the current status of the UPS (ONLINE, CHARGING,
ONBATT,...)</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>MASTERUPD</term>
    <listitem>
      <para>is the last time the master sent an update to the slave. This
value is present only in slave configurations.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>LINEV</term>
    <listitem>
      <para>is the current line voltage as returned by the UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>LOADPCT</term>
    <listitem>
      <para>is the percentage of load capacity as estimated by the
UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>BCHARGE</term>
    <listitem>
      <para>is the percentage charge on the batteries.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>TIMELEFT</term>
    <listitem>
      <para>is the remaining runtime left on batteries as estimated by the
UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>MBATTCHG</term>
    <listitem>
      <para>if the battery charge percentage (BCHARGE) drops below this
value, <application>apcupsd</application> will shutdown your system.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>MINTIMEL</term>
    <listitem>
      <para><application>apcupsd</application> will shutdown your system if the remaining
runtime equals or is below this point.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>MAXTIME</term>
    <listitem>
      <para><application>apcupsd</application> will shutdown your system if the time on
batteries exceeds this value. A value of zero disables the
feature.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>MAXLINEV</term>
    <listitem>
      <para>is the maximum line voltage since the last STATUS as returned
by the UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>MINLINEV</term>
    <listitem>
      <para>is the minimum line voltage since the last STATUS as returned
by the UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>OUTPUTV</term>
    <listitem>
      <para>is the voltage the UPS is supplying to your equipment.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>SENSE</term>
    <listitem>
      <para>is the sensitivity level of the UPS to line voltage
fluctuations.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>DWAKE</term>
    <listitem>
      <para>is the amount of time the UPS will wait after a power off
condition when the power is restored.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>DSHUTD</term>
    <listitem>
      <para>is the grace delay that the UPS gives after receiving a power
down command from <application>apcupsd</application> before it powers off your
equipment.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>DLOWBATT</term>
    <listitem>
      <para>is the remaining runtime below which the UPS sends the low
battery signal. At this point <application>apcupsd</application> will force an
immediate emergency shutdown.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>LOTRANS</term>
    <listitem>
      <para>is the line voltage below which the UPS will switch to
batteries.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>HITRANS</term>
    <listitem>
      <para>is the line voltage above which the UPS will switch to
batteries.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>RETPCT</term>
    <listitem>
      <para>is the percentage charge that the batteries must have after a
power off condition before the UPS will restore power to your
equipment.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>STATFLAG</term>
    <listitem>
      <para>is a status flag indicating the UPS status. See STATUS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>ITEMP</term>
    <listitem>
      <para>is the internal UPS temperature as supplied by the UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>ALARMDEL</term>
    <listitem>
      <para>is the delay period for the UPS alarm.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>BATTV</term>
    <listitem>
      <para>is the battery voltage as supplied by the UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>LINEFREQ</term>
    <listitem>
      <para>is the line frequency in Hertz as given by the UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>LASTXFER</term>
    <listitem>
      <para>is the reason for the last transfer to batteries.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>NUMXFERS</term>
    <listitem>
      <para>the number of transfers to batteries since <application>apcupsd</application>
startup.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>XONBATT</term>
    <listitem>
      <para>time and date of last transfer to batteries, or N/A.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>TONBATT</term>
    <listitem>
      <para>time in seconds currently on batteries, or 0.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>CUMONBATT</term>
    <listitem>
      <para>total (cumulative) time on batteries in seconds since
<application>apcupsd</application> startup.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>XOFFBATT</term>
    <listitem>
      <para>time and date of last transfer from batteries, or N/A.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>SELFTEST</term>
    <listitem>
      <para>is the results of the last self test, and may have the
following values:
&#xA0;
OK - self test indicates good battery
BT - self test failed due to insufficient battery capacity
NG - self test failed due to overload
NO - No results (i.e. no self test performed in the last 5
minutes).</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>STESTI</term>
    <listitem>
      <para>is the interval in hours between automatic self tests.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>STATFLAG</term>
    <listitem>
      <para>status flag. English version is given by STATUS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>DIPSW</term>
    <listitem>
      <para>is the dip switch settings.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>REG1</term>
    <listitem>
      <para>is the value from the UPS fault register 1.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>REG2</term>
    <listitem>
      <para>is the value from the UPS fault register 2.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>REG3</term>
    <listitem>
      <para>is the value from the UPS fault register 3.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>MANDATE</term>
    <listitem>
      <para>is the date the UPS was manufactured.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>SERIALNO</term>
    <listitem>
      <para>is the UPS serial number.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>BATTDATE</term>
    <listitem>
      <para>is the date that batteries were last replaced.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>NOMOUTV</term>
    <listitem>
      <para>is the output voltage that the UPS will attempt to supply when
on battery power.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>NOMBATTV</term>
    <listitem>
      <para>is the nominal battery voltage.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>HUMIDITY</term>
    <listitem>
      <para>is the humidity as measured by the UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>AMBTEMP</term>
    <listitem>
      <para>is the ambient temperature as measured by the UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>EXTBATTS</term>
    <listitem>
      <para>is the number of external batteries as defined by the user. A
correct number here helps the UPS compute the remaining runtime
more accurately.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>BADBATTS</term>
    <listitem>
      <para>is the number of bad battery packs.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>FIRMWARE</term>
    <listitem>
      <para>is the firmware revision number.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>APCMODEL</term>
    <listitem>
      <para>is the old APC model identification code.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>END APC</term>
    <listitem>
      <para>is the time and date that the STATUS record was written.</para>

    </listitem>
  </varlistentry>
</variablelist>

</sect1>
<sect1><title>Logging the STATUS Information</title>

<para>If specified in the configuration file, the STATUS data will also
be written to the system log file. Please note, that it would not
normally be wise to write this data to a normal system log file as
there is no mechanism in syslog() to rewind the file and hence the
log file would quickly become enormous. However, in two cases, it
can be very useful to use syslog() to write this information.</para>

<para>The first case is to set up your
<filename>syslog.conf</filename> file so that the data is written to a
named pipe. In this case, normally not more than about 8192 bytes of
data will be kept before it is discarded by the system.</para>

<para>The second case is to setup your syslog.conf file so that the
status data is sent to another machine, which presumably then
writes it to a named pipe. Consequently, with this mechanism,
provides a simple means of networking apcupsd STATUS
information.</para>

<para>Although we mention system logging of STATUS information, we
strongly recommend that you use  <application>apcaccess</application>
or the CGI interface to get this information.</para>

</sect1>
</chapter>


<chapter><title>The Shutown Sequence and its Discontents</title>

<sect1 id='shutdown'><title>Shutdown Sequence</title>

<para>If you experienced so problems with the testing procedures, or
if you are porting <application>apcupsd</application> to another
system, or you are simply curious, you may want to know exactly what
is going on during the shutdown process.</para>

<para>The shutdown sequence is as follows:</para>

<itemizedlist>
  <listitem>
    <para><application>apcupsd</application> detects that there is a
    power problem and it calls <command>/etc/apcupsd/apccontrol
    powerout</command>, which normally sends a message to all users
    informing them of a potential problem.</para>
  </listitem>
  <listitem>
    <para>After approximately 5 seconds in the power problem mode,
    <application>apcupsd</application> calls
    <command>/etc/apcupsd/apccontrol onbattery</command>, which
    normally sends a message to all users informing them that the UPS
    is on batteries.</para>
  </listitem>
  <listitem>
     <para>When one of the conditions listed below occurs,
     <application>apcupsd</application> issues a shutdown command by
     calling <command>/etc/apcupsd/apccontrol doshutdown</command>,
     which should perform a shutdown of your system using the system
     <citerefentry><refentrytitle>shutdown</refentrytitle><manvolnum>8</manvolnum></citerefentry>
     command. You can modify the behavior by editing the
     <filename>/etc/apcupsd/apccontrol</filename> script, but doing so
     will make it more complicated to upgrade to the next
     <application>apcupsd</application> version.</para>

     <para>The conditions that trigger the shutdown can be: running time on
     batteries have expired (TIMEOUT), the battery runtime remaining is
     below the configured value (BATTERYLEVEL), the estimated remaining
     runtime is below the configured value (MINUTES), or the UPS signals
     that the batteries are exhausted.</para>

     <para>A shutdown could also be initiated if 
     <application>apcupsd</application> detects
     that the batteries are no longer functioning correctly. This case,
     though very unusual, can happen at any time even if there is proper
     mains voltage, and <command>/etc/apcupsd/apccontrol emergency</command> is
     called.</para>

     <para>Just before initiating any shutdown through the 
     <application>apccontrol</application>
     script, <application>apcupsd</application> will create the file
     <filename>/etc/apcupsd/powerfail</filename>. This file will be
     used later in the shutdown sequence to recall 
     <application>apcupsd</application> after syncing of the
     disks to initiate a power off of the UPS.</para>

     <para>If the <filename>/etc/nologin</filename> file has not
     already been created, it will normally be created during the
     shutdown sequence to prevent additional users from logging in 
     (see the NOLOGIN configuration directive).</para>

     <para>Even though <application>apcupsd</application> has
     requested the system to perform a shutdown, it continues
     running. If it is a master with slaves, it will inform the slaves
     to do a shutdown. They perform their shutdown by calling
     <command>/etc/apcupsd/apccontrol remotedown</command>.</para>
  </listitem>
  <listitem>
    <para>When the system signals <application>apcupsd</application>
    to do exit, it does so.  This is part of the normal system
    shutdown (at least on Unix and Linux systems) and the exact time
    that <application>apcupsd</application> receives the termination
    signal depends on how the shutdown links (usually in
    <filename>/etc/rc.d</filename>) are set.</para>

    <para>Note that on Windows NT systems,
    <application>apcupsd</application> apparently continues to run as a
    Service even though the machine is &quot;shutdown&quot;.</para>
  </listitem>
  <listitem>
     <para>During the shutdown of the system after
     <application>apcupsd</application> has been forced to exit, one
     of the last things done by the system shutdown is to call the
     halt script, which is usually in
     <filename>/etc/rc.d/halt</filename> or
     <filename>/etc/rc.d/init.d/halt</filename>, or possibly in
     <filename>/sbin/init.d/rc.0</filename> depending on your
     system. If apcupsd was properly installed, this standard halt
     script was modified to include a bit of new logic just before the
     final halt of the system. It first tests if the file
     <filename>/etc/apcupsd/powerfail</filename> exists, and if it
     does, it executes <command>/etc/apcupsd/apccontrol
     killpower</command>. It is this last step that will cause
     <application>apcupsd</application> to be re-executed with the
     <option>--killpower</option> option on the command line. This
     option tells <application>apcupsd</application> to inform the UPS
     to kill the power.</para>

     <para>This final step is important if you want to ensure that your
     system will automatically reboot when the power comes back on. The
     actual code used on the Red Hat version is:</para>

<programlisting>
# See if this is a powerfail situation.                             # ***apcupsd***
if [ -f /etc/apcupsd/powerfail ]; then                              # ***apcupsd***
 echo                                                               # ***apcupsd***
 echo &quot;APCUPSD will now power off the UPS&quot;                          # ***apcupsd***
 echo                                                               # ***apcupsd***
 /etc/apcupsd/apccontrol killpower                                  # ***apcupsd***
 echo                                                               # ***apcupsd***
 echo &quot;Please ensure that the UPS has powered off before rebooting&quot; # ***apcupsd***
 echo &quot;Otherwise, the UPS may cut the power during the reboot!!!&quot;   # ***apcupsd***
 echo                                                               # ***apcupsd***
fi                                                                  # ***apcupsd***
</programlisting>
    </listitem>
</itemizedlist>

<para>The above code must be inserted as late as possible in the halt
script. On many systems, such as Red Hat, all the disk drives were
unmounted, then remounted read-only, thus permitting access to the
<filename>/etc</filename> files and the
<application>apcupsd</application> executable. If your system does not
explicitly remount the disks, you must remount them in read-only mode
in the code that you add. Examples of code fragments that do this can
be found in the <filename>distributions/suse</filename> subdirectory
of the source.</para>

<para>If you are not able to insert the above code in your halt script
because there is no halt script, or because your halt script calls the
<application>init</application> program as some Unix systems do, you
can either just forget about powering off the UPS, which means that
your machine will not automatically reboot after a power failure, or
there is yet another alternative, though not at all as satisfying as
inserting code in the halt script.</para>

<para>Only if you cannot insert the appropriate code in the halt
script, when you start <application>apcupsd</application>, normally
from the <filename>/etc/rc.d/init.d/apcupsd</filename> script, use the
<option>--kill-on-powerfail</option> option. This will cause
<application>apcupsd</application> to program the UPS to shutoff the
power just before it (<application>apcupsd</application>) does the
system shutdown. Please note that this is not the most ideal solution.
Read on to understand why.</para>

<para>A very important consideration is that you must set the EEPROM
in your UPS so that it waits a sufficient time for the system to
halt before it shuts off the UPS power. The current value as well
as the permitted values for your UPS can be determined by
executing:</para>

<programlisting>
apcaccess eeprom
</programlisting>

<para>The output should look something like the following:</para>

<programlisting>
apcaccess eeprom

Valid EPROM values for the SMART-UPS 1000

                       Config        Current  Permitted
Description              Directive     Value    Values
===================================================================
Upper transfer voltage   HITRANSFER    253      253 264 271 280 
Lower transfer voltage   LOTRANSFER    196      196 188 208 204 
Return threshold         RETURNCHARGE  0        00 15 50 90 
Output voltage on batts  OUTPUTVOLTS   230      230 240 220 225 
Sensitivity              SENSITIVITY   H        H M L L 
Low battery warning      LOWBATT       2        02 05 07 10 
Shutdown grace delay     SLEEP         20       020 180 300 600 
Alarm delay              BEEPSTATE     0        0 T L N 
Wakeup delay             WAKEUP        0        000 060 180 300 
Self test interval       SELFTEST      336      336 168 ON  OFF 

</programlisting>

<para>The line of interest for you is the <emphasis
role="bold">Shutdown grace delay</emphasis>, which can be changed
using the <link linkend="SLEEP">SLEEP</link> directive in your <emphasis
role="bold">apcupsd.conf</emphasis> file. The default value is 20
seconds, but generally, you can set it to 180, 300, or 600 seconds
depending on your UPS. See the <link linkend='eeprom'>EEPROM</link> this
manual for further details on how to change this EPROM value.</para>

<para>If you use the <option>--kill-on-powerfail</option> option, you
run the risk of having the computer power cut before the system has
shutdown. Even if the grace period is rather long, if something goes
wrong in the shutdown, well, it is up to you to decide.</para>

<para>If <application>apcupsd</application> has successfully shutdown
your computer and powered off the UPS during a power outage, you can
control whether or not your computer is automatically rebooted when
the power returns.</para>

<para>The UPS contains two internal EPROM values that determine when
it will restore power to your computer after a full power shutdown.
They are the <link linkend="RETURNCHARGE">RETURNCHARGE</link>
percentage and the <link linkend="WAKEUP">WAKEUP</link>
delay. Briefly, the <emphasis role="bold">RETURNCHARGE</emphasis>
specifies what percentage charge the battery must have before the
power is restored. Higher values are recommended in regions where the
power goes up and down frequently. The <emphasis
role="bold">WAKEUP</emphasis> delay is a simple time delay. Most sites
will have both of these at zero, or perhaps the <emphasis
role="bold">RETURNCHARGE</emphasis> set to 15. Please follow the links
to the <emphasis role="bold">Configuration</emphasis> section of this
manual for more information.  See the <link linkend='eeprom'>EEPROM</link> of
this manual for further details on how to change these EPROM
values.</para>

</sect1>
<sect1><title>Shutdown Problems</title>

<para>Obviously if your halt script is not properly modified,
<application>apcupsd</application> will not be able to shut off the
power to the UPS, and if the power returns before the batteries are
exhausted your system will not automatically reboot. In any case, your
machine should have been cleanly shut down. </para>

</sect1>
<sect1><title>Master/Slave Shutdown</title>

<para>In master/slave configurations, however, the master cannot be
100 percent sure that the slaves have all shutdown before it performs
the power off. As a consequence, it is possible that the master will
shut off the power before the slave has finished shutdown. If this is
the case, the best procedure is to put an appropriate sleep command in
the <filename>/etc/apcupsd/apccontrol</filename> file on the master.
For example to give the slaves 30 additional seconds to shutdown, one
would add:</para>

<programlisting>
sleep 30
</programlisting>

<para>just after the line that reads</para>

<programlisting>
doshutdown)
</programlisting>

<para>in the <filename>apccontrol</filename> file (approximately line
79 &mdash; depending on your system version).</para>

<para>Also, on a slave machine, you do not want to use the modified
halt script since it will recall <application>apcupsd</application>,
which will detect that it is a slave (i.e. no connection to the UPS)
and will complain that it cannot do the killpower. This situation is
not harmful just annoying and possibly confusing.</para>

<para>One possible problem during shutdown can be caused by remnants
of old versions. Please be sure to delete or rename all prior versions
(<filename>/usr/local/sbin/apcupsd</filename> or
<filename>/sbin/powersc</filename>).</para>

</sect1>
<sect1><title>Startup</title>

<para>Normally, <application>apcupsd</application> is automatically
started when your system is rebooted. This normally occurs because the
startup script <application>apcupsd</application> is linked into the
appropriate places in <filename>/etc/rc.d</filename>. On most Linux
systems, there is a program called
<citerefentry><refentrytitle>chkconfig</refentrytitle><manvolnum>8</manvolnum></citerefentry>
that will automatically link the startup script.  This program is
invoked by the <command>make install</command> scripts, or it is
explicitly done for those systems that do not have
<citerefentry><refentrytitle>chkconfig</refentrytitle><manvolnum>8</manvolnum></citerefentry>. If
this is not the case, you can either link it in appropriately yourself
or explicitly call it from your rc.local file. The appropriate manual
way to startup <application>apcupsd</application> is by
executing:</para>

<programlisting>
&lt;path&gt;/apcupsd start
</programlisting>

<para>where &lt;path&gt; is normally <filename>/etc/rc.d</filename> or
<filename>/etc/rc.d/init.d</filename> depending on your system (isn't
Unix wonderful? :-)). Using this script is important so that any files
remaining around after a power failure are removed. Likewise, shutting
down <application>apcupsd</application> should be done with the same
script: </para>

<programlisting>
&lt;path&gt;/apcupsd stop
</programlisting>

</sect1>
<sect1><title>Windows Considerations</title>

<para>Please see the end of <link linkend='win32'>Windows
chapter</link> of this manual for conderations pertaining to shutdown
and killpower on Windows.</para>
</sect1>
</chapter>
<chapter id='upsbible'><title>APC's smart protocol</title>

<para>The APC UPS protocol was originally analyzed by Pavel Korensky
with additions from Andre H. Hendrick beginning in 1995, and we want
to give credit for good, hard work, where credit is due. After having
said that, you will see that Steven Freed built much of the orginal
<application>apcupsd</application> information file. [Comment inserted
by Riccardo Facchetti]</para>

<para>The start of this chapter of the
<application>apcupsd</application> manual in HTML format was pulled
from the <ulink
url="http://www.exploits.org/nut/library/apcsmart.html">Network UPS
Tools (NUT)</ulink> site. It has been an invaluable tool in improving
<application>apcupsd</application>, and I consider it the <emphasis
role="bold">Bible</emphasis> of APC UPS programming. In the course of
using it, I have added information gleaned from
<application>apcupsd</application> and information graciously supplied
by APC. Hopefully, the additions made herein can benefit the original
author and his <ulink url="http://www.exploits.org/nut">programming
project</ulink>, and maybe some day, the
<application>apcupsd</application> project and the <emphasis
role="bold">NUT</emphasis> project can join forces.</para>

<sect1><title>Description</title>

<para>Here's the information on the elusive APC smart signaling protocol
used by their higher end units (Back-UPS Pro, Smart-UPS,
Matrix-UPS, etc). What you see here has been collected from a
variety of sources. Some people analyzed the chatter between
PowerChute and their hardware. Others sent various characters to
the UPS and figured out what the results meant.</para>

</sect1>
<sect1><title>RS-232 differences</title>

<para>Normal 9 pin serial connections have TxD on 3 and RxD on 2. APC's
smart serial ports put TxD on pin 1 and RxD on pin 2. This means
you go nowhere if you use a normal straight through serial cable.
In fact, you might even power down the load if you plug one of
those cables in. This is due to the odd routing of pins - DTR and
RTS from the PC usually wind up driving the on/off line. So, when
you open the port, they go high and *poof* your computer dies.</para>

<para>Originally this evil hack was used to connect the UPS to the PC
when this page was first being built. As you can see, I cheated and
neglected the ground (only 2 wires!) and it still worked. This
method can be used for playing around, but for professional systems
this is obviously not a viable option.</para>

<para>That hack didn't work out so well (damned cats), so it was
retired quite awhile back. The most practical solution was to go
out and BUY the DOS/Win version of PowerChute just for the black
(smart) cable. I recommend doing the same thing if you actually
care about this thing working properly. Of course, if you have one
of the newer packages that came with PowerChute, you already have
the cable you need.</para>

</sect1>
<sect1><title>Diagram for cable hackers</title>

<para>If you are handy with cable creation tools, check out the <ulink
url="http://www.exploits.org/nut/library/940-0024C.jpg">940-0024C
clone diagram</ulink>. That's the black &quot;smart&quot; cable
normally provided with APC models sold after 1996. The loopback pins
on that diagram are used to keep PowerChute happy by allowing cable
detection. If you use the <ulink
url="http://www.exploits.org/nut/">NUT</ulink> apcsmart driver, those
pins don't matter.</para>

<para>Many thanks to Steve Draper for providing this scan.</para>

<para>For additional information on cables, see the section on <link
linkend="cables">custom cables</link> in this manual.</para>

</sect1>
<sect1><title>The Smart Protocol</title>

<para>Despite the lack of official information from APC, this table has
been constructed. It's standard RS-232 serial communications at
2400 bps/8N1. Don't rush the UPS while transmitting or it may stop
talking to you. This isn't a problem with the normal single
character queries, but it really does matter for multi-char things
like &quot;@000&quot;. Sprinkle a few calls to usleep() in your code and
everything will work a lot better.</para>

<para>The following table describes the single character <emphasis
role="bold">Code</emphasis> or command that you can send to the UPS,
its meaning, and what sort of response the UPS will
provide. Typically, the response shown below is followed by a newline
(\n in C) and a carriage return (\r in C). If you send the UPS a
command that it does not recognize or that is not available on your
UPS, it will normally respond by &quot;NA&quot; for not available,
otherwise the response is given in the &quot;Typical results&quot;
column. &gt;</para>

<informaltable>
  <tgroup cols="5">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <colspec colnum="3" colname="col3"/>
    <colspec colnum="4" colname="col4"/>
    <colspec colnum="5" colname="col5"/>
    <thead>
      <row>
        <entry>Code</entry>
        <entry>Meaning</entry>
        <entry>Typical results</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>^A</entry>
        <entry>Model string</entry>
        <entry>SMART-UPS 700</entry>
      </row>
      <row>
        <entry>^N</entry>
        <entry>Turn on UPS (send twice, with &gt; 1.5s delay between chars)
               Only on 3rd gen SmartUPS and Black Back-UPS Pros</entry>
        <entry>n/a</entry>
      </row>
      <row>
        <entry>^Z</entry>
        <entry>Permitted EEPROM Values</entry>
        <entry>A large string (254 chars) that gives the EEPROM permitted
               values for your model. For details see below.</entry>
      </row>
      <row>
        <entry>A</entry>
        <entry>Front panel test</entry>
        <entry>Light show + &quot;OK&quot; (and 2s beep)</entry>
      </row>
      <row>
        <entry>B</entry>
        <entry>Battery voltage</entry>
        <entry>Ranges - typical &quot;27.87&quot;</entry>
      </row>
      <row>
        <entry>C</entry>
        <entry>Internal temperature (degrees C)</entry>
        <entry>Ranges - typical &quot;036.0&quot;</entry>
      </row>
      <row>
        <entry>D</entry>
        <entry>Runtime calibration - runs until battery is below 25% (35% for
               Matrix) This updates the 'j' values - only works at 100% battery
               charge. Can be aborted with a second &quot;D&quot;</entry>
        <entry>! when on battery, $ on line</entry>
      </row>
      <row>
        <entry>E</entry>
        <entry>Automatic self test intervals</entry>
        <entry>Default = 336 (336 hours = 14 days) (336=14 days, 168=7 days,
               ON=power on, OFF=never)</entry>
      </row>
      <row>
        <entry>F</entry>
        <entry>Line frequency, Hz</entry>
        <entry>60.00 (50.0 in Europe)</entry>
      </row>
      <row>
        <entry>G</entry>
        <entry>Cause of transfer</entry>
        <entry>R = unacceptable utility voltage rate of change,
H = high utility voltage,
L = low utility voltage,
T = line voltage notch or spike,
O = no transfers yet (since turnon),
S = transfer due to serial port U command or activation of UPS test
from front panel,
NA = transfer reason still not available (read again).</entry>
      </row>
      <row>
        <entry>K--K</entry>
        <entry>Shutdown with grace period (set with 'p') - need &gt; 1.5s
between first and second K</entry>
        <entry>Matrix/3rd gen SmartUPS/Black Back-UPS Pros: &quot;OK&quot;, all others:
&quot;*&quot;</entry>
      </row>
      <row>
        <entry>L</entry>
        <entry>Input line voltage</entry>
        <entry>Ranges - typical &quot;118.3&quot; or &quot;228.8&quot; in Europe</entry>
      </row>
      <row>
        <entry>M</entry>
        <entry>Maximum line voltage received since last M query</entry>
        <entry>Ranges - typical &quot;118.9&quot; or &quot;230.1&quot; in Europe</entry>
      </row>
      <row>
        <entry>N</entry>
        <entry>Minimum line voltage received since last N query</entry>
        <entry>Ranges - typical &quot;118.9&quot; or &quot;226.2&quot; in Europe</entry>
      </row>
      <row>
        <entry>O</entry>
        <entry>Output voltage</entry>
        <entry>Ranges - typical &quot;118.3&quot; or &quot;228.8&quot; in Europe</entry>
      </row>
      <row>
        <entry>P</entry>
        <entry>Power load %</entry>
        <entry>Ranges - typical &quot;011.4&quot; depends on what you have plugged
in.</entry>
      </row>
      <row>
        <entry>Q</entry>
        <entry>Status flags</entry>
        <entry>Bitmapped, see below</entry>
      </row>
      <row>
        <entry>R</entry>
        <entry>Turn dumb
Only on 3rd gen SmartUPS, SmartUPS v/s, BackUPS Pro</entry>
        <entry>&quot;BYE&quot;</entry>
      </row>
      <row>
        <entry>S</entry>
        <entry>Soft shutdown after 'p' delay, return online when power
returns
Only works when UPS is on battery</entry>
        <entry>OK</entry>
      </row>
      <row>
        <entry>U</entry>
        <entry>Simulate power failure</entry>
        <entry>!! when switching to battery, then $ when back on line</entry>
      </row>
      <row>
        <entry>V</entry>
        <entry>Old firmware revision</entry>
        <entry>&quot;GWD&quot; or &quot;IWI&quot; The last character indicates the locale
(Domestic, International).</entry>
      </row>
      <row>
        <entry>W</entry>
        <entry>Self test (battery), results stored in &quot;X&quot;</entry>
        <entry>&quot;OK&quot;</entry>
      </row>
      <row>
        <entry>X</entry>
        <entry>Results of last self test</entry>
        <entry>&quot;OK&quot; - good battery, &quot;BT&quot; - failed due to insufficient
capacity, &quot;NG&quot; - failed due to overload, &quot;NO&quot; - no results
available (no test performed in last 5 minutes)</entry>
      </row>
      <row>
        <entry>Y</entry>
        <entry>Enter smart mode</entry>
        <entry>&quot;SM&quot;</entry>
      </row>
      <row>
        <entry>Z--Z</entry>
        <entry>Shutdown immediately (no delay) - need &gt; 1.5s between first
and second Z</entry>
        <entry>N/A</entry>
      </row>
      <row>
        <entry>a</entry>
        <entry>Show protocol version.alert messages.valid commands (delimited
by periods)</entry>
        <entry>
&quot;3.!$%+?=#|.^A^N^Z+-789&lt;@ABCDEFGKLMNOPQRSUVWXYZ'abcefgjklmnopqrsuvzy~^?&quot;
- Link-Level.alert-messages.commands</entry>
      </row>
      <row>
        <entry>b</entry>
        <entry>Firmware revision</entry>
        <entry>&quot;50.9.D&quot; - 50 = SKU (variable length), 9 = firmware revision, D
= country code (D=USA, I=International, A=Asia, J=Japan,
M=Canada)</entry>
      </row>
      <row>
        <entry>c</entry>
        <entry>UPS local id</entry>
        <entry>UPS_IDEN (you can program any 8 characters here)</entry>
      </row>
      <row>
        <entry>e</entry>
        <entry>Return threshold</entry>
        <entry>% battery charge threshold for return (00=00%, 01=15%, 02=25%,
03=90%)</entry>
      </row>
      <row>
        <entry>f</entry>
        <entry>Battery level %</entry>
        <entry>Ranges - typical &quot;100.0&quot; when fully charged as should normally
be the case</entry>
      </row>
      <row>
        <entry>g</entry>
        <entry>Nominal battery voltage (not actual voltage - see B)</entry>
        <entry>&quot;012&quot; or &quot;024&quot; or &quot;048&quot;.</entry>
      </row>
      <row>
        <entry>h</entry>
        <entry>Measure-UPS: ambient humidity (%)</entry>
        <entry>&quot;nnn.n&quot; - percentage</entry>
      </row>
      <row>
        <entry>i</entry>
        <entry>Measure-UPS: dry contacts</entry>
        <entry>10 = contact 1, 20 = 2, 40 = 3, 80 = 4</entry>
      </row>
      <row>
        <entry>j</entry>
        <entry>Estimated runtime at current load (minutes)</entry>
        <entry>&quot;0112:&quot; (note, it is terminated with a colon)</entry>
      </row>
      <row>
        <entry>k</entry>
        <entry>Alarm delay</entry>
        <entry>0(zero) = 5 second delay after fail, T = 30 second delay, L =
alarm at low battery only, N = no alarm</entry>
      </row>
      <row>
        <entry>l</entry>
        <entry>Low transfer voltage</entry>
        <entry>Default &quot;103&quot; or &quot;208&quot; in Europe</entry>
      </row>
      <row>
        <entry>m</entry>
        <entry>Manufacturing date</entry>
        <entry>Unique within groups of UPSes (production runs)</entry>
      </row>
      <row>
        <entry>n</entry>
        <entry>Serial number</entry>
        <entry>Unique for each UPS</entry>
      </row>
      <row>
        <entry>o</entry>
        <entry>Nominal Output Voltage</entry>
        <entry>The Nominal Output Voltage when running on batteries. Default
&quot;115&quot; or &quot;230&quot; in Europe.</entry>
      </row>
      <row>
        <entry>p</entry>
        <entry>Shutdown grace delay, seconds</entry>
        <entry>Default &quot;020&quot; (020/180/300/600)</entry>
      </row>
      <row>
        <entry>q</entry>
        <entry>Low battery warning, minutes</entry>
        <entry>Default &quot;02&quot;</entry>
      </row>
      <row>
        <entry>r</entry>
        <entry>Wakeup delay (time) - seconds</entry>
        <entry>Default &quot;000&quot; (000/060/180/300)</entry>
      </row>
      <row>
        <entry>s</entry>
        <entry>Sensitivity</entry>
        <entry>&quot;H&quot; - highest, &quot;M&quot; - medium, &quot;L&quot; - lowest, &quot;A&quot; - autoadjust
(Matrix only)</entry>
      </row>
      <row>
        <entry>u</entry>
        <entry>Upper transfer voltage</entry>
        <entry>Default &quot;132&quot; or &quot;253&quot; in Europe</entry>
      </row>
      <row>
        <entry>t</entry>
        <entry>Measure-UPS: ambient temperature (degrees C)</entry>
        <entry>&quot;nn.nn&quot;</entry>
      </row>
      <row>
        <entry>x</entry>
        <entry>Last battery change</entry>
        <entry>Eight characters. Varies typically dd/mm/yy - 31/12/99</entry>
      </row>
      <row>
        <entry>y</entry>
        <entry>Copyright notice</entry>
        <entry>&quot;(C) APCC&quot; - only works if firmware letter (from &quot;V&quot;) is later
than O</entry>
      </row>
      <row>
        <entry>z</entry>
        <entry>Reset the EEPROM to factory settings (but not ident or batt
replacement date)
Not on SmartUPS v/s or BackUPS Pro</entry>
        <entry>&quot;CLEAR&quot;</entry>
      </row>
      <row>
        <entry>+</entry>
        <entry>Capability cycle</entry>
        <entry>Cycle forward through possible values (&quot;|&quot; from UPS afterward
to confirm change). Do not use this unless you know how to program
your UPS EEPROM or you may damage your UPS.</entry>
      </row>
      <row>
        <entry>-</entry>
        <entry>Capability cycle</entry>
        <entry>Cycle backward through possible values (&quot;|&quot; from UPS afterward
to confirm change)Do not use this unless you know how to program
your UPS EEPROM or you may damage your UPS.</entry>
      </row>
      <row>
        <entry>@nnn</entry>
        <entry>Shutdown (after delay 'p') with delayed wakeup of nnn tenths of
an hour (after 'r' time)</entry>
        <entry>Matrix/3rd gen UPS: &quot;OK&quot;, others &quot;*&quot;</entry>
      </row>
      <row>
        <entry>0x7f (DEL key)</entry>
        <entry>Abort shutdown - use to abort @, S, K--K</entry>
        <entry>&quot;OK&quot;</entry>
      </row>
      <row>
        <entry>~</entry>
        <entry>Register #1</entry>
        <entry>See below</entry>
      </row>
      <row>
        <entry>'</entry>
        <entry>Register #2</entry>
        <entry>See below</entry>
      </row>
      <row>
        <entry>0</entry>
        <entry>Battery constant</entry>
        <entry>Set to A0 on SmartUPS 1000 with new battery</entry>
      </row>
      <row>
        <entry>4</entry>
        <entry>???</entry>
        <entry>Prints 35 on SmartUPS 1000</entry>
      </row>
      <row>
        <entry>5</entry>
        <entry>???</entry>
        <entry>Prints EF on SmartUPS 1000</entry>
      </row>
      <row>
        <entry>6</entry>
        <entry>???</entry>
        <entry>Prints F9 on SmartUPS 1000</entry>
      </row>
      <row>
        <entry>7</entry>
        <entry>Dip switch positions (if applicable)</entry>
        <entry>See below</entry>
      </row>
      <row>
        <entry>8</entry>
        <entry>Register #3</entry>
        <entry>See below</entry>
      </row>
      <row>
        <entry>9</entry>
        <entry>Line quality</entry>
        <entry>&quot;FF&quot; acceptable, &quot;00&quot; unacceptable</entry>
      </row>
      <row>
        <entry>&gt;</entry>
        <entry>Number of external battery packs attached</entry>
        <entry>SmartCell models: &quot;nnn&quot; where nnn is how many external packs
are connected
Non-SmartCell units: whatever has been set with &gt;+ and &gt;- by
the user</entry>
      </row>
      <row>
        <entry namest="col1" nameend="col3">Matrix UPS (and possibly Symmetra) specific
commands</entry>
      </row>
      <row>
        <entry>^</entry>
        <entry>Run in bypass mode</entry>
        <entry>If online, &quot;BYP&quot; is received as bypass mode starts
If already in bypass, &quot;INV&quot; is received and UPS goes online
&quot;ERR&quot; received if UPS is unable to transfer</entry>
      </row>
      <row>
        <entry>&lt;</entry>
        <entry>Number of bad battery packs</entry>
        <entry>&quot;nnn&quot; - count of bad packs connected to the UPS</entry>
      </row>
      <row>
        <entry>/</entry>
        <entry>Load current</entry>
        <entry>&quot;nn.nn&quot; - true RMS load current drawn by UPS</entry>
      </row>
      <row>
        <entry>\</entry>
        <entry>Apparent load power</entry>
        <entry>&quot;nnn.nn&quot; - output load as percentage of full rated load in
VA.</entry>
      </row>
      <row>
        <entry>^V</entry>
        <entry>Output voltage selection (editable)</entry>
        <entry>&quot;A&quot; - automatic according to input tap, &quot;M&quot; - 208 VAC, &quot;I&quot; -
240 VAC</entry>
      </row>
      <row>
        <entry>^L</entry>
        <entry>Front panel language</entry>
        <entry>&quot;E&quot; - English, &quot;F&quot; - French, &quot;G&quot; - German, &quot;S&quot; - Spanish, &quot;1&quot;
&quot;2&quot; &quot;3&quot; &quot;4&quot; - ?</entry>
      </row>
      <row>
        <entry>w</entry>
        <entry>Run time conservation</entry>
        <entry>&quot;NO&quot; (disabled) or &quot;02&quot; &quot;05&quot; &quot;08&quot; - minutes of runtime to leave
in battery (UPS shuts down &quot;early&quot;)</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>
</sect1>
<sect1><title>Dip switch info</title>
<informaltable>
  <tgroup cols="3">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <colspec colnum="3" colname="col3"/>
    <thead>
      <row>
        <entry>Bit</entry>
        <entry>Switch</entry>
        <entry>Option when bit=1</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>0</entry>
        <entry>4</entry>
        <entry>Low battery alarm changed from 2 to 5 mins. Autostartup
disabled on SU370ci and 400</entry>
      </row>
      <row>
        <entry>1</entry>
        <entry>3</entry>
        <entry>Audible alarm delayed 30 seconds</entry>
      </row>
      <row>
        <entry>2</entry>
        <entry>2</entry>
        <entry>Output transfer set to 115 VAC (from 120 VAC) or to 240 VAC
(from 230 VAC)</entry>
      </row>
      <row>
        <entry>3</entry>
        <entry>1</entry>
        <entry>UPS desensitized - input voltage range expanded</entry>
      </row>
      <row>
        <entry>4-7</entry>
        <entry>-</entry>
        <entry>Unused at this time</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>
</sect1>
<sect1><title>Status bits</title>

<para>This is probably the most important register of the UPS, which
indicates the overall UPS status. Some common things you'll see:</para>
<itemizedlist>
  <listitem>
    <para>08 = On line, battery OK</para>
  </listitem>
  <listitem>
    <para>10 = On battery, battery OK</para>
  </listitem>
  <listitem>
    <para>50 = On battery, battery low</para>
  </listitem>
  <listitem>
    <para>SM = Status bit is still not available (retry reading)</para>
  </listitem>
</itemizedlist>
<informaltable>
  <tgroup cols="3">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <colspec colnum="3" colname="col3"/>
    <thead>
      <row>
        <entry>Bit</entry>
        <entry>Hex Bit</entry>
        <entry>Meaning</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>0</entry>
        <entry>0x01</entry>
        <entry>1 = Runtime calibration occurring
Not reported by Smart UPS v/s and BackUPS Pro</entry>
      </row>
      <row>
        <entry>1</entry>
        <entry>0x02</entry>
        <entry>1 = SmartTrim
Not reported by 1st and 2nd generation SmartUPS models</entry>
      </row>
      <row>
        <entry>2</entry>
        <entry>0x04</entry>
        <entry>1 = SmartBoost</entry>
      </row>
      <row>
        <entry>3</entry>
        <entry>0x08</entry>
        <entry>1 = On line (this is the normal condition)</entry>
      </row>
      <row>
        <entry>4</entry>
        <entry>0x10</entry>
        <entry>1 = On battery</entry>
      </row>
      <row>
        <entry>5</entry>
        <entry>0x20</entry>
        <entry>1 = Overloaded output</entry>
      </row>
      <row>
        <entry>6</entry>
        <entry>0x40</entry>
        <entry>1 = Battery low</entry>
      </row>
      <row>
        <entry>7</entry>
        <entry>0x80</entry>
        <entry>1 = Replace battery</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>
</sect1>
<sect1><title>Alert messages</title>

<para>These single character messages are sent by the UPS any time there
is an Alert condition. All other responses indicated above are sent
by the UPS only in response to a query or action command.</para>
<informaltable>
  <tgroup cols="2">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <thead>
      <row>
        <entry>Character</entry>
        <entry>Description</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>!</entry>
        <entry>Line Fail - sent when the UPS goes on-battery, repeated every
30 seconds until low battery condition reached. Sometimes occurs
more than once in the first 30 seconds.</entry>
      </row>
      <row>
        <entry>$</entry>
        <entry>Return from line fail - UPS back on line power, only sent if a
! has been sent.</entry>
      </row>
      <row>
        <entry>%</entry>
        <entry>Low battery - Sent to indicate low battery, but not on SmartUPS
v/s or BackUPS Pro models</entry>
      </row>
      <row>
        <entry>+</entry>
        <entry>Return from low battery - Sent when the battery has been
recharged to some level only if a % has been sent previously</entry>
      </row>
      <row>
        <entry>?</entry>
        <entry>Abnormal condition - sent for conditions such as &quot;shutdown due
to overload&quot; or &quot;shutdown due to low battery capacity&quot;. Also occurs
within 10 minutes of turnon.</entry>
      </row>
      <row>
        <entry>=</entry>
        <entry>Return from abnormal condition - Sent when the UPS returns from
an abnormal condition where ? was sent, but not a turn-on. Not
implemented on SmartUPS v/s or BackUPS Pro models.</entry>
      </row>
      <row>
        <entry>*</entry>
        <entry>About to turn off - Sent when the UPS is about to switch off
the load. No commands are processed after this character is sent.
Not implemented on SmartUPS v/s, BackUPS Pro, or 3rd generation
SmartUPS models.</entry>
      </row>
      <row>
        <entry>#</entry>
        <entry>Replace battery - Sent when the UPS detects that the battery
needs to be replaced. Sent every 5 hours until a new battery test
is run or the UPS is shut off. Not implemented on SmartUPS v/s or
BackUPS Pro models.</entry>
      </row>
      <row>
        <entry>&amp;</entry>
        <entry>Check alarm register for fault (Measure-UPS) - sent to signal
that temp or humidity out of set limits. Also sent when one of the
contact closures changes states. Sent every 2 minutes, stops when
the alarm conditions are reset. Only sent for alarms enabled with
I. Cause of alarm may be determined with J. Not on SmartUPS v/s or
BackUPS Pro.</entry>
      </row>
      <row>
        <entry>|</entry>
        <entry>Variable change in EEPROM - Sent whenever any EEPROM variable
is changed. Only supported on Matrix UPS and 3rd generation
SmartUPS models.</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>
</sect1>
<sect1><title>Register 1</title>

<para>All bits are valid on the Matrix UPS. SmartUPS models only support
bits 6 and 7. Other models do not respond.</para>
<informaltable>
  <tgroup cols="3">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <colspec colnum="3" colname="col3"/>
    <thead>
      <row>
        <entry>Bit</entry>
        <entry>Hex Bit</entry>
        <entry>Meaning</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>0</entry>
        <entry>0x01</entry>
        <entry>In wakeup mode (typically lasts &lt; 2s)</entry>
      </row>
      <row>
        <entry>1</entry>
        <entry>0x02</entry>
        <entry>In bypass mode due to internal fault - see register 2 or 3</entry>
      </row>
      <row>
        <entry>2</entry>
        <entry>0x04</entry>
        <entry>Going to bypass mode due to command</entry>
      </row>
      <row>
        <entry>3</entry>
        <entry>0x08</entry>
        <entry>In bypass mode due to command</entry>
      </row>
      <row>
        <entry>4</entry>
        <entry>0x10</entry>
        <entry>Returning from bypass mode</entry>
      </row>
      <row>
        <entry>5</entry>
        <entry>0x20</entry>
        <entry>In bypass mode due to manual bypass control</entry>
      </row>
      <row>
        <entry>6</entry>
        <entry>0x40</entry>
        <entry>Ready to power load on user command</entry>
      </row>
      <row>
        <entry>7</entry>
        <entry>0x80</entry>
        <entry>Ready to power load on user command or return of line
power</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>
</sect1>
<sect1><title>Register 2</title>

<para>Matrix UPS models report bits 0-5. SmartUPS models only support
bits 4 and 6. SmartUPS v/s and BackUPS Pro report bits 4, 6, 7.
Unused bits are set to 0. Other models do not respond.</para>
<informaltable>
  <tgroup cols="2">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <thead>
      <row>
        <entry>Bit</entry>
        <entry>Meaning</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>0</entry>
        <entry>Fan failure in electronics, UPS in bypass</entry>
      </row>
      <row>
        <entry>1</entry>
        <entry>Fan failure in isolation unit</entry>
      </row>
      <row>
        <entry>2</entry>
        <entry>Bypass supply failure</entry>
      </row>
      <row>
        <entry>3</entry>
        <entry>Output voltage select failure, UPS in bypass</entry>
      </row>
      <row>
        <entry>4</entry>
        <entry>DC imbalance, UPS in bypass</entry>
      </row>
      <row>
        <entry>5</entry>
        <entry>Command sent to stop bypass with no battery connected - UPS
still in bypass</entry>
      </row>
      <row>
        <entry>6</entry>
        <entry>Relay fault in SmartTrim or SmartBoost</entry>
      </row>
      <row>
        <entry>7</entry>
        <entry>Bad output voltage</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>
</sect1>
<sect1><title>Register 3</title>

<para>All bits are valid on the Matrix UPS and 3rd generation SmartUPS
models. SmartUPS v/s and BackUPS Pro models report bits 0-5. All
others report 0-4. State change of bits 1,2,5,6,7 are reported
asynchronously with ? and = messages.</para>
<informaltable>
  <tgroup cols="2">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <thead>
      <row>
        <entry>Bit</entry>
        <entry>Meaning</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>0</entry>
        <entry>Output unpowered due to shutdown by low battery</entry>
      </row>
      <row>
        <entry>1</entry>
        <entry>Unable to transfer to battery due to overload</entry>
      </row>
      <row>
        <entry>2</entry>
        <entry>Main relay malfunction - UPS turned off</entry>
      </row>
      <row>
        <entry>3</entry>
        <entry>In sleep mode from @ (maybe others)</entry>
      </row>
      <row>
        <entry>4</entry>
        <entry>In shutdown mode from S</entry>
      </row>
      <row>
        <entry>5</entry>
        <entry>Battery charger failure</entry>
      </row>
      <row>
        <entry>6</entry>
        <entry>Bypass relay malfunction</entry>
      </row>
      <row>
        <entry>7</entry>
        <entry>Normal operating temperature exceeded</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>

</sect1>
<sect1><title>Interpretation of the Old Firmware Revision</title>

<para>The Old Firmware Revision is obtained with the &quot;V&quot;
command, which gives a typical response such as &quot;GWD&quot; or
&quot;IWI&quot;, and can be interpreted as follows:</para>

<programlisting>
Old Firmware revision and model ID String for SmartUPS &amp; MatrixUPS

This is a three character string XYZ

   where X == Smart-UPS or Matrix-UPS ID Code.
     range 0-9 and A-P
       1 == unknown
       0 == Matrix 3000
       5 == Matrix 5000
     the rest are Smart-UPS and Smart-UPS-XL
       2 == 250       3 == 400       4 == 400
       6 == 600       7 == 900       8 == 1250
       9 == 2000      A == 1400      B == 1000
       C == 650       D == 420       E == 280
       F == 450       G == 700       H == 700XL
       I == 1000      J == 1000XL    K == 1400
       L == 1400XL    M == 2200      N == 2200XL
       O == 3000      P == 5000

   where Y == Possible Level of Smart Features, unknown???
       G == Stand Alone
       T == Stand Alone
               V == ???
       W == Rack Mount

   where Z == National Model Use Only Codes
       D == Domestic        115 Volts
       I == International   230 Volts
       A == Asia ??         100 Volts
       J == Japan ??        100 Volts
</programlisting>
</sect1>
<sect1><title>Interpretation of the New Firmware Revision</title>
<programlisting>
New Firmware revison and model ID String in NN.M.L is the format

    where NN == UPS ID Code.
        12 == Back-UPS Pro 650
        13 == Back-UPS Pro 1000
        52 == Smart-UPS 700
        60 == SmartUPS 1000
        72 == Smart-UPS 1400

        where NN now Nn has possible meanings.
            N  == Class of UPS
            1n == Back-UPS Pro
            5n == Smart-UPS
            7n == Smart-UPS NET

             n == Level of intelligence
            N1 == Simple Signal, if detectable WAG(*)
            N2 == Full Set of Smart Signals
            N3 == Micro Subset of Smart Signals

    where M == Possible Level of Smart Features, unknown???
        1 == Stand Alone
        8 == Rack Mount
        9 == Rack Mount

    where L == National Model Use Only Codes
        D == Domestic        115 Volts
        I == International   230 Volts
        A == Asia ??         100 Volts
        J == Japan ??        100 Volts
        M == North America   208 Volts (Servers)
</programlisting>

</sect1>
<sect1><title>EEPROM Values</title>

<para>Upon sending a ^Z, your UPS will probably spit back approximately
254 characters something like the following (truncated here for the
example):</para>

<para>#uD43132135138129uM43229234239224uA43110112114108 ....</para>

<para>It looks bizarre and ugly, but is easily parsed. The # is some
kind of marker/ident character. Skip it. The rest fits this
form:</para>

<itemizedlist>
  <listitem>
    <para>Command character - use this to select the value</para>
  </listitem>
  <listitem>
    <para>Locale - use 'b' to find out what yours is (the last
          character), '4' applies to all</para>
  </listitem>
  <listitem>
    <para>Number of choices - '4' means there are 4 possibilities
    coming up</para>
  </listitem>
  <listitem>
    <para>Choice length - '3' means they are all 3 chars long</para>
  </listitem>
</itemizedlist>

<para>Matrix-UPS models have ## between each grouping for some
reason.</para>

<para>Here is an example broken out to be more readable:</para>
<programlisting>
 CMD DFO RSP FSZ FVL
 u   D   4   3   127 130 133 136
 u   M   4   3   229 234 239 224
 u   A   4   3   108 110 112 114
 u   I   4   3   253 257 261 265
 l   D   4   3   106 103 100 097
 l   M   4   3   177 172 168 182
 l   A   4   3   092 090 088 086
 l   I   4   3   208 204 200 196
 e   4   4   2   00   15  50  90
 o   D   1   3   115
 o   J   1   3   100
 o   I   1   3   230 240 220 225
 o   M   1   3   208
 s   4   4   1     H   M   L   L
 q   4   4   2    02  05  07  10
 p   4   4   3   020 180 300 600
 k   4   4   1     0   T   L   N
 r   4   4   3   000 060 180 300
 E   4   4   3   336 168  ON OFF

 CMD == UPSlink Command.
       u = upper transfer voltage
       l = lower transfer voltage
       e = return threshold
       o = output voltage
       s = sensitivity
       p = shutdown grace delay
       q = low battery warning
       k = alarm delay
       r = wakeup delay
       E = self test interval

 DFO == (4)-all-countries (D)omestic (I)nternational (A)sia (J)apan
        (M) North America - servers.
 RSP == Total number possible answers returned by a given CMD.
 FSZ == Max. number of field positions to be filled.
 FVL == Values that are returned and legal.

</programlisting>

</sect1>
<sect1><title>Programming the UPS EEPROM</title>

<para>There are at this time a maximum of 12 different values that can be
programmed into the UPS EEPROM. They are:</para>

<informaltable>
  <tgroup cols="3">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <colspec colnum="3" colname="col3"/>
    <thead>
      <row>
        <entry>Item</entry>
        <entry>Command</entry>
        <entry>Meaning</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>1.</entry>
        <entry>c</entry>
        <entry>The UPS Id or name</entry>
      </row>
      <row>
        <entry>2.</entry>
        <entry>x</entry>
        <entry>The last date the batteries were replaced</entry>
      </row>
      <row>
        <entry>3.</entry>
        <entry>u</entry>
        <entry>The Upper Transfer Voltage</entry>
      </row>
      <row>
        <entry>4.</entry>
        <entry>l</entry>
        <entry>The Lower Transfer Voltage</entry>
      </row>
      <row>
        <entry>5.</entry>
        <entry>e</entry>
        <entry>The Return Battery Charge Percentage</entry>
      </row>
      <row>
        <entry>6.</entry>
        <entry>o</entry>
        <entry>The Output Voltage when on Batteries</entry>
      </row>
      <row>
        <entry>7.</entry>
        <entry>s</entry>
        <entry>The Sensitivity to Line Quality</entry>
      </row>
      <row>
        <entry>8.</entry>
        <entry>p</entry>
        <entry>The Shutdown Grace Delay</entry>
      </row>
      <row>
        <entry>9.</entry>
        <entry>q</entry>
        <entry>The Low Battery Warning Delay</entry>
      </row>
      <row>
        <entry>10.</entry>
        <entry>k</entry>
        <entry>The Alarm Delay</entry>
      </row>
      <row>
        <entry>11.</entry>
        <entry>r</entry>
        <entry>The Wakeup Delay</entry>
      </row>
      <row>
        <entry>12.</entry>
        <entry>E</entry>
        <entry>The Automatic Self Test Interval</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>

<para>The first two cases (Ident and Batt date) are somewhat special
in that you tell the UPS you want to change the value, then you
supply 8 characters that are saved in the EEPROM. The last ten item
are programmed by telling the UPS that you want it to cycle to the
next permitted value.</para>

<para>In each case, you indicate to the UPS that you want to change
the EEPROM by first sending the appropriate query command (e.g. &quot;c&quot;
for the UPS ID or &quot;u&quot; for the Upper Transfer voltage. This command
is then immediately followed by the cycle EEPROM command or &quot;-&quot;. In
the case of the UPS Id or the battery date, you follow the cycle
command by the eight characters that you want to put in the EEPROM.
In the case of the other ten items, there is nothing more to
enter.</para>

<para>The UPS will respond by &quot;OK&quot; and approximately 5 seconds later
by a vertical bar (|) to indicate that the EEPROM was changed.</para>

</sect1>
<sect1><title>Acknowledgements</title>

<para>The apcupsd has a rather long and tormented history. Many thanks to
the guys that, with time, contributed to the general public
knowledge.</para>

<para>Pavel Korensky &lt;pavelk at dator3.anet.cz&gt;,
Andre M. Hedrick &lt;hedrick at suse.de&gt;,
Christopher J. Reimer &lt;reimer at doe.carleton.ca&gt;,
Kevin D. Smolkowski &lt;kevins at trigger.oslc.org&gt;,
Werner Panocha &lt;wpanocha at t-online.de&gt;,
Steven Freed, <ulink url="http://www.exploits.org/~rkroll/contact.html">Russell
Kroll</ulink>.</para>

<para>additions by:
<ulink url="http://www.apcupsd.com">Kern Sibbald
&lt;apcupsd-users at lists.sourceforge.net&gt;</ulink></para>
</sect1>
</chapter>
</part>

<appendix><title>Credits</title>
<mediaobject>
  <imageobject>
    <imagedata fileref="thanks.png" depth="86" width="369"/>
  </imageobject>
</mediaobject>

<para>The success of <application>apcupsd</application> is due to the many
people that helped in development, testing and in many other
ways.</para>

<para>Thank all the developers that worked hard to make
APCUPSD&#xA0;one of the best piece of software for
UPS&#xA0;management.</para>

<sect1><title>Contributors</title>

<variablelist>
<varlistentry>
<term>Project Starter and Former Code Maintainer:</term>
<listitem>
    <para>Andre Hedrick (andre at linux-ide.org)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Current Code Maintainer and Project Manager:</term>
<listitem>
    <para>Riccardo Facchetti (riccardo at master.oasi.gpa.it)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Serial Communications:</term>
<listitem>
    <para>Andre Hedrick (andre at linux-ide.org)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>2.0 User's Manual:</term>
<listitem>
    <para>Eric S. Raymond (esr at thyrsus.com)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Alpha Port:</term>
<listitem>
    <para>Kern Sibbald (kern at sibbald dot com)</para>
    <para>Jo&#xE3;o Rochate (jrochate at ualg.pt) testing and machine
    loan</para>
</listitem>
</varlistentry>
<varlistentry> 
<term>Caldera:</term>
<listitem>
    <para>John Pinner (john at clocksoft.com)</para>
</listitem>
</varlistentry>
<varlistentry> 
<term>HP-UX Port</term>
<listitem>
    <para>Carl Erhorn (Carl_Erhorn at hyperion.com)</para>
    <para>Robert K Nelson (rnelson at airflowsciences.com)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>SOLARIS Port:</term>
<listitem>
    <para>Carl Erhorn (Carl_Erhorn at hyperion.com)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>OpenBSD Port:</term>
<listitem>
    <para>Devin Reade (gdr at gno.org)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>NetBSD Port:</term>
<listitem>
    <para>Neil Darlow (neil at darlow.co.uk)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Win32 Port:</term>
<listitem>
    <para>Kern Sibbald (kern at sibbald dot com)</para>
    <para>Paul Z. Stagner (paul.stagner at charterco.com) testing</para>
</listitem>
</varlistentry>
<varlistentry>
<term>WEB Interfaces:</term>
<listitem>
    <para>Kern Sibbald (kern at sibbald dot com)</para>
    <para>Joseph Acosta (joeja at mindspring.com)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Apcupsd Support and Knowledge Base:</term>
<listitem>
    <para>Brian Schau (Brian.Schau at compaq.com)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Hard Core Coders:</term>
<listitem>
    <para>Riccardo Facchetti (riccardo at master.oasi.gpa.it)</para>
    <para>Kern Sibbald (kern at sibbald dot com)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Part Time Coders:</term>
<listitem>
    <para>Jonathan H N Chin (jc254 at newton.cam.ac.uk)</para>
    <para>Andre Hedrick (andre at linux-ide.org)</para>
    <para>Brian Schau (Brian.Schau at compaq.com)</para>
    <para>Carl Erhorn (Carl_Erhorn at hyperion.com)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Distribution Maintainers:</term>
<listitem>
    <para>Alpha: Kern Sibbald (kern at sibbald dot com) temp</para>
    <para>Debian: Leon Breedt (ljb at debian.org)</para>
    <para>FreeBSD/BSDi: Jeff Palmer (scorpio at drkshdw.org)</para>
    <para>NetBSD: Neil Darlow (neil at darlow.co.uk)</para>
    <para>HP-UX: Carl Erhorn (Carl_Erhorn at hyperion.com),
          Robert K Nelson (rnelson at airflowsciences.com)</para>
    <para>OpenBSD: Devin Reade (gdr at gno.org)</para>
    <para>RedHat: Kern Sibbald (kern at sibbald dot com)</para>
    <para>Slackware: Devin Reade (gdr at gno.org)</para>
    <para>Sparc Solaris: Carl Erhorn (Carl_Erhorn at hyperion.com)</para>
    <para>SUSE: Riccardo Facchetti (riccardo at master.oasi.gpa.it)</para>
    <para>Win32: Kern Sibbald (kern at sibbald dot com)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Project Discussions:</term>
<listitem>
    <para><ulink url="wb_mailto:apcupsd-users@lists.sourceforge.net">APCUPSD
    Mailing List</ulink></para>
</listitem>
</varlistentry>
</variablelist>

<para>Thanks to American Power Conversion (APC) who helped in giving
technical information on their UPSes.</para>

<para>A special thanks to APC who gave me (Riccardo) a Smart
UPS&#xA0;1400 INET when my old Back UPS v/s 650's battery died.  Thank
you guys, your help has been invaluable.</para>

<para>Thanks to all the users that send bug reports and
suggestions:&#xA0;we need your help.</para>

<para>Thanks to every one I&#xA0;forgot here. If you feel I&#xA0;have
forgot your name, please don't hesitate to tell me.</para>

<para>Miquel van Smoorenburg, The Doctor What, Pavel Korensky,
and Russell Kroll &lt;rkroll at exploits.org&gt; for the CGI
programs.
Jonathan Benson &lt;jbenson at technologist.com&gt; for adapting
the upsstatus.cgi program to work with <application>apcupsd</application>
</para>
 
<para>The gd 1.2 Image Library used in our CGI programs is copyright
1994, 1995, Quest Protein Database Center, Cold Spring Harbor Labs.
Permission granted to copy and distribute this work provided that
this notice remains intact. Credit for the library must be given to
the Quest Protein Database Center, Cold Spring Harbor Labs, in all
derived works. This does not affect your ownership of the derived
work itself, and the intent is to assure proper credit for Quest,
not to interfere with your use of gd.</para>

<para>gd 1.2 was written by Thomas Boutell and is currently
distributed by boutell.com, Inc.</para>

<para>Parts of the VNC project by ATT (cool code) were used as
templates for our Win32 code, see: <ulink
url="http://www.uk.research.att.com/vnc">http://www.uk.research.att.com/vnc</ulink></para>

</sect1>
<sect1><title>Disclaimer: NO WARRANTY</title>

<para>BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS
AND/OR OTHER PARTIES PROVIDE THE PROGRAM &quot;AS IS&quot; WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND
PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE
DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR
OR CORRECTION.</para>

  <para>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY
OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</para>

</sect1>
</appendix>


</book>
