<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE book PUBLIC 
    "-//OASIS//DTD DocBook XML V4.1.2//EN" 
    "docbook/docbookxx.dtd">
<!--
Rebuild the HTML with:
xmlto -m manual.xsl xhtml-nochunks manual.xml
-->

<book>
<title><application>apcupsd</application> User's Manual</title>
<bookinfo>

<editor>
  <firstname>Eric</firstname>
  <othername>Steven</othername>
  <surname>Raymond</surname>
  <affiliation>
    <orgname><ulink url="http://www.catb.org/~esr/">
    Thyrsus Enterprises</ulink></orgname> 
    <address>
    <email>esr@thyrsus.com</email>
    </address>
  </affiliation>
</editor>

<revhistory id="history">
   <revision>
      <revnumber>2.0</revnumber>
      <date>20 Sept 2003</date>
      <authorinitials>esr</authorinitials>
       <revremark>
          First XML-DocBook version.
       </revremark>
   </revision>
</revhistory>
</bookinfo>

<preface><title>Release Notes</title>

<para>This release contains a good number of cleanups and bug fixes to
prior 3.10.x versions, and is intended to be the official release.
See the ChangeLog below for more details.</para>

<sect1><title>New Features in in 3.10.6</title>

<para>This release contains a good number of cleanups and bug fixes to
prior 3.10.x versions, and is intended to be the official release. See
the ChangeLog below for more details.</para>

<para>Change Log</para>

<programlisting>
- Lots of updates to the document.
- Fixed a slave crash in master/slave mode. It was a missing setup_device,
  and was diagnosed and reported by Christian Schacht -- many thanks.
- Made non-existent header files non-fatal and added #ifdef 
  around sys/socket.h so it will compile on IRIX.
- Add Scott's latest apcupsd.conf with the hid-ups program code 
  (actually I had done this some time ago ...).
- Start a ReleaseNotes file
- Fixed a typo error (mine) that prevented Scott from building
  rpms. Strange, it worked for me????
- More DESTDIR cleanup for building non-root rpms.
- Add DESTDIR everywhere so we can build rpms non-root
- Additional documentation
- Add Scott's new apcupsd.spec
- On Hilary Jones suggestion, I fixed the ./configure message that
  is printed when no libgd is found to direct the user to the
  main source.
- Add Sergey Vlasov's kernel patch to the examples directory,
  and it replaces the previous patch.
  This patch now solves the killpower problem on Linux USB.
  &lt;apcupsd-source&gt;/examples/linux-2.4.20-alt-apc_usb_ups.patch
  notes are in: linux-usb-patch-email.txt
- Add TTY mode to apctest to communicated directly with UPS.
- Apply patch to linux-usb.c in killpower supplied by
  Sergey Vlasov (thanks!).
- Eliminate pow() function in linux-usb.c so that -lm is not needed.
- Add automatic detection of socklen_t
- I received a kernel patch from Sergey Vlasov that fixes
  the killpower problem on CS UPSes. apcupsd can now shutdown
  these devices! I've removed some debug code that was in
  the killpower routine and is not needed or used.
  I have put the kernel patch in:
  &lt;apcupsd-source&gt;/examples/linux-2.4.20-alt-hidups.patch
- When the Win32 version starts as a service, delete the
  NOLOGIN and PWRFAIL files to prevent later confusion.
  Thanks to Allen Crawford for pointing this out.
- Modify all Win32 program so that only windowed programs
  (apcupsd, popup) have the -mwindows flags. The others do not.
- Tweak apctest.c a bit -- add EEPROM programming (still a bit
  kludgy), but at least it can be done.
- Lots of clean ups for Cygwin stuff. Events now work, and exit.
- Clean up a few undefined symbols in building with everything on.
- Eliminate pid and serial port lock file on Win32 systems.
- Modify init script to use daemon so that STDIN/OUT, ... are   
  detached from the terminal and pointed to the log file. This
  prevents remotely logged in users who start apcupsd from being
  unable to log out.
- Made some mindor modifications to configure.in and aclocal.m4 to
  make consistent use of double quotes in test statements in
  response to problems with make install reported by Andrew Surratt.
- Thanks to Richard Schwaninger for finding and submitting a patch to
  the tcp-wrappers code that prevented it from working because of an
  invalid name. Fixed.
- Thanks to Andrew Reid for pointing out that the child reaping code
  should be clearing the pid slot if a -1 is returned. The pid table
  was filling up on his system due to killed children. Fixed
- A bug report against the Mandrake version of apcupsd indicates that
  apcupsd is not releasing /dev/console.  I've moved the close() of
  STDIN so that it is always executed to prevent this possibility.
- Implement very crude first cut of EEPROM programming in apctest.
  Set battery date, set UPS name, and print EEPROM values should
  work.

</programlisting>
</sect1>
<sect1><title>New Features in 3.10.5</title>

<para>This release is primarily version 3.10.4 but including a fix
that closes a root exploit of slave machines. In addition, it makes
the <option>--enable-master-slave</option> ./configure option work and
has a few updates to the Mandrake release. See the ChangeLog below for
more details.</para>

<para>Change Log</para>
<programlisting>
----&gt; Release apcupsd-3.10.5 (03 Feb 2003)
  03Feb03
  - Added an avsnprinf() routine.          
  - Replaced all vsprintf() calls with avsnprintf() to close a
    master/slave exploit that was published.
  - Remove awk processing of halt script for Mandrake as suggested by
    David Walser.
  02Feb03
  - Corrected --enable-oldnet to be --enable-master-slave as I
    had intended. Thanks to David Walser for pointing this out.
  - Added David Walser's apcupsd.spec.in for Mandrake and his
    changes to configure.in.

</programlisting>
</sect1>
<sect1><title>New Features in 3.10.4</title>

<para>See the list below for the detailed change log. Note, a number
of the details of the changes are only documented in the apcupsd.conf
file, and unfortunately not in much detail.</para>

<para>The main new features are:</para>

<itemizedlist>
<listitem><para>Support for USB UPSes on Linux. The killpower feature does
    not work though (most likely a kernel "bug").</para>
</listitem>
<listitem><para>Support for additional models and cables.</para>
</listitem>
<listitem><para>New cable for running BackUPS CS in Smart mode (possibly
    also the BackUPS ES).</para>
</listitem>
<listitem><para>The old master/slave code must be explicitly enabled with
    <option>--enable-master-slave</option> option on the 
    <command>./configure</command> line.</para>
</listitem>
<listitem><para>Different models are now handled by drivers.</para>
</listitem>
<listitem><para>NIS code, master/slave code, and the drivers can be
    individually configured giving a much smaller memory foot
    print.</para>
</listitem>
<listitem><para>A host of new configuration options to support
    enabling/disabling drivers and features.</para>
</listitem>
<listitem><para>Support for limiting what subnets the NIS code will listen
    to using the new NISIP configuration directive.</para>
</listitem>
<listitem><para>SNMP support.</para>
</listitem>
<listitem><para>Support for system provided gd libraries.</para>
</listitem>
<listitem><para>Source tree reorganization.</para>
</listitem>
</itemizedlist>


<para>Change Log:</para>
<programlisting>
----&gt; Release apcupsd-3.10.4 (21 Jan 2003)
  - Added error messages if old master/slave code called.
  - Reworked the messages for ./configure --help to be aligned and
    clearer for networking and master/slave
  - A number of important patches all supplied by Mirko Doelle.
  - Moved technotes for 2001 and 2002 into respective directories.
  - Created a new kes-3.10.4 file to which I will append if there
    are additional changes to 3.10.4. This will reduce the number
    of release note files.

  19Jan03
  - Fixed hangs in usb driver startup when could not open port by
    releasing the ups structure lock before the Error_abort calls.
    Thanks to Mirko Doelle for reporting this.
  - Fixed the default path for mkinstalldirs from $(topdir) to
    $(topdir)/autoconf.  Reported by Mirko.
  - Fixed configure.in to always create platform/apccontrol. Previously
    it was not being created for Debian. Reported by Mirko.
  - Removed Debian specific installation of apccontrol. Reported by
    Mirko.
  - Implemented code to display the apcupsd events with the most recent
    first. Code sent by Mirko, but I modified it slightly.

----&gt; Release apcupsd-3.10.3 (12 Dec 2002)
  - Tried to correct problems with Makefiles
  - Thanks to David Walser who pointed out where on the Sun, the make
    install was doing terrible things -- I found that there was
    a missing semicolon in the new Makefile.  Before my previous cleanup,
    there were actually 4 missing semicolons.  Hopefully this
    will correct the problem.
  - For a second time, David Walser came to the rescue finding the
    CGI install problem reported by lots of people.  The new code
    used &quot;make&quot; instead of $(MAKE) to call the CGI make.  Fixed.

  - Removed Makefile code that creates and sets permission bits on
    /tmp $(prefix) and $(exec-prefix)
  - Removed all occurrences of -z in the Makefiles (at least that I
    found) and replaced them with a more conservative formulation.
  - Removed the install-symlinks script that caused some problems
    on distributions with blanks in the DISTVER name.
  - Added install-symlinks to the suse Makefile.in. This is the
    only platform that currently uses it.


----&gt; Release apcupsd-3.10.2 (08 Nov 2002)
  - New cable design for BackUPS CS models to run it
    in Smart serial mode.
  - Corrected a major bug in the smart and net code where the
    status word was getting clobbered.

  - A few days ago, slither_man sent me an email with some 
    information on how to run a BackUPS CS in smart mode with
    a serial cable.  He found the information by assuming that
    the UPS supported Smart mode and through trial and error.
    Well, it works!!!!!!! Amazing!!!! Thanks slither_man.
  - Documentation for new CUSTOM-RJ54 cable that can be constructed
    from the end of an ethernet cable and a DB9F connector.

  - Changed all the MAIL instances in shell scripts into APCUPSD_MAIL.
    This helps keep separated the apcupsd specific shell variables from
    the generic $MAIL shell variable that points to the user's mailbox:

      riccardo at ao:~&gt; echo $MAIL
      /var/spool/mail/riccardo
      riccardo at ao:~&gt;

    An user reported that ./configure script transformed internal $MAIL
    executable program into her mailbox path. This may happen if the
    configure suite is broken (thing that I don't want to check further).
    That said, APCUPSD_MAIL now should always correctly point to the
    system default mail client program.
  - Made so that error_cleanup is a generic function called by the
    generic error handlers. Now if you want specific error_cleanup
    you don't need to write also specific error handlers, provided
    that error_cleanup don't accept parameters (i.e.
    specific_error_cleanup(void)) but if you want to have a specific
    error_cleanup with parameters you _must_ also write specific
    error_exit and error_out into which you will call the specific
    error_cleanup with parameters.
  - Made so that error_exit and error_out are generic handlers that
    can be assigned, if needed, to specific handlers by the main() of
    each program. If not, the Error* routines will use the generic
    versions in apclib.a.
  - Fixed wrong &quot;true&quot; usage in powerflute.
  - Cleaned up the terminate() functions.
  - Made DeviceVendor part of snmp DEVICE case insensitive.

----&gt; Release apcupsd-3.10.1 (16 Sep 2002)
  - Fixed a filling error with USB status dword.
  - Fixed autoconf check and dependances of -lpanel,etc with -lncurses.
  - Made more portable the apccontrol external scripts when calling the
    mailer (subject is now in the echo lines instead of relying on the
    presence of a -s switch on the mailer).
  - Added gentoo platform.
  - Added DESTDIR variable for platform packaging.
  - Fixed a off-by-one problem in events table.
  - Conditional compilation of old and new network code. Old network code
    disabled by default while new network code enabled by default.
  - Removed old src/apcnet.c.old, old implementation of old networking.

----&gt; Release apcupsd-3.10.0 (28 Jul 2002)
  - Added documentation for SNMP UPSes. Documented the use of
    --kill-on-powerfail switch during shutdown.
  - SuSE 8.0 is now supported.
  - Added forward declaration of inet_pton and localtime_r when they
    are extraobj.
  - Added inet_pton function. Implementation from Internet Software
    Consortium.
  - Made sp_flags private to the dumb driver.
  - Can't SET/CLEAR multiple flags: do them one by one. Fixed this
    bug in SNMP driver.
  - Added 127A and 128A cables support for dumb UPSes.
  - Implemented killpower for PowerNet MIB.
  - Implemented the SNMP driver for APC's PowerNet MIB.
  - Restructured UPSINFO so that now all the flags are contained
    into the Status bitmap.
  - *BSD should compile cleanly again.
  - Source tree is now under CVS revision control.
  - Added support for listening on specific IP addresses/subnets in
    NIS server, from Troy.
  - Doc updates, from Kern.

----&gt; Release apcupsd-3.9.9 (18 May 2002)
  - Applied final Kern's patch.
  - Added a little program 'devicedbg' to help in debugging device
    drivers with gdb. To compile, 'make devicedbg' in src/.
  - Cygwin platform added (reorganized old cygwin files).
  - Darwin platform added.
  - compile line is 'gcc -c -g -O2   -I../include  apcaction.c'.
  - reviewed all the platform makefiles.
  - use system libgd, searching for include files in system include dirs.
  - in case system does not have libgd, uses provided libgd.
  - put gd1.2 into master's contrib directory and a message if gd1.2
    is not present into src/gd1.2 (like default distribution will not)
    is issued at configure time to get gd1.2 from contrib and extract it
    into the src/ directory. Re-run config and all will be good and happy.
  - Sources reorganization.
  - Mandrake platform added.
</programlisting>
</sect1>
</preface>

<preface><title>How To Use This Manual</title>

<para>This is the manual for <application>apcupsd</application>, a
daemon for communicating with UPSes (Uninterruptible Power Supplies)
made by American Power Corporation (APC).  If you have an APC-made
UPS, whether sold under the APC nameplate or OEMed<footnote><para>The
HP PowerTrust 2997A UPS has been tested as a "smartups" with cable
Hewlett Packard part number 5061-2575 equivalent to a custom-smart
cable"</para></footnote>, and you want you get it working with a
computer running Linux, Unix, or Windows NT, you are reading the right
document.</para>

<para>This manual is divided into parts which increase in technical
depth as they go.  If you have just bought a state-of-the-art smart
UPS with a USB or Ethernet interface, and you are running a current
version of Red Hat or SuSe Linux (8.0 or later), then
<application>apcupsd</application> is very nearly plug-and-play and
you will have to read only the <link linkend='basics'>Basic User's
Guide</link>. </para>

<para>If your operating system is older, or if you have an
old-fashioned serial-line UPS, you'll have to read about <link
linkend='legacy'>legacy installation</link>.  If you need
more details about administration for unusual situations (such as a
master/slave or multi-UPS setup) you'll need to read the section on
<link linkend='advanced'>advanced topics</link>.  Finally, there
is a <link linkend='arcana'>Technical Reference</link>
section which gives full details on things like configuration 
file directives and event-logging formats.</para>

<para>You should begin by reading the <link linkend='quickstart'>Quick
Start</link> instructions.</para>
</preface>

<part id='basics'><title>Basic User's Guide</title>

<chapter><title>Planning Your Installation</title>

<sect1 id='quickstart'><title>Quick Start for Beginners</title>

<para><application>apcupsd</application> is a complex piece of
software, but most of its complexities are meant for dealing with
older hardware and operating systems.  On current hardware and 
software getting it running should not be very complicated.</para>

<para>The following is a  help guide to the steps needed to get
<application>apcupsd</application> set up and
running as painlessly as possible.</para>

<procedure>
<step><para>First, check to see if
<application>apcupsd</application> 
<link linkend='supported'>supports your UPS and operating
system</link>.</para></step>

<step><para>Second, <link linkend='configtype'>plan your configuration
type</link>.  If you have just one UPS and one computer, this is easy.
If you have more than one machine being served by the same UPS, or
more than one UPS supplying power to computers that are on the same
local network, you have more choices to make,</para></step>

<step><para>Third, figure out if you have one of the easy setups.
If you have a USB UPS, and a USB-capable recent Linux such as Red Hat
or Suse at version 8.0, and you want to use one UPS with one computer,
that's an easy setup.  APC supplies the cable needed to talk with 
that UPS along with the UPS. All you need to do is <link
linkend='check_usb'>check that your USB subsystem is working</link>;
if so, you can go to the build and install step.</para></step>

<step><para>If you have a UPS designed to communicate via SNMP
over Ethernet, that is also a relatively easy installation. It's
in <link linkend='advanced'>Advanced Topics</link> mainly because
it's an unusual situation.</para></step>

<step><para>If you have a UPS that communicates via an
old-fashioned RS232C serial interface, your life may be about 
to get interesting.</para>

<substeps>
<step><para>If you have a vendor-supplied cable, find out what cable type
you have by looking on the flat ends of the cable for a number, such
as 940-0020A, stamped in the plastic.  Check the cables column of the
<link linkend='type_table'>table of types</link> to see if it's a
supported type.</para></step>

<step><para>If you don't have a vendor-supplied cable, or your type is
not supported, you may have to <link linkend='cables'>build one
yourself</link>.  Here is hoping you are good with a soldering
iron!</para></step>
</substeps>
</step>

<step><para>Now you are ready to read the <link
linkend="build_install">Building and Installing</link> section of
the manual and follow those directions.  If you are installing from
an RPM or some other form of binary package, this step will probably
consist of executing a single command.</para></step>

<step><para>Tweak your <filename>/etc/apcupsd/apcupd.conf</filename> file as
necessary. Often it will not be.</para></step>

<step><para><link linkend='autoboot'>Change the BIOS settings</link>
on your computer so that boots up every time it gets power. (This is
not the default on most systems.)</para></step>

<step><para>To verify that your UPS is communicating with your
computer and will do the right thing when the power goes out, read and
follow the instructions in the <link linkend='testing'>Testing</link>
section.</para></step>

<step><para>If you run into problems, read the <link
linkend='troubleshooting'>Troubleshooting</link> section of this
manual.</para></step>

<step><para>If you still need help, send a message to the developer's
email list <email>apcupsd-users at lists.sourceforge.net</email> describing your
problem, what version of <application>apcupsd</application> you are
using, what operating system you are using, and anything else you
think might be helpful.</para></step>

<step><para>Read the manual sections on <ulink
url='monitoring'>monitoring</ulink> and <ulink
url='maintaining'>maintaining</ulink> your UPS.</para></step>

</procedure>
</sect1>

<sect1 id='supported'><title>Supported Operating Systems, UPSes and Cables</title>

<para>The <application>apcupsd</application> maintainers develop it
under Red Hat and SuSe Linux; those ports are, accordingly, the most
up to date and best tested.  There are enough Debian Linux users that
that port is also generally pretty fresh.  Slackware Linux is also
fully supported.</para>

<para><application>apcupsd</application> has also been ported to
FreeBSD, NetBSD, OpenBSD, HP/UX, Solaris, Alpha Unix and the Cygwin
Unix emulation under Windows. It is quite likely to work on those
systems, though the port may occasionally get stale and require minor
tweaking.</para>

<para>In <xref linkend="OS_Specifics"/> you'll find
operating-system-specific tips for building and configuring
<application>apcupsd</application>.</para>

<para>You can generally count on your UPS being supported if it has
either an Ethernet-connected SNMP interface or a USB interface with
an APC-supplied cable.</para>

<para id='upstypes'>The "UPSTYPE Keyword" field is the value you will
put in your <filename>/etc/apcupsd/apcupd.conf</filename> file to tell
<application>apcupsd</application> what type of UPS you have.  We'll
describe the possible values here, because they're a good way to
explain your UPS's single most important interface property &mdash;
the kind of protocol it uses to talk with its computer.</para>

<variablelist>
<varlistentry>
<term>dumb</term>
<listitem>
<para>A dumb or voltage-signalling UPS and its computer communicate
through the signal lines on an RS232C serial connection.  Not much can
actually be conveyed this way other than an order to shut down.
Voltage-signalling UPses are obsolete; you are unlikely to encounter
one other than as legacy hardware.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>apcsmart</term>
<listitem>
<para>An apcsmart UPS and its computer also communicate through an
RS232C serial connection, but they actually use it as a character
channel (2400bps, 8 data bits, 1 stop bit, no parity) and pass
commands back and forth in a <link linkend='upsbible'>primitive
language</link> resembling modem-control codes. The different APC UPSs
all use closely related firmware, so the language doesn't vary much
(later versions add more commands).  This class of UPS is in decline,
rapidly being replaced in APC's product line by USB UPSes.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>usb</term>
<listitem>
<para>A USB UPS speaks a universal well defined control language over a USB wire.  
Most of APC's lineup now uses this method as of late 2003, and it
seems likely to completely take over in their low- and middle range.
Other manufacturers (Belkin, Tripp-Lite, etc.) are moving the same
way, though with a different control protocol for each manufacturer.
As long as USB hardware can be mass-produced more cheaply than an
Ethernet card, most UPSes are likely to go this design route.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>net</term>
<listitem>
<para>Some higher-end APC models can declare an IP address and speak 
Ethernet.  These use a different command format than apcsmart,
token-oriented and looking a bit more like a classical Internet
protocol.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>snmp</term>
<listitem>
<para>SNMP UPSes communicate via an Ethernet NIC and firmware that
speaks Simple Network Management Protocol.</para>
</listitem>
</varlistentry>
</variablelist>

<informaltable id='type_table'>
<tgroup cols="4">
<colspec colnum="1" colname="col1"/>
<colspec colnum="2" colname="col2"/>
<colspec colnum="3" colname="col3"/>
<colspec colnum="4" colname="col4"/>
<thead>
<row>
  <entry><para><emphasis role="bold">APC Model</emphasis></para></entry>
  <entry><para><emphasis>UPSTYPE Keyword</emphasis></para></entry>
  <entry><para><emphasis>Cables Supported</emphasis></para></entry>
  <entry><para><emphasis>Status</emphasis></para></entry>
</row>
</thead>
<tbody>
<row>
  <entry>BackUPS</entry>
  <entry>dumb</entry>
  <entry>Simple-Custom<footnote id='custom_cable'><para>This cable is
  not an APC product.  You have to build it yourself using the
  instructions in <xref linkend='cables'/>.</para></footnote>, 
  940-0020B, 940-0020C, 940-0119A, 940-0023A</entry>
  <entry>Supported</entry>
</row>
<row>
  <entry>BackUPS Office, BackUPS ES</entry>
  <entry>dumb</entry>
  <entry>940-0119A</entry>
  <entry>Supported</entry>
</row>
<row>
  <entry>BackUPS CS and possibly ES models (serial mode)</entry>
  <entry>dumb</entry>
  <entry>940-0128A</entry>
  <entry>Supported</entry>
</row>
<row>
  <entry>ShareUPS Basic Port</entry>
  <entry>dumb</entry>
  <entry>940-0020B, 940-0020C, 940-0023A</entry>
  <entry>Supported</entry>
</row>
<row>
  <entry>BackUPS CS (serial mode)</entry>
  <entry>apcsmart</entry>
  <entry>Smart Custom RJ45<footnoteref linkend='custom_cable'/></entry>
  <entry>Supported</entry>
</row>
<row>
  <entry>BackUPS Pro, Smarter BackUPS Pro</entry>
  <entry>apcsmart</entry>
  <entry>940-0095A</entry>
  <entry>Supported</entry>
</row>
<row>
  <entry>SmartUPS, SmartUPS VS<footnote><para>It has not been confirmed that the
  cable shipped with the VS is a 940-0095.</para></footnote>, PowerStack 450, Matrix UPS, ShareUPS Advanced Port</entry>
  <entry>apcsmart</entry>
  <entry>Smart-Custom<footnoteref linkend='custom_cable'/>, 940-0024C</entry>
  <entry>Supported</entry>
</row>
<row>
  <entry>BackUPS CS USB, Pro USB, and ES USB models including RS/XS 1000
and RS/XS 1500.</entry>
  <entry>usb</entry>
  <entry>USB (using APC cables 940-0127A/B)</entry>
  <entry>Supported in version >=3.9.4</entry>
</row>
<row>
  <entry>SmartUPS USB</entry>
  <entry>usb</entry>
  <entry>USB (using APC cable)</entry>
  <entry>Supported, version >=3.9.8</entry>
</row>
<row>
  <entry>All SNMP-capable models</entry>
  <entry>snmp</entry>
  <entry>Ethernet</entry>
  <entry>Supported</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</sect1>
<sect1 id='configtype'><title>Choosing a Configuration Type</title>

<para>There are three major ways of running
<application>apcupsd</application> on your system. The first is a
standalone configuration where <application>apcupsd</application>
controls a single UPS, which powers a single computer.  This is the most
common configuration.  If you're working with just one machine and one UPS,
skip the rest of this section.</para>

<para>Your choices become more interesting if you are running a
small cluster or a big server farm.  Under those circumstances, it 
may not be possible or even desirable to pair a UPS with every single
machine.  <application>apcupsd</application> supports some alternate
arrangements.</para>

<para>The second type of configuration is a master/slave
configuration, where one UPS powers several computers, each of which
runs a copy of <application>apcupsd</application>. The computer that
controls the UPS is called the master, and the other computers are
called slaves. The master copy of <application>apcupsd</application>
communicates with and controls the slaves via an Ethernet connection.
This type of configuration may be appropriate for a small cluster
of machines.</para>

<para>The third configuration (new with version 3.8.3), is where
a single computer controls multiple UPSes. In this case, there are
several copies of <application>apcupsd</application> on the same
computer, each controlling a different UPS. One copy of
<application>apcupsd</application> will run in standalone mode, and
the other copy or copies will normally run in master/slave
mode.  This type of configuration may be appropriate for large
server farms that use one dedicated machine for monitoring 
and diagnostics</para>

<para>Here is a diagram that summarizes the possibilities:</para>

<figure id='configtypes'><title>Configuration types.</title>
<mediaobject>
  <imageobject>
    <imagedata fileref='main_configs.png' format='JPG'/>
  </imageobject>
</mediaobject>
</figure>

<para>If you decide to set up one of these more complex
configurations, see the <link linkend='advanced'>Advanced Topics</link>
section for details.</para>

</sect1>
<sect1 id='check_usb'><title>Checking Out Your USB Subsystem</title>

<para>You can skip this section if your UPS has an Ethernet or RS232-C 
interface.  If it has a USB interface, you need to make sure that
your USB subsystem can see the UPS.  On a Linux system this is easy,
just do this from a shell prompt:</para>

<screen>
cat /proc/bus/usb/devices
</screen>

<para>This information is updated by the kernel whenever a device is
plugged in or unplugged, irrespective of whether
<application>apcupsd</application> is running or not. To interpret the
codes in this file, please see <ulink
url="http://www.linuxhq.com/kernel/v2.4/doc/usb/proc_usb_info.txt.html">
http://www.linuxhq.com/kernel/v2.4/doc/usb/proc_usb_info.txt.html</ulink></para>
<para>You should get some output back that includes something like
this from ESR's site, featuring an RS 1000:</para>

<screen>
T:  Bus=02 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  3 Spd=1.5 MxCh= 0
D:  Ver= 1.10 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 8 #Cfgs=  1
P:  Vendor=051d ProdID=0002 Rev= 1.06
S:  Manufacturer=American Power Conversion
S:  Product=Back-UPS RS 1000 FW:7.g3 .D USB FW:g3
S:  SerialNumber=JB0308036505
C:* #Ifs= 1 Cfg#= 1 Atr=a0 MxPwr= 24mA
I:  If#= 0 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=00 Prot=00 Driver=hid
</screen>

<para>Here are two more ample entries from Kern Sibbald.  The first
features a  Back-UPS 350 direct connected USB device:</para>

<programlisting>
T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  2 Spd=1.5 MxCh= 0
D:  Ver= 1.10 Cls=00(&gt;ifc ) Sub=00 Prot=00 MxPS= 8 #Cfgs=  1
P:  Vendor=051d ProdID=0002 Rev= 1.00
S:  Manufacturer=American Power Conversion
S:  Product=Back-UPS 350 FW: 5.2.I USB FW: c1 
S:  SerialNumber=BB0115017954
C:* #Ifs= 1 Cfg#= 1 Atr=a0 MxPwr= 30mA
I:  If#= 0 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=00 Prot=00 Driver=hid
E:  Ad=81(I) Atr=03(Int.) MxPS=   8 Ivl= 10ms
</programlisting>

<para>The second features an IOgear USB-to-serial adaptor that runs my
serial SmartUPS 1000 :</para>

<programlisting>
T:  Bus=01 Lev=01 Prnt=01 Port=01 Cnt=02 Dev#=  4 Spd=12  MxCh= 0
D:  Ver= 1.10 Cls=00(&gt;ifc ) Sub=00 Prot=00 MxPS= 8 #Cfgs=  1
P:  Vendor=0557 ProdID=2008 Rev= 0.01
C:* #Ifs= 1 Cfg#= 1 Atr=a0 MxPwr=100mA
I:  If#= 0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=serial
E:  Ad=81(I) Atr=03(Int.) MxPS=  10 Ivl=  1ms
E:  Ad=02(O) Atr=02(Bulk) MxPS=  64 Ivl=  0ms
E:  Ad=83(I) Atr=02(Bulk) MxPS=  64 Ivl=  0ms
</programlisting>

<para>Note that the IOgear device is using the <emphasis
role="bold">serial</emphasis> driver (the I: line) while the Back-UPS
350 is using the <emphasis role="bold">hid</emphasis> driver.</para>

<para>In general, f you see your UPS model in the S field, you're
done.  You can skip the rest of this section and go straight to
building and installing.</para>

<para>If it doesn't show, check the obvious things; the UPS must be
powered on, and a cable must be properly seated in both the data port
of the UPS and one of your machine's USB ports.  Many UPSes have phone
ports to provide surge protection for phones or modems &mdash; make
sure you haven't plugged your USB cable into one of those rather than
the data port (which will usually be near the top edge of the
case.)</para>

<para>Also, ensure that the correct drivers are loaded. Under Linux,
you can check this out easily by examining the right file in the
<filename>/proc</filename> system.  Here's how you can do that:</para>

<screen>
esr@grelber$ cat /proc/bus/usb/drivers
         usbdevfs
         hub
 96-111: hiddev
         hid
</screen>

<para>A USB UPS needs all of these drivers &mdash; the USB device filesystem,
the USB hub, the Human Interface Device subsysten driver, and the
Human Interface Device driver.</para>

<para>For the IOGear serial USB connection, you need:</para>

<programlisting>
usbcore
usbserial
pl2303
</programlisting>

<para>Finally, check that appropriate USB devices exist.  On a Red Hat
system you can do this:</para>

<screen>
esr@grelber$ ls /dev/usb/h*
/dev/usb/hiddev0   /dev/usb/hiddev12  /dev/usb/hiddev2  /dev/usb/hiddev6
/dev/usb/hiddev1   /dev/usb/hiddev13  /dev/usb/hiddev3  /dev/usb/hiddev7
/dev/usb/hiddev10  /dev/usb/hiddev14  /dev/usb/hiddev4  /dev/usb/hiddev8
/dev/usb/hiddev11  /dev/usb/hiddev15  /dev/usb/hiddev5  /dev/usb/hiddev9
</screen> 

<para>This will tell you that the Human Interface Device nodes, one of
which <application>apcupsd</application> will use to talk with the
UPS, exist.  On other Linuxes the layout will be slightly different;
the hiddev devices will usually live in a
<filename>/dev/usb/hid/</filename> subdirectory. If these devices
don't exist, you may need to run
<filename>&lt;apcupsd-src&gt;/examples/make-hiddev</filename> to
create them.</para>

<para>Now build and run the <application>hid-ups</application> test
program. You do not have to configure and build the rest of
<application>apcupsd</application> to do this.  To build
<application>hid-ups</application> enter:</para>

<programlisting>
cd &lt;apcupsd-src&gt;/examples
make hid-ups
</programlisting>

<para>There should be no errors. Now assuming that everything has gone
well to this point and that you have connected your USB UPS, enter:</para>

<programlisting>
./hid-ups
</programlisting>

<para>It should print a sample report of the information that it has
obtained from your UPS. CAUTION! if you have a 2.4.x Linux kernel
do  not run two copies of this program
at the same time, or your kernel will freeze. The report that is
printed should look very similar to the report in
<filename>&lt;src&gt;/hid-ups.rpt</filename>. If the program reports
that the device was not found ensure that all the appropriate modules
are loaded (as described earlier), then unplug your UPS and plug it
back in. This should permit the kernel to recognize the UPS.</para>

<para>If <application>./hid-ups</application> tells you &quot;No
permission, try this as root&quot;, you know what to try. If it says
&quot;Couldn't find USB UPS device, check your /dev.&quot;, then it is
very unlikely that <application>apcupsd</application> will work.  You
probably need to run the script &quot;make-hiddev&quot; before
continuing.</para>

<para>If all there things check out and you still can't see the UPS,
something is more seriously wrong than this manual can cover &mdash;
find expert help.  If you are unable to list USB devices or drivers,
you kernel may not be USB-capable and that needs to be fixed. </para>

</sect1>
</chapter>
<chapter id='build_install'><title>Building and Installing apcupsd</title>

<sect1><title>Installation from Binary Packages</title>

<sect2><title>Red Hat Linux</title>

<para>For Red Hat systems, <application>apcupsd</application> is
available in binary RPM format.  This is the simplest way to install.
If you have no previous version of <application>apcupsd</application>
on your machine and are creating a standalone configuration, simply
install the RPM with a normal <command>rpm -ihv</command> command.
You're done, and can now skip the rest of this chapter and go straight
to <link linkend='after_installation'>tweaking your run-time
configuration file.</link></para>

<para>If you have a previous installation, you can upgrade with a normal
<command>rpm -Uhv</command>, but this may not upgrade the halt script.
It may be better to do the upgrade as a remove (<command>rpm -e</command>)
foll;owed by a fresh install (<command>rpm -ihv</command>).</para>

<para>After installation of the binary RPM, please verify carefully
that <filename>/etc/rc.d/init.d/halt</filename> was properly updated
and contains new script lines flagged with <emphasis
role="bold">***APCUPSD***</emphasis>.</para>

<para>Since there is no standard location for
<filename>cgi-bin</filename>, the rpm will place the binary CGI
programs in the directory <filename>/etc/apcupsd/cgi</filename>. To
actually use them, you must copy or move them to your actual cgi-bin
directory, which on many systems is located in
<filename>/home/httpd/cgi-bin</filename>.</para>

</sect2>
<sect2><title>Microsoft Windows</title>

<para>If you have a binary release of the <application>Win32
apcupsd</application>, please see the instructions in the <link
linkend='advanced'>Advanced Topics</link> section of this
manual.</para>

</sect2>
</sect1>
<sect1><title>Installation from Source</title>

<para>Installation from source might have to be be done different ways
depending on what system you are running. The basic procedure involves
getting a source distribution, running the configuration, rebuilding,
and installing.</para>

<para>The basic installation from a tar source file is rather simple:</para>

<orderedlist>
<listitem>
  <para>Unpack the source code from its tar archive.</para>
</listitem>
<listitem>
  <para>Go into the directory containing the source code.</para>
</listitem>
<listitem>
  <para>Run <command>./configure</command> (with appropriate options 
  as described below)</para>
</listitem>
<listitem>
  <para>make</para>
</listitem>
<listitem>
  <para>su (i.e. become root)</para>
</listitem>
<listitem>
  <para>Stop any running instance of <application>apcupsd</application>.  The
  command to do this will look like 
  <command>&lt;system-dependent-path&gt;/apcupsd stop</command></para>
</listitem>
<listitem>
  <para>uninstall any old <application>apcupsd</application>
  This is important since the default install locations may have
  changed.</para>
</listitem>
<listitem>
  <para>make install</para>
</listitem>
<listitem>
  <para>edit your <filename>/etc/apcupsd/apcupsd.conf</filename> file if
  necessary</para>
</listitem>
<listitem>
  <para>ensure that your halt script is properly updated</para>
</listitem>
<listitem>
  <para>Start the new <application>apcupsd</application> with:
  <command>&lt;system-dependent-path&gt;/apcupsd start</command></para>
</listitem>
</orderedlist>

<para>If all goes well, the <command>./configure</command> will
correctly determine which operating system you are running and
configure the source code appropriately. <command>configure</command>
currently recognizes the systems listed below in the <xref
linkend="OS_Specifics"/> section of this chapter and adapts the
configuration appropriately.  Check that the configuration report
printed at the end of the <command>configure</command> process
corresponds to your choice of directories, options, and that it has
correctly detected your operating system.  If not, redo the
<command>configure</command> with the appropriate options until your
configuration is correct.</para>

<para>Please note that a number of the <command>configure</command>
options preset <filename>apcupsd.conf</filename> directive values in
an attempt to automatically adapt <application>apcupsd</application>
as best possible to your system.  You can change the values in
<filename>apcupsd.conf</filename> at a later time without redoing the
configuration process by simply editing the
<filename>apcupsd.conf</filename> file.</para>

<para>Other configuration options can be used to set up the installation
of HTML documentation and optional modules, notably the CGI interface
that enables the UPS state to be queried via the Web and the 
optional <application>powerflute</application> curses-based control
panel.  Still others enable features such as thread support.  You 
will find a complete reference later in this chapter.</para>

<para>In general, you will probably want to supply a more elaborate
<command>configure</command> statement to ensure that the modules you
want are built and that everything is placed into the correct
directories.</para>

<para>On Red Hat, a fairly typical configuration command would
look like the following:</para>

<programlisting>
CFLAGS=&quot;-g -O2&quot; LDFLAGS=&quot;-g&quot; ./configure \
  &#x2D;&#x2D;enable-usb \
  &#x2D;&#x2D;with-serial-dev=/dev/usb/hiddev[0-15] \
  &#x2D;&#x2D;with-upstype=usb \
  &#x2D;&#x2D;with-upscable=usb \
  &#x2D;&#x2D;prefix=/usr \
  &#x2D;&#x2D;sbindir=/sbin \
  &#x2D;&#x2D;with-cgi-bin=/var/www/cgi-bin \
  &#x2D;&#x2D;enable-cgi \
  &#x2D;&#x2D;with-css-dir=/var/www/docs/css \
  &#x2D;&#x2D;with-log-dir=/etc/apcupsd \
  &#x2D;&#x2D;enable-pthreads \
  &#x2D;&#x2D;enable-powerflute
</programlisting>

<para>On other Linux systems, the <option>--with-serial-dev</option>
may need to be <filename>/dev/usb/hid/hiddev[0-15]</filename>.
The <emphasis role="bold">[0-15]</emphasis> is not a typo, but should
be entered exactly as shown. This is because the UPS can change device
numbers while it is running. Every time there is a blip or slowdown on
the USB line, the kernel will invalidate the UPS connection, then a
few moments later, it will reconnect but with a different device
number. Not very Unix-like, but that is what happens. This bizarre
syntax allows <application>apcupsd</application> to try a range of
devices until it finds or re-finds the UPS device.</para>

<para>By default, <command>make install</command> will install the
executable files in <filename>/sbin</filename>, the manuals in
<filename>/usr/man</filename>, and the configuration and script files
in <filename>/etc/apcupsd</filename>. In addition, if your system is
recognized, certain files such as the startup script and the system
halt script will be placed in appropriate system directories (usually
subdirectories of <filename>/etc/rc.d</filename>).</para>

</sect1>
<sect1><title>Verifying a Source Installation</title>
  
<para>There are a number of things that you can do to check if the
installation (make install) went well. The fist is to check where the
system has installed <application>apcupsd</application> using
<command>which</command> and <command>whereis</command>. On my Red Hat
system, you should get the following (lines preceded with a $ indicate what
you type):</para>

<screen>
$ which apcupsd 
/sbin/apcupsd
$ whereis apcupsd
apcupsd: /sbin/apcupsd /etc/apcupsd /etc/apcupsd.conf
/etc/apcupsd.status /usr/man/man8/apcupsd.8.gz
/usr/man/man8/apcupsd.8
</screen>

<para>If you find an <application>apcupsd</application> in
<filename>/usr/sbin</filename>, <filename>/usr/local/sbin</filename>,
<filename>/usr/lib</filename>, or another such directory, it is
probably a piece of an old version of
<application>apcupsd</application> that you can delete. If you are in
doubt, delete it, then rerun the <command>make install</command> to
ensure that you haven't deleted anything needed by the new
<application>apcupsd</application>.  Please note that the files
specified above assume the default installation locations.</para>

<para>As a final check that the <command>make install</command> went
well, you should check your halt script (in
<filename>/etc/rc.d</filename> on SuSE systems, and in
<filename>/etc/rc.d/init.d</filename> on Red Hat systems) to see that
the appropriate lines have been inserted in the correct
place. Modification of the halt script is important so that at the end
of the shutdown procedure, <application>apcupsd</application> will be
called again to command the UPS to turn off the power. This should
only be done in a power failure situation as indicated by the presence
of the <filename>/etc/powerfail</filename> file, and is necessary if
you want your machine to automatically be restarted when the power
returns. On a Red Hat system, the lines containing the <command>#
***apcupsd***</command> should be inserted just before the final halt
command:</para>

<programlisting>
# Remount read only anything that's left mounted.
#echo &quot;Remounting remaining filesystems (if any) readonly&quot;
mount | awk '/ext2/ { print $3 }' | while read line; do
    mount -n -o ro,remount $line
done

# See if this is a powerfail situation.                               # ***apcupsd***
if [ -f /etc/apcupsd/powerfail ]; then                                # ***apcupsd***
   echo                                                               # ***apcupsd***
   echo &quot;APCUPSD will now power off the UPS&quot;                          # ***apcupsd***
   echo                                                               # ***apcupsd***
   /etc/apcupsd/apccontrol killpower                                  # ***apcupsd***
   echo                                                               # ***apcupsd***
   echo &quot;Please ensure that the UPS has powered off before rebooting&quot; # ***apcupsd***
   echo &quot;Otherwise, the UPS may cut the power during the reboot!!!&quot;   # ***apcupsd***
   echo                                                               # ***apcupsd***
fi                                                                    # ***apcupsd***

# Now halt or reboot.
echo &quot;$message&quot;
if [ -f /fastboot ]; then
 echo &quot;On the next boot fsck will be skipped.&quot;
elif [ -f /forcefsck ]; then
 echo &quot;On the next boot fsck will be forced.&quot;
fi
</programlisting>

<para>The purpose of modifying the system halt files is so that
<application>apcupsd</application> will be recalled after the system
is in a stable state. At that point,
<application>apcupsd</application> will instruct the UPS to shut off
the power. This is necessary if you wish your system to automatically
reboot when the mains power is restored. If you prefer to manually
reboot your system, you can skip this final system dependent
installation step by specifying the
<option>&#x2D;&#x2D;disable-install-distdir</option> option on the
<command>./configure</command> command (see below for more
details).</para>

<para>The above pertains to Red Hat systems only. There are significant
differences in the procedures on each system, as well as the location
of the halt script. Also, the information that is inserted in your
halt script varies from system to system. Other systems such as
Solaris require you the make the changes manually, which has the
advantage that you won't have any unpleasant surprises in your halt
script should things go wrong. Please consult the specific system
dependent README files for more details.</para>

<para>Please note that if you install from RPMs for a slave machine,
you will need to remove the changes that the RPM install script made
(similar to what is noted above) to the halt script. This is because
on a slave machine there is no connection to the UPS, so there is no
need to attempt to power off the UPS. That will be done by the
master.</para>

</sect1>
<sect1><title>Configure Options</title>

  <para>All the available <command>configure</command> options can be
printed by entering:</para>

<programlisting>
./configure &#x2D;&#x2D;help
</programlisting>

<para>When specifying options for <command>./configure</command>, if
in doubt, don't put anything, since normally the configuration process
will determine the proper settings for your system. The advantage of
these options is that it permits you to customize your version of
<application>apcupsd</application>.  If you save the
<command>./configure</command> command that you use to create
<application>apcupsd</application>, you can quickly reset the same
customization in the next version of
<application>apcupsd</application> by simply re-using the same
<command>./configure</command> command.</para>

<para>The following command line options are available for
<command>configure</command> to customize your installation.</para>

<variablelist>
  <varlistentry>
    <term>&#x2D;&#x2D;prefix=&lt;path&gt;</term>
    <listitem>
      <para>This defines the directory for the non-executable files such as
      the manuals. The default is <emphasis role="bold">/usr</emphasis>.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;sbindir=&lt;path&gt;</term>
    <listitem>
      <para>This defines the directory for the executable files such as
      <application>apcupsd</application>. The default is
      <filename>/sbin</filename>. You may be tempted to
      place the executable files in <filename>/usr/sbin</filename> or 
      <filename>/usr/local/sbin</filename>. Please
      use caution here as these directories may be unmounted during a
      shutdown and thus may prevent the <command>halt</command> script from
      calling <application>apcupsd</application> to turn off the UPS power.
      Though your data will be protected, in this case, your system will
      probably not be automatically rebooted when the power returns.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;enable-powerflute</term>
    <listitem>
      <para>This option enables the building of the 
      <application>powerflute</application> executable, which is a ncurses
      based program to monitor the UPS. This program is not necessary for 
      the proper execution of <application>apcupsd</application>.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;enable-cgi</term>
    <listitem>
      <para>This enables the building of the CGI programs that permit Web
      browser access to <application>apcupsd</application> data. This option
      is not necessary for the proper execution of 
      <application>apcupsd</application>.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;with-cgi-bin=&lt;path&gt;</term>
    <listitem>
      <para>The with-cgi-bin configuration option allows you to define the
      directory where the CGI programs will be installed. The default
      is <filename>/etc/apcupsd</filename>, which is probably not 
      what you want.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;with-css-dir=&lt;path&gt;</term>
    <listitem>
      <para>This option allows you to specify where you want 
      <application>apcupsd</application> to put the Cascading Style Sheet
      that goes with the <application>multimoncss.cgi</application> 
      CGI program.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;enable-master-slave</term>
    <listitem>
      <para>Turns on the master/slave networking code (default). This is
      sometimes referred to as the old master/slave code</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;enable-apcsmart</term>
    <listitem>
      <para>Turns on generation of the APC Smart driver (default).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;enable-dumb</term>
    <listitem>
      <para>Turns on generation of the dumb signalling driver code
      (default).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;enable-usb</term>
    <listitem>
      <para>Turns on generation of the Linux (only) USB driver code. By
      default this is disabled.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;enable-net</term>
    <listitem>
      <para>Turns on generation of the NIS network driver for slaves. This
      is an alternative to master/slave code. For the master, this code
      should be disabled. For each slave, this is the only driver needed.
      This driver works by reading the information from the the
      configured master using the NIS (Network Information Services)
      interface.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;enable-snmp</term>
    <listitem>
      <para>Turns on generation of the SNMP driver. This driver will
      control the computer by reading the UPS information over the
      network assuming you are running SNMP. By default this is
      disabled.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;enable-test</term>
    <listitem>
      <para>This turns on a test driver that is used only for debugging.
      By default it is disabled.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;enable-nis</term>
    <listitem>
      <para>Turns on the Network Information Server (NIS) code within
      <application>apcupsd</application>. This is enabled by default. If you 
      do not want to access the status of the UPS from the network and you
      are not controlling any slaves via NIS (enable-net), this can be
      disabled.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;enable-pthreads</term>
    <listitem>
      <para>This option enables pthreads support causing 
      <application>apcupsd</application> to
      be built as a threaded program rather than forking to create
      separate processes. <application>apcupsd</application> built
      in this fashion is more efficient that the standard version being
      one third the data size and less overhead locking and coping shared
      memory. This option is <emphasis>highly</emphasis> recommended for
      Windows builds.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;with-libwrap=&lt;path&gt;</term>
    <listitem>
      <para>This option when enabled causes <application>apcupsd</application>
      to be built with the TCP WRAPPER library for enhanced security.
      In most cases, the &lt;path&gt; is optional since 
      <application>configure</application>
      will determine where the libraries are on most systems.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;with-nologin=&lt;path&gt;</term>
    <listitem>
      <para>This option allows you to specify where 
      <application>apcupsd</application> will
      create the nologin file when logins are prohibited. The default is
      <filename>/etc</filename></para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;with-pid-dir=&lt;path&gt;</term>
    <listitem>
      <para>This option allows you to specify where 
       <application>apcupsd</application> will
       create the process id (PID) file to prevent multiple copies from
       running. The default is system dependent but usually
       <filename>/var/run</filename>.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;with-log-dir=&lt;path&gt;</term>
    <listitem>
      <para>This option allows you to specify where 
      <application>apcupsd</application> will
      create the EVENTS and STATUS log files. The default is
      <filename>/etc/apcupsd</filename>. This option simply sets the default
      of the appropriate path in the <filename>apcupsd.conf</filename> file,
      which can be changed at any later time.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;with-lock-dir=&lt;path&gt;</term>
    <listitem>
      <para>This option allows you to specify where 
      <application>apcupsd</application> will create the serial port lock file.
      The default is systemdependent but usually 
      <filename>/var/lock</filename>. This option simply sets the
      appropriate path in the <filename>apcupsd.conf</filename> file,
      which can be changed at any later time.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;with-pwrfail-dir=&lt;path&gt;</term>
    <listitem>
      <para>This option allows you to specify where 
      <application>apcupsd</application> will create the 
      <filename>powerfail</filename> file when a power failure occurs. The
      default is system dependent but usually <filename>/etc</filename>.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;with-serial-dev=&lt;device-name&gt;</term>
    <listitem>
      <para>This option allows you to specify where 
      <application>apcupsd</application> will look for the serial device 
      that talks to the UPS. The default is system dependent, but
      often <filename>/dev/ttyS0</filename>. This option simply sets 
      the appropriate device name in the <filename>apcupsd.conf</filename>
      file, which can be changed at any later time.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;with-nis-port=&lt;port&gt;</term>
    <listitem>
      <para>This option allows you to specify what port 
      <application>apcupsd</application> will use for the Network Information
      Server (the CGI programs). The default is system dependent but usually
      3551 because that port has been officially assigned to 
      <application>apcupsd</application> by the IANA. This option
      simply sets the appropriate port in the 
      <filename>apcupsd.conf</filename> file, which can be changed at
      any later time.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;with-nisip=&lt;IP-Address&gt;</term>
    <listitem>
      <para>This option allows you to specify the value that will be placed
      on then NISIP directive in the configuration file. The default is
      0.0.0.0. No checking is done on the value entered, so you must
      ensure that it is a valid IP address.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;with-net-port=&lt;port&gt;</term>
    <listitem>
      <para>This option allows you to specify what port
      <application>apcupsd</application> will use for Master and Slave
      communications. The default is system dependent but usually 6666.
      This option simply sets the appropriate port in the 
      <filename>apcupsd.conf</filename> file, which can be changed at any
      later time.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;with-upstype=&lt;type&gt;</term>
    <listitem>
      <para>This option allows you to specify the type of UPS that will be
      connected to your computer. The default is: smartups. This
      option simply sets the appropriate UPS type in the
      <filename>apcupsd.conf</filename> file, which can be changed at any later
      time.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;with-upscable=&lt;path&gt;</term>
    <listitem>
      <para>This option allows you to specify what cable you are using to
      connect to the UPS. The default is: smart. This option
      simply sets the appropriate UPS cable in the 
      <filename>apcupsd.conf</filename>
      file, which can be changed at any later time.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>&#x2D;&#x2D;disable-install-distdir</term>
    <listitem>
      <para>This option modifies the <application>apcupsd</application> 
      Makefiles disable installation of the distribution (platform) directory.
      Generally, this used to do a full installation of 
      <application>apcupsd</application> except the
      final modification of the operating system files (normally
      <filename>/etc/rc.d/halt</filename>, etc.). This is useful if your
      operating system is not directly supported by 
      <application>apcupsd</application> or if you want to run two
      copies of <application>apcupsd</application> on the same system.
      This option can also be used by those of you who prefer to manually
      reboot your system after a power failure or who do not want to modify
      your system halt files.</para>
    </listitem>
  </varlistentry>
</variablelist>

</sect1>
<sect1><title>Recommended Options for most Systems</title>

<para>For most systems, we recommend the following options:</para>

<programlisting>
./configure &#x2D;&#x2D;prefix=/usr &#x2D;&#x2D;sbindir=/sbin
</programlisting>

<para>and you can optionally build and install the CGI programs as
follows:</para>

<programlisting>
./configure &#x2D;&#x2D;prefix=/usr &#x2D;&#x2D;sbindir=/sbin \
                  &#x2D;&#x2D;enable-cgi &#x2D;&#x2D;with-cgi-bin=/home/httpd/cgi-bin
</programlisting>

</sect1>
<sect1><title>Compilers and Options</title>

<para>Some systems require unusual options for compilation or linking
that the <command>./configure</command> script does not know about. You can
specify initial values for variables by setting them in the
environment. Using a Bourne-compatible shell, you can do that on
the command line like this:</para>

<programlisting>
CFLAGS=&quot;-O2 -Wall&quot; LDFLAGS= ./configure
</programlisting>

<para>Or on systems that have the <command>env</command> program, 
you can do it like this:</para>

<programlisting>
env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure
</programlisting>

<para>Or for example on the Sun Solaris system, you can use:</para>

<programlisting>
setenv CFLAGS -O2
setenv LDFLAGS -O
./configure
</programlisting>

</sect1>
<sect1 id='OS_Specifics'><title>Operating System Specifics</title>

<para>With the exception of Linux SuSe and Linux Red Hat systems used
by the developers, we rely on users to help create installation
scripts and instructions as well as to test that
<application>apcupsd</application> runs correctly on their system. As
you can imagine, most of these people are system administrators rather
than developers so they are very busy and don't always have time to
test the latest releases.  With that in mind, we believe that you will
find that a lot of very valuable work has been already done to make
your installation much easier (and probably totally automatic).</para>

<para>Below, you will find a list of operating systems for which we
have received installation files:</para>

<itemizedlist>
<listitem><para><link linkend="Alpha">Alpha</link></para></listitem>
<listitem><para><link linkend="Debian">Debian</link></para></listitem>
<listitem><para><link linkend="FreeBSD">FreeBSD</link></para></listitem>
<listitem><para><link linkend="HPUX">HPUX</link></para></listitem>
<listitem><para><link linkend="NetBSD">NetBSD</link></para></listitem>
<listitem><para><link linkend="OpenBSD">OpenBSD</link></para></listitem>
<listitem><para><link linkend="RedHat">Red Hat</link></para></listitem>
<listitem><para><link linkend="Slackware">Slackware</link></para></listitem>
<listitem><para><link linkend="SuSE">SuSE</link></para></listitem>
<listitem><para><link linkend="Solaris">Solaris</link></para></listitem>
<listitem><para><link linkend="unknown">unknown</link></para></listitem>
<listitem><para><link linkend="Win32">Win32</link></para></listitem>
</itemizedlist>

<sect2 id="Alpha"><title>Alpha</title>

<para>The Alpha V4.0 version of <application>apcupsd</application>
builds without compiler errors with gcc version 2.95.2. It is unlikely
that the native Alpha compiler will work because of varargs
differences. Unless you are a system guru, we recommend that you
connect your UPS to the second serial port
<filename>/dev/tty01</filename> to avoid conflicts with the console
device.</para>

<programlisting>
DEVICE /dev/tty01
</programlisting>

<para>In addition, you should ensure serial port lock file in
<filename>apcupsd.conf</filename> is defined as:</para>

<programlisting>
LOCKFILE /var/spool/locks
</programlisting>

<para>Unlike the Linux systems, the system halt routine is located in
<filename>/sbin/rc0</filename>, so after the <command>make
install</command>, please check that this file has been correctly
updated.</para>

<para>The start/stop script can be found in:</para>

<programlisting>
/sbin/init.d/apcupsd
</programlisting>

</sect2>
<sect2 id="Debian"><title>Debian</title>

<para>This port is complete and is operation by several users. Since
Debian build and install procedures are somewhat particular, we have
put the extra Debian information into the following two
subdirectories:
<filename>&lt;src&gt;/distributions/debian/examples/</filename> and
<filename>&lt;src&gt;/distributions/debian/packageinfo</filename></para>

<para>You can also find the official Debian packages on the Debian
site at:</para>

<itemizedlist>
    <listitem><para><ulink url="http://packages.debian.org/stable/admin/apcupsd.html">http://packages.debian.org/stable/admin/apcupsd.html</ulink></para></listitem>
    <listitem><para><ulink url="http://packages.debian.org/testing/admin/apcupsd.html">http://packages.debian.org/testing/admin/apcupsd.html</ulink></para></listitem>
    <listitem><para><ulink url="http://packages.debian.org/unstable/admin/apcupsd.html">http://packages.debian.org/unstable/admin/apcupsd.html</ulink></para></listitem>
</itemizedlist>

</sect2>
<sect2 id="FreeBSD"><title>FreeBSD</title>

<para>This port is complete and is being used by several users. As of
version 3.8.3, we do not recommend that you compile
<application>apcupsd</application> with pthreads enabled. This is
because the current FreeBSD implementation of pthreads runs as a
single process, and thus is less efficient (consumes more CPU time)
than the forking version of <application>apcupsd</application>. We
hope to rectify this in a future version by using the FreeBSD
LinuxThreads implementation of pthreads.</para>

<para>On the FreeBSD OS, there is no known way for a user program to
get control when all the disks are synced. This is needed for
<application>apcupsd</application> to be able to issue the killpower
command to the UPS so that the UPS shuts off the power. To accomplish
the same thing on FreeBSD systems, make sure you have a SmartUPS and
that your UPS shutdown grace period is set sufficiently long so that
you system will power down (usually 2 minutes), the use the
<option>&#x2D;&#x2D;kill-on-powerfail</option> option on the
<application>apcupsd</application> command line.</para>

</sect2>
<sect2 id="HPUX"><title>HPUX</title>

<para>We have no reports from testing this yet on version 3.8.4, but
worked fine on 3.8.1</para>

</sect2>
<sect2 id="NetBSD"><title>NetBSD</title>

<para>Submitted during development of 3.8.2, this should be a complete
distribution.  Please read the comments on the pthreads implementation
in the FreeBSD section above as they may apply equally to OpenBSD.</para>

</sect2>
<sect2 id="OpenBSD"><title>OpenBSD</title>

<para>Ensure that you read the
<filename>distributions/openbsd/README</filename> file before running
apcupsd. There are some critical differences in how the OpenBSD
implementation operates when the UPS batteries are exhausted. Failure
to take this into account may result in the system not being fully
halted when power is lost.  Please read the comments on the pthreads
implementation in the FreeBSD section above as they may apply equally
to OpenBSD.</para>

</sect2>
<sect2 id="RedHat"><title>Red Hat Systems</title>

<para>Red Hat systems are fully supported, and by following the
standard installation instructions given above, you should experience
few or no problems.</para>

</sect2>
<sect2 id="Slackware"><title>Slackware</title>

<para>Slackware systems are fully supported, and by following the
standard installation instructions given above, you should experience
few or no problems.</para>

</sect2>
<sect2 id="SuSE"><title>SuSE</title>

<para>SuSE systems are fully supported, and by following the
standard installation instructions given above, you should experience
few or no problems.</para>

</sect2>
<sect2 id="Solaris"><title>Sun Solaris</title>

<para>Please read this before attempting to compile or install the
beta software. It contains important information that will make your
efforts easier.</para>

<para>If you find bugs, or run into problems that seem to be related
to the version of Solaris that you run, please feel free to contact
the maintainers by email, or through the development mailing
list. We'll attempt to help with problems getting the beta running,
although we can't promise a quick response.</para>

<para>As always, remember testing UPSes can be hazardous to you
system, and, <application>apcupsd</application> <emphasis>may contain
bugs that can damage your system and data files!</emphasis> You must
accept all responsibility for running this software. An unexpected
power-off of a running system can be a disaster. As always, make
backups of any critical information before you install this
software.</para>

<para>Remember, we told you. we'll listen sympathetically if you lose
data, but there will be nothing we can do to help you.</para>

<para>Please read the general installation instructions given above
before continuing on with these Solaris-specific instructions. Then
come back and read this section before attempting to build the
package.</para>

<para>For building the system, we suggest that you run the configure
and make processes as your normal UNIX user ID. The <command>make
install</command> must be run as root. But if your normal ID has an
environment setup for using the C compiler, it's simpler to do that
than to set up root to have the correct environment.</para>

<para>Normally, we support the GCC compiler, but we have also
attempted to support the Solaris workshop compilers and EGCS
compilers. Please be aware that if you do not use GCC, you may
experience a few problems.</para>

<para>Whichever compiler you do have, please insure that you can
execute the compiler from the command line before running
configure. If you do not have an environment setup to run the
compiler first, configure will fail.</para>

<para>Before running <command>./configure</command>, please be sure
that you do not have <filename>/usr/ucb</filename> on your path. This
may cause the <command>./configure</command> to choose the wrong
shutdown program. If <command>./configure</command> detects that
/usr/usb is on your path, it will print a warning message. Please
follow the advice to avoid shutdown problems.</para>

<para>Your normal UNIX user ID must own the source tree directories, and
you must have the normal development tools in your path. This
includes make, the compiler, the M4 preprocessor, the linker, and
ar or ranlib. If the user you are logged in as can compile and link
a C program from a source file, then you have all the required
tools available.</para>

<para>You will want to install the executables in a directory that
remains mounted during the shutdown. Solaris will unmount almost
everything except the root directories. Since the ability to power the
UPS off requires access to the executable programs, they need to be in
a directory that will never be unmounted. And since they should also
be in a directory that normal users cannot get into,
<filename>/sbin</filename> is the default. However, please be aware
that if you want to follow Sun's filesystem conventions you would use
the following:</para>

<programlisting>
./configure \
   &#x2D;&#x2D;prefix=/opt/apcupsd \
   &#x2D;&#x2D;sbindir=/etc/opt/apcupsd/sbin \
   &#x2D;&#x2D;sysconfdir=/etc/opt/apcupsd \
   &#x2D;&#x2D;with-cgi-bin=/opt/apcupsd/cgi-bin
</programlisting>

<para>The way to setup the <filename>/sbin</filename> directory as the
executables directory is to pass configure the <emphasis
role="bold">&#x2D;&#x2D;sbindir=/sbin</emphasis> option. No other arguments
should be required, and your setup and platform should be detected
automatically by configure.</para>

<para>Once you have run configure, you will need to do a
<command>make</command>.  Once the make has completed with no errors,
you must su to root to complete the install. After the su, you may not
have a path to the make program anymore. In that case, you should do
the <command>make install</command> step as:</para>

<programlisting>
/usr/ccs/bin/make install
</programlisting>

<para>Once the install completes, you must edit the /sbin/rc0 script as
detailed below, then exit from the su'ed shell.</para>

<para>In order to support unattended operation and shutdown during a
power failure, it's important that the UPS remove power after the
shutdown completes. This allows the unattended UPS to reboot the
system when power returns by re-powering the system. Of course, you
need autoboot enabled for your system to do this, but all Solaris
systems have this by default. If you have disabled this on your
system, please re-enable it.</para>

<para>To get the UPS to remove power from the system at the correct
time during shutdown, i.e., after the disks have done their final
sync, we need to modify a system script. This script is
<filename>/sbin/rc0</filename>.</para>

<para>We do not have access to every version of Solaris, but we
believe this file will be almost identical on every version. Please
let us know if this is not true.</para>

<para>At the very end of the <filename>/sbin/rc0</filename> script,
you should find lines just like the following:</para>

<programlisting>
# unmount file systems. /usr, /var and /var/adm are not unmounted by umountall
# because they are mounted by rcS (for single user mode) rather than
# mountall.
# If this is changed, mountall, umountall and rcS should also change.
/sbin/umountall
/sbin/umount /var/adm &gt;/dev/null 2&gt;&amp;1
/sbin/umount /var &gt;/dev/null 2&gt;&amp;1
/sbin/umount /usr &gt;/dev/null 2&gt;&amp;1

echo 'The system is down.'
</programlisting>

<para>We need to insert the following lines just before the last 'echo':</para>

<programlisting>
#see if this is a powerfail situation
if [ -f /etc/apcupsd/powerfail ]; then
        echo 
        echo &quot;APCUPSD will power off the UPS&quot;
        echo
        /etc/apcupsd/apccontrol killpower
        echo
        echo &quot;Please ensure that the UPS has powered off before rebooting&quot;
        echo &quot;Otherwise, the UPS may cut the power during the reboot!!!&quot;
        echo
fi
</programlisting>

<para>We have included these lines in a file called
<filename>rc0.solaris</filename> in the distributions/sun subdirectory
of the source tree. You can cut and paste them into the /sbin/rc0 file
at the correct place, or yank and put them using vi or any other
editor. Note that you must be root to edit this file.</para>

<para>You must be absolutely sure you have them in the right place. If
your <filename>/sbin/rc0</filename> file does not look like the lines
shown above, do not modify the file. Instead, email a copy of the file
to the maintainers, and we will attempt to figure out what you should
do. If you mess up this file, the system will not shut down cleanly,
and you could lose data. Don't take the chance.</para>

<para>This feature has only been tested with APC SmartUPS models. If
you do not have a SmartUPS, you will be one of the first testers to
try this feature. Please send email to let us know if it works with
your UPS model, what model you have, and if possible, the event logs
located in <filename>/etc/apcupsd</filename>. We'd be very interested
in your results, and would be glad to work with you to get this
feature working correctly with all the APC models. A detailed
description of the screen output during the shutdown would be very
helpful if you see problems.</para>

<para>You will then need to make the normal changes to the
<filename>/etc/apcupsd/apcupsd.conf</filename> file. This file
contains the configuration settings for the package. It is important
that you set the values to match your UPS model and cable type, and
the serial port that you have attached the UPS to.  People have used both
<filename>/dev/ttya</filename> and <filename>/dev/ttyb</filename> with
no problems. You should be sure that logins are disabled on the port
you are going to use, otherwise you will not be able to communicate
with the UPS. If you are not sure that logins are disabled for the
port, run the 'admintool' program as root, and disable the port. The
'admintool' program is a GUI administration program, and required that
you are running CDE, OpenWindows, or another XWindows program such as
KDE.</para>

<para>Solaris probes the serial ports during boot, and during this
process, it toggles some handshaking lines used by dumb UPSes. As a
result, particularly for simple signalling &quot;dumb&quot; UPSes it seems to
kick it into a mode that makes the UPS think it's either in a
calibration run, or some self-test mode. Since at this point we are
really not communicating with the UPS, it's pretty hard to tell
what happened. But it's easy to prevent this, and you should.
Disconnect the UPS, and boot the system. When you get to a login
prompt, log in as root. Type the following command:</para>

<programlisting>
eeprom com1-noprobe=true
</programlisting>

<para>or</para>

<programlisting>
eeprom com2-noprobe=true
</programlisting>

<para>depending on which com port your UPS is attached to. Then sync and
shutdown the system normally, reattach the UPS, and reboot. This
should solve the problem. However, we have some reports that recent
versions of Solaris (7 &amp; 8) appear to have removed this eeprom
option and there seems to be no way to suppress the serial port
probing during boot.</para>

<para>At this point, you should have a complete installation. The
daemon will load automatically at the next boot. Watch for any error
messages during boot, and check the event logs in
<filename>/etc/apcupsd</filename>. If everything looks OK, you can try
testing the package by removing power from the UPS. NOTE! if you have
a voltage-signalling UPS, please run the first power tests with your
computer plugged into the wall rather than into the UPS. This is
because dumb serial-port UPSes have a tendency to power off if your
configuration or cable are not correct.</para>

<para>As a user, your input is very helpful in solving problems with
the package, and providing suggestions and future directions for the
development of the package. We are striving to provide a useful
package that works across all platforms, and welcome your
feedback.</para>

<para>Best regards, and thanks for your interest and help, The Apcupsd
Development Team.</para>

</sect2>
<sect2 id="unknown"><title>Unknown System</title>

<para>During the <command>./configure</command>, if
<application>apcupsd</application> does not find one of the systems
for which it has specific installation programs, it will set the
Operating System to <emphasis role="bold">unknown</emphasis> and will
use the incomplete installation scripts that are in <filename>
&lt;src&gt;/distributions/unknown/</filename>. You will be
on your own, or you can ask the developers list (apcupsd-users at
lists.sourceforge.net) for installation instructions. This directory also
contains a hint file for <emphasis>Linux From
Scratch</emphasis>, which could be helpful for other systems as
well.</para>

</sect2>
<sect2 id="Win32"><title>Windows Systems with CYGWIN Installed</title>

<para>If you wish to build from the source, and if you have CYGWIN
version 1.3.20 and GCC 2.95.3-5 installed, it is possible to build the
Win32 version of <application>apcupsd</application>. Please don't try
any other versions of CYGWIN as there were known problems.</para>

<para>To date, the Win32 version has only been build on a Win98 SR2
and a WinXP system with the above CYGWIN environment and all the
available CYGWIN tools loaded. In addition, the builds were done
running under the <emphasis role="bold">bash</emphasis> shell. As time
permits, we will experiment with other environments, and if any of you
do build it from source, please let us know. The current CYGWIN
environment was loaded using the CYGWIN setup.exe program, downloading
ALL the latest binaries and installing them.</para>

<para>We recommend that you run the <command>./configure</command>
command with the following options:</para>

<programlisting>
./configure \
  &#x2D;&#x2D;prefix=/apcupsd \
  &#x2D;&#x2D;sbindir=/apcupsd/bin \
  &#x2D;&#x2D;sysconfdir=/apcupsd/etc/apcupsd \
  &#x2D;&#x2D;with-pid-dir=/apcupsd/etc/apcupsd \
  &#x2D;&#x2D;mandir=/apcupsd \
  &#x2D;&#x2D;with-cgi-bin=/apcupsd/etc/apcupsd/cgi \
  &#x2D;&#x2D;enable-pthreads
</programlisting>

  <para>After which, you can do a:</para>

<programlisting>
make
</programlisting>

  <para>And to install <application>apcupsd</application>, do:</para>

<programlisting>
make install
</programlisting>

<para>Finally, you should follow the <link
linkend='win32'>Win32</link> installation instruction, skipping the
part that describes unZipping the binary release.</para>

</sect2>
</sect1>

</chapter>
<chapter id='after_installation'><title>After Installation</title>

<sect1><title>Checking Your Configuration File</title>

<para>Once you have installed <application>apcupsd</application>, either
from a binary package or by building from source, your next step
should be to inspect your <filename>/etc/apcupsd/apcupsd.conf</filename>
file to make sure it is valid.</para>

<para>You can read a complete <link
linkend='directive_reference'>reference on configuration
directives</link>, but if you are setting up a normal standalone 
configuration you should only need to check (and possibly fix) the
first three.</para>

<para>Your UPSTYPE should be the UPS's protocol type: dumb, apcsmart,
usb, net, or snmp.  Your UPSCABLE should be the type of cable you are
using.  You should have gotten both from the <link
linkend='type_table'>table of types</link>; usually they will both
be the string "usb".</para>

<para>Your DEVICE should be the name of the device (or device range)
that <application>apcupsd</application> is to use to communicate with
the UPS.  If you're using a USB UPS under Linux, you may leave
the device name field blank and <application>apcupsd</application>
will search all the standard locations for the UPS. You
may also explicitly specify the device location as
either <filename>/dev/usb/hid/hiddev[0-15]</filename> (on non-Red-Hat
systems) or <filename>/dev/usb/hiddev[0-15]</filename> (on Red Hat
systems).</para>

</sect1>
<sect1 id='autoboot'><title>Arranging for Reboot on Power-Up</title>

<para>The final consideration for a automatic reboot after a full
power down is to ensure that your computer will automatically reboot
when the power is restored.</para>

<para>This is not the normal behavior of most computers as shipped
from the factory. Normally after the power is cut and restored, you
must explicitly press a button for the power to actually be turned
on. You can test your computer by powering it down; shutting off the
power (pull the plug); then plugging the cord back in. If your
computer immediately starts up, good. There is nothing more to
do.</para>

<para>If your computer does not start up, manually turn on the
power (by pressing the power on button) and enter your computer's
SETUP program (often by pressing DEL during the power up sequence;
sometimes by pressing F10). You must then find and change the
appropriate configuration parameter to permit instant power
on.</para>

<para>Normally, this is located under the <emphasis
role="bold">BOOT</emphasis> menu item, and will be called something
such as <emphasis role="bold">Restore on AC/Power Loss</emphasis> or
<emphasis role="bold">Full-On</emphasis>. The exact words will vary
according to the ROM BIOS provider. Generally you will have three
options: <emphasis role="bold">Last State</emphasis>, <emphasis
role="bold">Power On</emphasis>, and <emphasis role="bold">Power
Off</emphasis>. Although <emphasis role="bold">Last State</emphasis>
should normally work, we recommend setting your computers to <emphasis
role="bold">Power On</emphasis>. This means that whenever the power is
applied they are on. The only way to shut them off is to pull the plug
or to have a special program that powers them off
(<filename>/sbin/poweroff</filename> on Linux systems).</para>

<para>If after making all the changes suggested above, you cannot get
your computer to automatically reboot, you might examine your halt
script (<filename>/etc/rc.d/init.d/halt</filename> in the case of
Red Hat Linux) and see if the final line that performs the halt or
reboot contains the <option>-p</option> option for powering down the
computer. It should not with the logic used by
<application>apcupsd</application>, but if it does, the
<option>-p</option> option could cause your computer to power off
while the UPS is still suppling power (i.e. before the UPS kills the
power).  Depending on the setting of your BIOS, it may prevent your
computer from restarting when the power returns. As already mentioned,
this should not apply, but in case of problems it is worth a
try.</para>

</sect1>
<sect1><title>Making Sure <application>apcupsd</application> Is Running</title>

<para>The simplest way to invoke <application> apcupsd</application>
is from the command line by entering:</para>

<programlisting>
/sbin/apcupsd
</programlisting>

<para>To do so, you must be root. However, normally, you will want
<application>apcupsd</application> started automatically when your
system boots. On some systems with installation support (e.g. SuSE
and Red Hat), the installation procedure will create a script file that
you will be automatically invoked when your system reboots. On other
systems, you will have to invoke <application>apcupsd</application>
from your <filename>rc.local</filename> script.</para>

<para>On Red Hat systems, this script file that automatically invokes
<application>apcupsd</application> on system start and stops is:
<filename>/etc/rc.d/init.d/apcupsd</filename></para>

<para>To start <application>apcupsd</application> manually (as you
will probably do immediately following the installation), enter the
following:</para>

<programlisting>
/etc/rc.d/init.d/apcupsd start
</programlisting>

<para>To understand how this file is automatically invoked at system
startup and shutdown, see the man pages for <citerefentry>
<refentrytitle>chkconfig</refentrytitle> <manvolnum>8</manvolnum>
</citerefentry>.</para>

<para>On SuSE systems, the script file that automatically invokes
<application>apcupsd</application> on system start and stops is
<filename>/etc/rc.d/apcupsd</filename></para>

<para>To start <application>apcupsd</application> manually (as you
will probably do immediately following the installation), enter the
following:</para>

<programlisting>
/etc/rc.d/apcupsd start
</programlisting>

<para>Normally, when properly installed,
<application>apcupsd</application> will be started and stopped
automatically by your system. Unfortunately, the details are different
for each system. Below, we give the commands for selected
systems. Alternatively, there are simple
<application>stopapcupsd</application> and
<application>startapcupsd</application> scripts in the examples
directory, or you can modify one of the scripts in the distributions
directory to meet your needs.</para>

<para>To stop <application>apcupsd</application> you can do the
following:</para> 

<para>On Red Hat systems:</para>

<programlisting>
/etc/rc.d/init.d/apcupsd stop
</programlisting>

<para>On SuSE systems:</para>

<programlisting>
/etc/rc.d/apcupsd stop
</programlisting>

</sect1>
</chapter>
<chapter id='testing'><title>Testing <application>apcupsd</application></title>

<para>The following testing procedures apply for the most part to
apcsmart UPSes, whether USB or serial. If you have a dumb
voltage-signalling UPS, your testing procedures will be somewhat
different, and you should see the section on <link
linkend='dumb_testing'>Testing Serial UPSes</link>.</para>

<sect1><title>Process-Status Test</title>

<para>After you start <application>apcupsd</application>, execute the
following command:</para>

<programlisting>
ps fax
</programlisting>

<para>or the equivalent for your system. If you are running on Linux
and using the fork()ing version of apcupsd, you should something
similar to the following output.</para>

<programlisting>
4492 ?        S      0:00 apcmain       -f /etc/apcupsd/apcupsd.conf
4496 ?        S      0:00  \_ apcser        -f /etc/apcupsd/apcupsd.conf
4497 ?        S      0:00  \_ apcnis        -f /etc/apcupsd/apcupsd.conf
</programlisting>

<para>This indicates that <application>apcupsd</application> is up and
running and has started the two (default) child processes.</para>

<variablelist>
  <varlistentry>
    <term>apcmain</term>
    <listitem>
      <para>is the main program that waits until it receives a termination
      signal (SIGTERM) or one of the child processes dies.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>apcser</term>
    <listitem>
      <para>is the process that manages the serial port and takes any
      actions (generates events) that are necessary as a result of a
      change of state of the UPS.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>apcnis</term>
    <listitem>
      <para>is the Network information server process that provides EVENTS
      and STATUS information over the network. This information is used
      by the CGI programs.</para>
    </listitem>
  </varlistentry>
</variablelist>

<para>If you are running on a non-Linux system, or using pthreads on a
Linux system (recommended), your output will probably not show the
names of the processes and will appear more like the following:</para>

<programlisting>
632 ?        S      0:00 /sbin/apcupsd -f /etc/apcupsd/apcupsd.conf
841 ?        S      0:00  \_ /sbin/apcupsd -f /etc/apcupsd/apcupsd.conf
842 ?        S      0:00      \_ /sbin/apcupsd -f /etc/apcupsd/apcupsd.conf
</programlisting>

<para>If you see only one instance of
<application>apcupsd</application> running, don't worry about it
unless the communication test fails.</para>

</sect1>
<sect1><title>Logging Test</title>

<para>Once you have established that the proper processes are running,
do a tail of the system log file, normally
<filename>/etc/var/messages</filename>:</para>

<programlisting>
tail /etc/var/messages
</programlisting>

<para>You should see output that looks similar to the following:</para>

<programlisting>
Dec 5 17:01:05 matou apcupsd[5917]: apcupsd 3.7.2
startup succeeded
</programlisting>

<para>And if you have configured the network information server, you
should also see:</para>

<programlisting>
Dec 5 17:01:05 polymatou apcupsd[5975]: apcserver
startup succeeded
</programlisting>

<para>These messages should also appear in the temporary file
(<filename>/etc/apcupsd/apcupsd.events</filename>) if you are using
the default configuration file.</para>

</sect1>
<sect1><title>apcaccess Test</title>

<para>This test consists of running <command>apcaccess</command> to
see if <application>apcupsd</application> is properly updating its
internal variables. Please note that if you are running a pthreaded
version of <application>apcupsd</application> (installed from rpm or
<option>--enable-pthreads</option> on the
<command>./configure</command> line), you must enable the
<application>apcupsd</application> Network Information Server in your
configuration file for <emphasis role="bold">apcaccess</emphasis> to
work.</para>

<para>To run the apcaccess test, use the following command:</para>

<programlisting>
apcaccess status
</programlisting>

<para>Depending on the type of UPS you have, you will get slightly
different output, but an example For a Smart-UPS is as follows:</para>

<programlisting>
APC      : 001,048,1088
DATE     : Fri Dec 03 16:49:24 EST 1999
HOSTNAME : daughter
RELEASE  : 3.7.2
CABLE    : APC Cable 940-0024C
MODEL    : APC Smart-UPS 600
UPSMODE  : Stand Alone
UPSNAME  : SU600   
LINEV    : 122.1 Volts
MAXLINEV : 123.3 Volts
MINLINEV : 122.1 Volts
LINEFREQ : 60.0 Hz
OUTPUTV  : 122.1 Volts
LOADPCT  :  32.7 Percent Load Capacity
BATTV    : 26.6 Volts
BCHARGE  : 095.0 Percent
MBATTCHG : 15 Percent
TIMELEFT :  19.0 Minutes
MINTIMEL : 3 Minutes
SENSE    : Medium
DWAKE    : 000 Seconds
DSHUTD   : 020 Seconds
LOTRANS  : 106.0 Volts
HITRANS  : 129.0 Volts
RETPCT   : 010.0 Percent
STATFLAG : 0x08 Status Flag
STATUS   : ONLINE 
ITEMP    : 34.6 C Internal
ALARMDEL : Low Battery
LASTXFER : Unacceptable Utility Voltage Change
SELFTEST : NO
STESTI   : 336
DLOWBATT : 05 Minutes
DIPSW    : 0x00 Dip Switch
REG1     : N/A
REG2     : N/A
REG3     : 0x00 Register 3
MANDATE  : 03/30/95
SERIALNO : 13035861
BATTDATE : 05/05/98
NOMOUTV  : 115.0
NOMBATTV :  24.0
HUMIDITY : N/A
AMBTEMP  : N/A
EXTBATTS : N/A
BADBATTS : N/A
FIRMWARE : N/A
APCMODEL : 6TD
END APC  : Fri Dec 03 16:49:25 EST 1999
</programlisting>

<para>For a simple signaling or dumb UPS such as BackUPS, your output
will be very minimal as follows:</para>

<programlisting>
APC      : 001,012,0319
DATE     : Mon Feb 18 09:11:50 CST 2002
RELEASE  : 3.8.5
UPSNAME  : UPS_IDEN
CABLE    : APC Cable 940-0128A
MODEL    : BackUPS
UPSMODE  : Stand Alone
STARTTIME: Mon Feb 18 09:11:45 CST 2002
LINEFAIL : OK
BATTSTAT : OK
STATFLAG : 0x008 Status Flag
END APC  : Mon Feb 18 09:15:01 CST 2002
</programlisting>

<para>If you see the above output, it is a good sign that
<application>apcupsd</application> is working. Assuming that the output looks
reasonable, check the following variables:</para>

<variablelist>
  <varlistentry>
    <term>LINEV</term>
    <listitem>
      <para>This is the line voltage and it should be a value that is
      appropriate for your equipment. In the USA, it is typically about
      120 Volts while in Europe, it is about 220 Volts.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>BATTV</term>
    <listitem>
      <para>Unless you have additional battery packs, this should be near
      24 Volts plus or minus 5 Volts.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>STATUS</term>
    <listitem>
      <para>This is the status of the UPS and it should normally be
      <emphasis role="bold">ONLINE</emphasis>.</para>
    </listitem>
  </varlistentry>
</variablelist>

<para>If you see a message to the effect of:</para>

<programlisting>
attach_shmarea: shared memory version mismatch (or UPS not yet ready to report)
</programlisting>

<para>or if all the displayed values are zero, you have not waited
long enough. Wait a bit longer and then re-execute the
<command>apcaccess status</command> command.</para>

<para>If you see a message to the effect of:</para>

<programlisting>
APCACCESS FATAL ERROR in apcaccess.c at line 336
tcp_open: cannot connect to server localhost on port 3551.
</programlisting>

<para>It means that you have probably not enabled NIS in
<application>apcupsd</application>.</para>

</sect1>
<sect1><title>Communications Test</title>

<para>At this point, you should ensure that
<application>apcupsd</application> is handling the connection to the
UPS correctly. This test assumes you have a UPS that speaks apcsmart
protocol, over either USB or a serial port.  If you have an old-style
voltage-signaling UPS, please skip to the next section (Simulated
Power Fail Test).</para>

<para>When <application>apcupsd</application> detects a problem, it
generates an EVENT, which consists of sending a message to the system
log then invoking the <emphasis role="bold">apccontrol</emphasis>
script (normally in <filename>/etc/acpupsd/apccontrol</filename>) to
handle the event.</para>

<para>In order to create an event, remove the serial port plug from
the back of your computer or from the back of the UPS. Within 6
seconds, <application>apcupsd</application> should detect the lack of
serial port communications and broadcast a <command>wall</command>
message indicating that the serial port communications was
lost:</para>

<para>Warning communications lost with UPS lost.</para>

<para>At the same time, it sends the same message to the system log
and to the temporary EVENTS file
(<filename>/etc/apcupsd/apcupsd.events</filename>).</para>

<para>Plug the serial port plug back into your computer, and within
about 12 seconds, <application>apcupsd</application> should
reestablish communications and broadcast and log the following
message:</para>

<para>Communications with UPS restored.</para>

<para>If these messages are logged but not broadcast, either you have
your <application>mesg</application> permission set to
<emphasis>no</emphasis> (see <emphasis role="bold">man
wall</emphasis>) or there is a problem with
<application>apccontrol</application>. If you are running a window
manager such as GNOME and don't have a console window open, you may
not receive the <command>wall</command> messages. However, you should
find them in your system log file (normally
<filename>/var/log/messages</filename> and in the temporary EVENTS
file, <filename>/etc/apcupsd/apcupsd.events</filename>. For example,
to observe these events in the temporary EVENTS file, you might do
a</para>

<programlisting>
tail -f /etc/apcupsd/apcupsd.events
</programlisting>

<para>before running the test.</para>

<para>If you do not observe these messages, you should correct this
problem before proceeding with additional tests.</para>

</sect1>
<sect1><title id="PowerFailSimulation">Simulated Power Fail Test</title>

<para>At this point, you should verify that in the event of a power
fail <application>apcupsd</application> properly calls
<application>apccontrol</application>. This test is appropriate for
all models of UPSes (smart or dumb).</para>

<para>To avoid the possibility that <application>apcupsd</application>
might shut down your system, locate where
<application>apccontrol</application> resides on your system
(normally, <filename>/etc/apcupsd/apccontrol</filename>. Move this
script to another location e.g. <filename>apccontrol.save</filename>
and replace it with the script found in
<filename>examples/safe.apccontrol</filename>. When that is done,
ensure that your UPS battery is fully charged and that you have at
least 5 minutes of remaining runtime on the batteries. This can be
done by examining the values of the <emphasis
role="bold">BATTCHG</emphasis> and <emphasis
role="bold">TIMELEFT</emphasis> variables in the printout of
<command>apcaccess status</command>.</para>

<para>Athough this should not be necessary, as an extra precaution,
you can shutdown your machine, remove the plug from the UPS you are
testing, and plug your machine into another UPS or directly into the
wall. Doing so, will ensure that the UPS doesn't cut the power to your
machine at a bad time. Remember at the end of the testing to plug your
machine back into the UPS.</para>

<para>You can also minimize the risk from an unexpected shutdown by
using a journaling filesystem such as Linux's EXT3.  All modern disk
drives park themselves safely when they power down, rather than ploughing
up oxide on your disk's recording surface.  Thus, unexpected power less 
has to hit very narrow timing windows in order to trash an EXT3 
transaction.</para>

<para>To begin the test, pull the power plug from the UPS. The first
time that you do this, psychologically it won't be easy, but after you
have pulled the plug a few times, you may even come to enjoy it. If
all goes well, <application>apcupsd</application> should detect the
power failure and print several warning messages. The first should
appear after 5 to 6 seconds and read:</para>

<programlisting>
Warning power loss detected.
</programlisting>

<para>Then generally 6 seconds later,
<application>apcupsd</application> is sure that it isn't a transient
effect, so it sends:</para>

<programlisting>
Power failure. Running on UPS batteries.
</programlisting>

<para>After a few more seconds (total around 15 seconds), plug the
power cord back in and ensure that <application>apcupsd</application>
is aware that the power has returned. It should print:</para>

<programlisting>
Power has returned...
</programlisting>

<para>If you do not observe the above messages, please correct the
situation before proceeding. The most likely cause of problems
are:</para>

<itemizedlist>
  <listitem>
    <para><application>apcupsd</application> doesn't recognize the
    power failure because the configuration directives are not
    correct. E.g. wrong cable.</para>
  </listitem>
  <listitem>
    <para>The file <filename>/etc/apcupsd/apccontrol</filename> doesn't 
    exist or is not marked as executable.</para>
  </listitem>
</itemizedlist>

<para>At this point, we recommend that you do a simulated power down
of your system. If you are adventuresome or have been through this
before, skip to the next section in this manual and do the real power
fail shutdown. If you continue with the simulated power down and if
all goes well, <application>apcupsd</application> will go through all
the motions without actually shutting down the system. Continue using
the safe <application>apccontrol</application> that you
installed. Edit the configuration file <filename>apcupsd</filename>
and change the value of <emphasis role="bold">TIMEOUT</emphasis> from
0 to something like 30. Doing so will cause
<application>apcupsd</application> to attempt to shutdown the system
30 seconds after it detects a power failure. Once this change has been
made, you must stop and restart <application>apcupsd</application> for
the new configuration value to take effect.</para>

<para>Once again, pull the power plug, and if all goes as expected,
<application>apcupsd</application> should attempt to shutdown the
system about 30 seconds after it detects the power failure. All the
messages should be displayed by <command>wall</command> or by the
<command>tail -f</command> command. The precise message is determined
by what is printed in <filename>/etc/apcupsd/apccontrol</filename> for
the <emphasis role="bold">doshutdown</emphasis> event.  Though it
varies from system to system, it will generally be something
like:</para>

<programlisting>
Beginning Shutdown Sequence
</programlisting>

<para>When <application>apcupsd</application> this message prints,
reconnect the power.  <application>apcupsd</application> should detect
that the power has been restored and attempt to cancel the
shutdown.</para>

<para><emphasis role="bold">IMPORTANT</emphasis> after this test,
please replace the changed <application>apccontrol</application> and
<filename>apcupsd.conf</filename> with the original files.</para>

</sect1>
<sect1><title>System Shutdown Test</title>

<para>This is an intermediate test that you can do, for all UPS models
before doing the Full Power Down Test. First modify the
<filename>/etc/apcupsd/apccontrol</filename> file so that in the
<emphasis role="bold">killpower)</emphasis> case, the line that
re-executes <application>apcupsd</application> with the
<option>--killpower</option> option is commented out. The original
line probably looks something like:</para>

<programlisting>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;${APCUPSD} --killpower
</programlisting>

<para>when it is commented out, it looks like:</para>

<programlisting>
#&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;${APCUPSD}--killpower
</programlisting>

<para>Now when you pull the power plug, and either the timer expires
or the batteries are exhausted (see the next section for more
details), the system should be fully shutdown.</para>

<para>After performing this test, please be sure to restore
<filename>/etc/apcupsd/apccontrol</filename> to its previous
state.</para>

</sect1>
<sect1><title>Full Power Down Test</title>

<para>To complete the testing, you should do a power fail shutdown of
your system. This test is applicable to all UPS models. Please do a
backup of your system or take other precautions before attempting this
to avoid the possibility of lost data due to a problem (I have been
through this at least 10 times and never once had problems, but we all
know that someday something will go wrong).</para>

<para>Before proceeding, please ensure that your halt script or the
equivalent has been properly updated by the install process to contain
the logic to call <command>apcupsd --killpower</command> when it
detects a power failure situation (the presence of a
<filename>/etc/powerfail</filename> file). See the <xref
linkend="build_install"/> of this manual, or the README files for
additional details about the halt modifications necessary.</para>

<para>When you are ready to do the test, either simply pull the plug
and wait for the batteries to become exhausted, or set the <emphasis
role="bold">TIMEOUT</emphasis> configuration directive to something
like 60 so that the system will shutdown before the batteries are
exhausted. We recommend doing the full shutdown without using
<emphasis role="bold">TIMEOUT</emphasis> to correctly simulate a real
power failure, but the choice is yours (I did it once here, but now
use TIMEOUT 30).</para>

<para>If all goes well, your system should be shutdown before the
batteries are completely exhausted and the UPS should be powered off
by <application>apcupsd</application>. Please be aware that if you do
the full power down, you must ensure that your UPS is totally powered
off.  Otherwise, it may have been given the command to power off, but
due to a long grace period it is still waiting. If you were to reboot
your computer during the grace period, the UPS could then suddenly
turn off the power (this happened to me). To avoid this problem,
always wait for your UPS to power itself off, or power if off manually
before restarting your computer. On my system, the UPS is configured
as at the factory to have a 180 second grace period before shutting
off the power. During this type of testing, 180 seconds <emphasis
role="bold">seems</emphasis> like an eternity, so please take care to
either wait or manually power off your UPS. To determine what grace
period is programmed into your UPS EEPROM, run <command>apcaccess
eprom</command> and look at the &quot;Shutdown grace
delay&quot;.</para>

</sect1>
<sect1><title id="ShutdownSequence">Shutdown Sequence</title>

<para>If you experienced so problems with the above testing
procedures, or if you are porting <application>apcupsd</application>
to another system, or you are simply curious, you may want to know
exactly what is going on during the shutdown process. If so, please
see the <link linkend='shutdown'>Shutdown Sequence</link> section of
this manual.</para>

</sect1>
<sect1 id='usb_apctest'><title>apctest</title>

<para><application>apctest</application> is a program that allows you
to talk directly to your UPS and run certain low-level tests, 
display all know values from the UPS's EEPROM, perform a 
battery runtime calibration, program the EEPROM (serial
connection only), and enter in TTY mode with the UPS. Here we
describe how to use it for a USB or apcsmart UPS; see <xref
linkend='serial_apctest'/> for a description of how to use it
with a voltage-signalling UPS.</para>

<para>Shutdown <application>apcupsd</application> if it is running.
Make sure your <emphasis
role="bold">/etc/apcupsd/apcupsd.conf</emphasis> file has <emphasis
role="bold">UPSTYPE smart</emphasis> and <emphasis
role="bold">UPSCABLE</emphasis> has one of the smart cables that are
supported.</para>

<para>Normally <application>apctest</application> will have been built
but not installed, so you must execute it from the
<filename>&lt;bacula-source&gt;/src</filename> directory. You can
explicitly build it on Unix with:</para>

<programlisting>
cd &lt;apcupsd-source-directory&gt;
make apctest
./apctest
</programlisting>

<para>or on Windows systems with: </para>

<programlisting>
make apctestwin32
./apctest
</programlisting>

<para>It will read your installed apcupsd.conf configuration
(so it knows where to find the UPS) and then
it will present you with the following output:</para>


<programlisting>
2003-07-07 11:19:21 apctest 3.10.6 (07 July 2003) redhat
Checking configuration ...
Attached to driver: apcsmart
sharenet.type = DISABLE
cable.type = CUSTOM_SMART

You are using a SMART cable type, so I'm entering SMART test mode
mode.type = SMART
Setting up serial port ...
Creating serial port lock file ...
Hello, this is the apcupsd Cable Test program.
This part of apctest is for testing Smart UPSes.
Please select the function you want to perform.

1) Query the UPS for all known values
2) Perform a Battery Runtime Calibration
3) Abort Battery Calibration
4) Monitor Battery Calibration progress
5) Program EEPROM
6) Enter TTY mode communicating with UPS
7) Quit

Select function number: 1

</programlisting>

<para>Item 1 will probe the UPS for all values known to
<application>apcupsd</application> and present them in rather raw
format. This output can be useful for providing technical support if
you are having problems with your UPS.</para>

<para>Item 2 will perform a Battery Runtime Calibration. This test
will only be performed if your battery is 100% charged. Running the
test will cause the batteries to be discharged to approximately 30% of
capacity. The exact number depends on the UPS model. In any case,
<application>apctest</application> will abort the test if it detects
that the battery charge is 20% or less.</para>

<para>The advantage of doing this test is that the UPS will be able to
recalibrate the remaining runtime counter that it maintains in its
firmware. As your batteries age, they tend to hold less of a
charge, so the runtime calibration may not be accurate after
several years.</para>

<para>We recommend that perform a Battery Calibration about once a
year. You should not perform this calibration too often since
discharging the batteries tends to shorten their lifespan.</para>

<para>Item 3 can be used to abort a Battery Calibration in progress,
if you some how became disconnected.</para>

<para>Item 4 can be used to restart the monitoring of a Battery
Calibration if you should some how become disconnected during the
test.</para>

<para>Item 5 is used to program the EEPROM. Please see the <xref linkend="eprom"/> chapter of this manual for
the details.</para>

<para>Item 6 will initiate a direct communication between your
terminal and the UPS at which point, you can enter raw UPS
commands. Please be aware that you should be careful what commands you
enter because you can cause your UPS to suddenly shutdown, or you can
modify the EEPROM in a way to disable your UPS. The details of the raw
Smart mode UPS commands can be found in the <link
linkend="upsbible">UPS Bible</link> chapter of this manual.</para>

<para>Item 7 will terminate <application>apctest</application>.</para>
</sect1>

</chapter>
<chapter id='troubleshooting'><title>Troubleshooting Your Installation</title>

<sect1><title>Known Problems with USB UPSes</title>

<sect2><title>Reconnection does not clean up the lockfile</title>

<para>If either you disconnect the UPS or it disconnects because of
some electrical problem, it will most certainly reconnect with a
different device number. Apcupsd will detect this and reconnect
properly. However, <application>apcupsd</application> does not release
the old device (USB port) lock file and create a new one. This is
not too serious.</para>

</sect2>
<sect2><title>Power Off (killpower) of UPS Does Not Work</title>

<para>Currently (as of 3.10.6) the code to power off the UPS works
only if you have a Linux kernel version 2.4.22 or greater, or
you have applied the patches in the examples directory to your
kernel.</para>

</sect2>
<sect2><title><application>apcupsd</application> Cannot Reconnect
After a Reboot</title>

<para>If <application>apcupsd</application> does not connect to the
USB port when you reboot, it is probably the appropriate kernel
modules are not getting loaded correctly.</para>

<para>You can check this by bringing up your system, fiddling around
until you get <application>apcupsd</application> to work with the UPS,
then doing <command>cat /proc/modules</command> andnd save the output
some place. Then reboot your computer and before you do anything else,
do the <command>cat /proc/modules</command> again. Most likely you
will find some of the usb modules are missing in the second listing.</para>

<para>There are two solutions:</para>

<itemizedlist>
<listitem>
  <para>Ensure that you have the hotplug program loaded. It should fix
  the problem. This is a bit of magic, so we are not exactly sure how
  it works. The rpm I (Kern) have loaded is: hotplug-2001_02_14-15</para>

  <para>You might want to read the man page on hotplug, and it might
  be necessary to <command>cp /etc/hotplug/usb.rc
  /etc/init.d/hotplug</command> to get it fully working.</para>
</listitem>
<listitem>

  <para>You can explicitly force the appropriate usb modules to be
  loaded by adding:</para>

<programlisting>
/sbin/modprobe &lt;missing-module-name&gt;
</programlisting>

  <para>in the <filename>/etc/rc.d/init.d/apcupsd</filename> script
  just after the <emphasis role="bold">start)</emphasis> case (at about
  line 17). This will force the modules to be loaded before apcupsd is
  invoked.</para>
</listitem>
</itemizedlist>

</sect2>
</sect1>
</chapter>
<chapter id='monitoring'><title>Monitoring and Tuning your UPS</title>

<para>After you have verified that your UPS is working correctly, you 
will probably want to query the state of its health occasionally.
The tools <application>apcupsd</application> gives you to do this 
include one command-line utility (<application>apcaccess</application>) 
and a GUI you can use through a Web browser.  You can also use
<application>apctest</application> to tune some parameters of the UPS 
itself.</para>

<sect1><title>apcaccess</title>

<para><application>apcaccess</application> is a program (normally found
in <filename>/sbin/apcaccess</filename>) that permits you to print out
the complete status of your UPS. Although there are a number of
command line arguments (<emphasis role="bold">eprom, reconfig,
status, slave, shutdown</emphasis>), all except <emphasis
role="bold">eprom</emphasis> and <emphasis
role="bold">status</emphasis> are under development and hence do not
work reliably.</para>

<para>If you have built <application>apcupsd</application> with
pthreads enabled (default), <application>apcaccess</application> will use the
Network Information Server to obtain the necessary information for the
<emphasis role="bold">status</emphasis> and <emphasis
role="bold">eeprom</emphasis> commands. This is because in the
pthreaded version, there is no IPC shared memory. In this case
(pthreads enabled), you can specify a second optional argument to
<application>apcaccess</application> in the form of host:port, where
the :port is optional. The default is <emphasis
role="bold">localhost:3551</emphasis>. Please note that in versions
prior to 3.10.6, the default NIS port was 7000, so if you are mixing
versions, you will need to take a lot of care to ensure that all
components are using the same port.</para>

<sect2><title>apcaccess status</title>

<para>The <emphasis role="bold">status</emphasis> command line option
of <application>apcaccess</application> will produce a full printout
of all the <emphasis role="bold">STATUS</emphasis> variables used by
<application>apcupsd</application>. This can be very helpful for
checking the condition of your UPS and to know whether or not
<application>apcupsd</application> is properly connected to it. For a
complete description of the variables and their meanings, please read
the <link linkend='statusformat'>Status Format</link> section of the
Technical Reference.</para>

<para>Please note that if you invoke
<application>apcaccess</application> within the first 30 seconds of
launching <application>apcupsd</application>, you will likely get an
error message such as:</para>

<programlisting>
APCACCESS FATAL ERROR in apcipc.c at line 325
attach_shmarea: shared memory version mismatch
</programlisting>

<para>This is because <application>apcupsd</application> is still in
the process of initializing the shared memory segment used to
communicate between the two processes. There is also a small window of
time after which the memory segment is properly initialized but before
the UPS has been completely polled. If you invoke
<application>apcaccess</application> during this period, you will get
the STATUS output, but with many of the values zero. The solution is
to wait at least 30 seconds after starting
<application>apcupsd</application> before launching
<application>apcaccess</application>.</para>

<para>To invoke apcaccess, enter:</para>

<programlisting>
apcaccess status
</programlisting>

<para>For a SmartUPS 1000 <application>apcaccess</application> will
emit the following output:</para>

<programlisting>
DATE     : Fri Dec 03 12:34:26 CET 1999
HOSTNAME : matou
RELEASE  : 3.7.0-beta-1
CABLE    : Custom Cable Smart
MODEL    : SMART-UPS 1000
UPSMODE  : Stand Alone
UPSNAME  : UPS_IDEN
LINEV    : 232.7 Volts
MAXLINEV : 236.6 Volts
MINLINEV : 231.4 Volts
LINEFREQ : 50.0 Hz
OUTPUTV  : 232.7 Volts
LOADPCT  :  11.4 Percent Load Capacity
BATTV    : 27.7 Volts
BCHARGE  : 100.0 Percent
MBATTCHG : 5 Percent
TIMELEFT : 112.0 Minutes
MINTIMEL : 3 Minutes
SENSE    : Low
DWAKE    : 060 Seconds
DSHUTD   : 180 Seconds
LOTRANS  : 204.0 Volts
HITRANS  : 253.0 Volts
RETPCT   : 050.0 Percent
STATFLAG : 0x08 Status Flag
STATUS   : ONLINE 
ITEMP    : 29.2 C Internal
ALARMDEL : Low Battery
LASTXFER : U command or Self Test
SELFTEST : NO
STESTI   : 336
DLOWBATT : 02 Minutes
DIPSW    : 0x00 Dip Switch
REG1     : 0x00 Register 1
REG2     : 0x00 Register 2
REG3     : 0x00 Register 3
MANDATE  : 01/05/99
SERIALNO : GS9902009459
BATTDATE : 01/05/99
NOMOUTV  : 230.0
NOMBATTV :  24.0
HUMIDITY : N/A
AMBTEMP  : N/A
EXTBATTS : 0
BADBATTS : N/A
FIRMWARE : 60.11.I
APCMODEL : IWI
END APC  : Fri Dec 03 12:34:33 CET 1999
</programlisting>

</sect2>
<sect2><title>apcaccess eprom</title>

<para>The <emphasis role="bold">eprom</emphasis> command line option
for <application>apcaccess</application> allows you to examine the
current values of your UPS' EPROM as well as to know the permitted
values that can be set in the EPROM. For information about changing
these values, see the section on <link linkend='eeprom'>tuning EEPROM
parameters</link>.</para>

<para>A typical output from <command>apcaccess eprom</command> is:</para>

<programlisting>
Valid EPROM values for the SMART-UPS 1000

                       Config        Current  Permitted
Description              Directive     Value    Values
===================================================================
Upper transfer voltage   HITRANSFER    253      253 264 271 280 
Lower transfer voltage   LOTRANSFER    208      196 188 208 204 
Return threshold         RETURNCHARGE  15       00 15 50 90 
Output voltage on batts  OUTPUTVOLTS   230      230 240 220 225 
Sensitivity              SENSITIVITY   H        H M L L 
Low battery warning      LOWBATT       2        02 05 07 10 
Shutdown grace delay     SLEEP         180      020 180 300 600 
Alarm delay              BEEPSTATE     T        0 T L N 
Wakeup delay             WAKEUP        60       000 060 180 300 
Self test interval       SELFTEST      336      336 168 ON  OFF 
</programlisting>
</sect2>
</sect1>

<sect1><title><application>hid-ups</application> and USB Specific Information</title>

<para>The UPS has an internal set of timers and remaining capacity
counters, which it uses to determine when to shutdown. These are in
addition to the <application>apcupsd</application> counters
BATTERYLEVEL and MINUTES.  As a consequence,
<application>apcupsd</application> will shutdown on the first limit
that triggers (either an <application>apcupsd</application> limit, or
a UPS limit). The UPS internal counter equivalent to BATTERYLEVEL can
be found in the <application>hid-ups</application> report as
RemainingCapacityLimit, which is typically factory set to 10
percent. In addition, the Low Battery signal is normally given by the
UPS when less than 2 minutes of run time remain.</para>

</sect1>
<sect1 id='cgiprogs'><title><application>apcupsd</application> Network Monitoring (CGI)
Programs</title>

<para>With this release, there are five CGI programs
(<application>multimon.cgi</application>,
<application>multimoncss.cgi</application>,
<application>upsstats.cgi</application>,
<application>upsfstats.cgi</application>, and
<application>upsimage.cgi</application>). To have them properly
installed, you must run the <command>./configure</command> command
with <option>--enable-cgi</option> and you should specify an
installation directory with <option>--with-cgi-bin=</option> or load
them manually. To install the Cascading Style Sheet, which is used by
<application>multimoncss.cgi</application>, you must use the
<option>--with-css-dir=</option> option. The default directory for
installation of the CGI programs is <filename>/etc/apcupsd</filename>,
which is not really where you want them if you are going to use them.
Normally, they should go in the <filename>cgi-bin</filename> of your
Web server.</para>

<para>Once built and loaded, they will give you the status of your UPS
or UPSes over the network.</para>

<para>Normally only <command>multimon.cgi</command> or
<application>multimoncss.cgi</application>is directly invoked by the
user. However, it is possible to directly invoke
<application>upsstats.cgi</application> and
<application>upsfstats.cgi</application>.
<application>upsimage.cgi</application> should never be directly
invoked as it is used by <application>upsstats.cgi</application> to
produce the bar charts.</para>

<sect2><title>Setting up and Testing the CGI Programs</title>

<para>Before using <application>multimon</application> and the other
CGI programs, first ensure that <application>apcupsd</application> is
configured to run the Network Information Server. This is done by
setting <emphasis role="bold">NETSERVER on</emphasis> in
<filename>/etc/apcupsd/apcupsd.conf</filename>.  This switch is on by
default.  If you are unsure of its state, see the section at the end
of this chapter concerning the Client test program.</para>

<para>Next you must edit the <filename>hosts</filename> file
<filename>/etc/apcupsd/hosts.conf</filename> and at the end, add the
name of the hosts you want to monitor and a label string for them. Kern
Sibbald uses <filename>multimon.conf</filename> unmodified from what
is on the source distribution. However, he has modified the hosts.conf
file to contain the following three lines:</para>

<programlisting>
MONITOR matou &quot;Server&quot;
MONITOR polymatou &quot;Backup server&quot;
MONITOR deuter  &quot;Disk server&quot;
</programlisting>

<para>matou, polymatou, and deuter are the network names of the three
machines currently running <application>apcupsd</application>. Please
note that the network names may either be IP addresses or fully
qualified domain names.  The network name (or IP address) may
optionally be followed by <emphasis
role="bold">:&lt;port&gt;</emphasis>, where the port is the NIS port
address you wish to use. This is useful if you are running multiple
copies of <application>apcupsd</application> on the same system or if
you are running in a mixed vendor environment where the NIS port
assignments differ. An example could be the following:</para>

<programlisting>
MONITOR matou &quot;Server&quot;
MONITOR polymatou &quot;Backup server&quot;
MONITOR deuter  &quot;Disk server&quot;
MONITOR polymatou:7001 &quot;APC USB UPS&quot;
</programlisting>

<para>where the USB copy of <application>apcupsd</application> has
been configured to use port 7001 (with
<option>--with-nis-port=7001</option> on the
<command>./configure</command> or by modifying
<filename>apcupsd.conf</filename>). Note, the default NIS port is 3551
on most platforms.</para>

<para>To test multimon.cgi, you can execute it as non-root directly
from the source cgi build directory. To do so, enter at a shell
prompt:</para>

<programlisting>
./multimon.cgi
</programlisting>

<para>If everything is set up correctly, it will print a bunch of HTML
with the values of the machines that you have put in the
<filename>hosts.conf</filename> file. It should look something like
the following (note, only a small portion of the output is reproduced
here):</para>

<programlisting>
Content-type: text/html

&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;
     &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Multimon: UPS Status Page&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;#FFFFFF&quot;&gt;
&lt;TABLE BGCOLOR=&quot;#50A0A0&quot; ALIGN=CENTER&gt;
&lt;TR&gt;&lt;TD&gt;
&lt;TABLE CELLPADDING=5&gt;
&lt;TR&gt;
&lt;TH COLSPAN=10 BGCOLOR=&quot;#60B0B0&quot;&gt;
&lt;FONT SIZE=&quot;+2&quot;&gt;APCUPSD UPS Network Monitor&lt;/FONT&gt;
&lt;BR&gt;Sun Jan 16 12:07:27 CET 2000&lt;/TH&gt;
&lt;/TR&gt;
&lt;TR BGCOLOR=&quot;#60B0B0&quot;&gt;
&lt;TH COLSPAN=1&gt;System&lt;/TH&gt;
&lt;TH COLSPAN=1&gt;Model&lt;/TH&gt;
&lt;TH COLSPAN=1&gt;Status&lt;/TH&gt;
...
</programlisting>

<para>If you do not get similar output, check the permissions of the
<filename>/etc/apcupsd</filename> directory and of those of
<filename>/etc/apcupsd/hosts.conf</filename> to ensure that your web
server can access it. At many sites such as mine, the Apache server is
not running as root, so you must be careful to ensure that that
<filename>/etc/apcupsd/hosts.conf</filename> and
<filename>/etc/apcupsd/multimon.conf</filename> are world
readable.</para>

<para>To invoke <application>multimon</application> in your Web
browser, enter:</para>

<para>http://&lt;your-site&gt;/cgi-bin/multimon.cgi</para>

<para>You should get something similar to the screen shot shown below.</para>

<para>If you wish additional control over the colors, type faces, and
sizes of the multimon output, you might wish to use
<application>multimoncss.cgi</application> in place of multimon. In
this case, you simply edit the <filename>multimon.css</filename> file
to specify the styles you prefer.  There are several sample Style
Sheet files in the <filename>cgi</filename> subdirectory
of the source tree.</para>

<para>To see a working example of the these programs, visit <ulink url="http://www.apcuspd.com/cgi-bin/multimon.cgi">http://www.apcupsd.com/cgi-bin/multimon.cgi</ulink>
or <ulink url="http://www.apcupsd.com/cgi-bin/multimoncss.cgi">http://www.apcupsd.com/cgi-bin/multimoncss.cgi</ulink></para>

</sect2>
<sect2><title>multimon.cgi</title>

<para>This program monitors multiple UPSes at the same time. A typical
output of <application>multimon.cgi</application> as displayed in your
Web browser might look like the following:</para>

<mediaobject>
  <imageobject>
    <imagedata fileref="multimon.png" depth="210" width="862"/>
  </imageobject>
</mediaobject>

<para>The machines monitored as well as the values and their column
headings are all configurable (see
<filename>/etc/apcupsd/hosts.conf</filename> and
<filename>/etc/apcupsd/multimon.conf</filename>)</para>

</sect2>
<sect2><title>upsstats.cgi</title>

<para>By clicking on the <emphasis role="bold">system</emphasis> name
in the <emphasis role="bold">multimon.cgi</emphasis> display, you will
invoke <application>upsstats.cgi</application> for the specified
system, which will produce a bar graph display of three of the
monitored values. For example,</para>

<mediaobject>
  <imageobject>
    <imagedata fileref="status.png" depth="636" width="846"/>
  </imageobject>
</mediaobject>

<para>You can display different bar graphs by selecting different
variables from the drop down menus at the top of each of the three
bar graphs.</para>

<para>As with <application>multimon</application>, if you have your
local host configured in the
<filename>/etc/apcupsd/hosts.conf</filename> file, you can execute it
from a Unix shell from the source cgi directory as follows:</para>

</sect2>
<sect2><title>./upsstats.cgi</title>

<para>As with <application>multimon</application>, quite a few lines
of html should then be displayed.</para> 

</sect2>
<sect2><title>upsfstatus.cgi</title>

<para>If you would like to see all of the STATUS variables available
over the network, click on the <emphasis role="bold">Data</emphasis>
field of the desired system, and your browser will display something
like the following:</para>

<programlisting>
APC      : 001,048,1109
DATE     : Thu Dec 02 17:27:21 CET 1999
HOSTNAME : matou.sibbald.com
RELEASE  : 3.7.0-beta-1
CABLE    : Custom Cable Smart
MODEL    : SMART-UPS 1000
UPSMODE  : Stand Alone
UPSNAME  : UPS_IDEN
LINEV    : 223.6 Volts
MAXLINEV : 224.9 Volts
MINLINEV : 222.3 Volts
LINEFREQ : 50.0 Hz
OUTPUTV  : 223.6 Volts
LOADPCT  :   6.2 Percent Load Capacity
BATTV    : 27.9 Volts
BCHARGE  : 100.0 Percent
MBATTCHG : 5 Percent
TIMELEFT : 167.0 Minutes
MINTIMEL : 3 Minutes
SENSE    : High
DWAKE    : 060 Seconds
DSHUTD   : 020 Seconds
LOTRANS  : 196.0 Volts
HITRANS  : 253.0 Volts
RETPCT   : 050.0 Percent
STATFLAG : 0x08 Status Flag
STATUS   : ONLINE 
ITEMP    : 35.1 C Internal
ALARMDEL : Low Battery
LASTXFER : U command or Self Test
SELFTEST : NO
STESTI   : 336
DLOWBATT : 02 Minutes
DIPSW    : 0x00 Dip Switch
REG1     : 0x00 Register 1
REG2     : 0x00 Register 2
REG3     : 0x00 Register 3
MANDATE  : 01/11/99
SERIALNO : GS9903001147
BATTDATE : 01/11/99
NOMOUTV  : 230.0
NOMBATTV :  24.0
HUMIDITY : N/A
AMBTEMP  : N/A
EXTBATTS : 0
BADBATTS : N/A
FIRMWARE : 60.11.I
APCMODEL : IWI
END APC  : Thu Dec 02 17:27:25 CET 1999
</programlisting>

<para>You should get pretty much the same output mixed in with html if
you execute <application>upsfstats.cgi</application> directly from a
Unix shell in the cgi subdirectory as explained above for
<application>upsstats.cgi</application> and
<application>multimon.cgi</application>.</para>

</sect2>
<sect2><title>Working Example</title>

<para>To see a working example of the above programs, visit <ulink
url="http://www.apcupsd.com/cgi-bin/multimon.cgi">http://www.apcupsd.com/cgi-bin/multimon.cgi</ulink>.</para>

</sect2>
<sect2><title>Client Test Program</title>

<para>When your Network Information Server is up and running, you can
test it using a simple program before attempting to access the server
via your Web server. The test program is called
<filename>client.c</filename> and can be found in the
<filename>examples</filename> subdirectory of the source
distribution. To build the program, when in the examples directory,
use something like the following:</para>

<programlisting>
cc client.c ../lib/libapc.a -o client
</programlisting>

<para>Then execute it:</para>

<programlisting>
./client &lt;host&gt;[:&lt;port&gt;] [&lt;command&gt;]
</programlisting>

<para>Where <emphasis role="bold">host</emphasis> is the name of the
host or the IP address of the host running the Network Information
Server. The default is the local host. You may optionally specify a
port address separated from the host name with a colon. You may also
optionally specify a single command to be executed. If you specify a
command, that command will be executed and the client program will
exit. This is a very simple and useful way of pulling the <emphasis
role="bold">status</emphasis> or <emphasis
role="bold">events</emphasis> data into another program such as
Perl.</para>

<para>If no error messages are printed, it has most likely established
contact with your server. Anything that you type as standard input
will be passed to the server, and anything the server sends back will
be printed to standard output. There are currently two commands
recognized by the server: <emphasis role="bold">events</emphasis> and
<emphasis role="bold">status</emphasis>.  Hence the following
commands:</para>

<programlisting>
./client
status
events
xyz
^D
</programlisting>

<para>Should produce the status listing (the same as produced by
<command>apcaccess status</command>), followed by the list of the last
10 events (in response to the <emphasis role="bold">events</emphasis>
command), and finally <emphasis role="bold">Invalid command</emphasis>
in response to the <emphasis role="bold">xyz</emphasis> input, which
is not a valid command. The control-D terminates the <emphasis
role="bold">client</emphasis> program.</para>

</sect2>
<sect2><title>A Tip from Carl Erhorn for Sun Systems</title>

<para>It is possible to run the CGI code to monitor your UPS using the
answerbook HTTP server that runs on Solaris. As long as your server
has the Answerbook2 web server installed and running, you can
insert the cgi scripts into the cgi directory of the web server,
and access the cgi using something like:</para>

<para>http://hostname:8888/cgi/multimon.cgi</para>

</sect2>
<sect2><title>Credits</title>

<para>Many thanks go to Russell Kroll &lt;rkroll at exploits.org&gt; who
wrote the CGI programs to work with his UPS Monitoring system named
<ulink url="http://www.exploits.org/nut/library/apcsmart.html">Network
UPS Tools (NUT)</ulink>. Thanks also to Jonathan Benson &lt;jbenson at
technologist.com&gt; for initially adapting the upsstatus.cgi
program to work with <application>apcupsd</application>.</para>

<para>We have enhanced the bar graph program and hope that our changes
can be useful to the original author in his project.</para>
</sect2>
<sect2><title>Security Issues</title>

  <itemizedlist>
    <listitem>
      <para><emphasis role="bold">apcupsd</emphasis> runs as root.</para>
    </listitem>
    <listitem>
      <para>If you have <emphasis role="bold">NETSERVER ON</emphasis>
      in your <filename>apcupsd.conf</filename> file (which is the
      deault), be aware that anyone on the network can read the status
      of your UPS.  This may or may not pose a problem. If you don't
      consider this information privileged, as is the case for me,
      there is little risk. In addition, if you have a firewall
      between your servers and the Internet, crackers will not have
      access to your UPS information.  Additionally, you can restrict
      who can access your <application>apcupsd</application> server by
      using <application>inted</application> to run the sservice and using
      access control lists with a TCP wrapper or by configuring TCP
      wrappers in <application>apcupsd</application> (see below
      for TCP Wrapper details).</para>
    </listitem>
    <listitem>
      <para>If you are running master/slave networking with a single UPS
      powering multiple machines, be aware that it is possible for
      someone to simulate the master and send a shutdown request to your
      slaves. The slaves do check that the network address of the machine
      claiming to be the master is that same as the address returned by
      DNS corresponding to the name of the master as specified in your
      configuration file.</para>
    </listitem>
  </itemizedlist>

<sect3><title>TCP Wrappers</title>

<para>As of apcupsd version 3.8.2, TCP Wrappers are implemented if you
turn them on when configuring (<command>./configure
--with-libwrap</command>).  With this code enabled, you may control
who may access your <application>apcupsd</application> via TCP
connections (the Network Information Server, and the Master/Slave
code). This control is done by modifying the file:
<filename>/etc/hosts.allow</filename>. This code is implemented but
untested. If you use it, please send us some feedback.</para>
</sect3>
</sect2>

</sect1>
<sect1 id='eeprom'><title>Configuring Your EEPROM</title>

<para>If you have a SmartUPS, there are depending on the UPS at least 12
different values stored in the EEPROM that determine how the UPS
reacts to various conditions such as high line voltage, low line
voltage, power down grace periods, etc.</para>

<para>In general, for the moment, we do not recommend that you change
your EEPROM values unless absolutely necessary. There have been
several reported cases of problems setting the Low Transfer
Voltage. Consequently, if at all possible, do not attempt to change
this value.</para>

<para>If despite these warnings, you must change your EEPROM, we
recommend connecting your UPS to a Windows or NT machine running
PowerChute and making the changes.</para>

<sect2><title><application>apcupsd</application> No Longer Configures EEPROM</title>

<para>Unlike version 3.8.6, apcupsd version 3.10.x no longer has code
to program the EEPROM. Instead we have implemented interactive EEPROM
modification code in the <application>apctest</application>
program. EEPROM programming must be done with
<application>apcupsd</application> stopped so that
<application>apctest</application> can access the UPS. In addition,
EEPROM programming is currently implemented only for UPSes using the
Smart protocol running in serial mode. Perhaps at a later time when
the appropriate kernel modifications are standard, we will extend
EEPROM programming to USB models.</para>

<para>Before changing your EEPROM, you should make a printed copy of
the current state of your UPS before any EEPROM changes so that you
can check the changes that you have made. Do so by printing a copy
of the output from <command>apcaccess status</command> and also print a copy of
the output from <command>apcaccess eprom</command>.</para>

<para>Once this is done, choose which values of the EEPROM you want to
change. Typical output from <application>apcaccess</application>
should look like the following:</para>

<programlisting>
apcaccess eeprom

Valid EPROM values for the SMART-UPS 1000

                       Config        Current  Permitted
Description              Directive     Value    Values
================================================================
Upper transfer voltage   HITRANSFER    253      253 264 271 280 
Lower transfer voltage   LOTRANSFER    196      196 188 208 204 
Return threshold         RETURNCHARGE  0        00 15 50 90 
Output voltage on batts  OUTPUTVOLTS   230      230 240 220 225 
Sensitivity              SENSITIVITY   H        H M L L 
Low battery warning      LOWBATT       2        02 05 07 10 
Shutdown grace delay     SLEEP         20       020 180 300 600 
Alarm delay              BEEPSTATE     0        0 T L N 
Wakeup delay             WAKEUP        0        000 060 180 300 
Self test interval       SELFTEST      336      336 168 ON  OFF 
</programlisting>

<para>where the Current Value will depend on how your UPS is configured,
and the Permitted Values will depend on what UPS model you have.</para>

</sect2>
<sect2><title>Using apctest to Configure Your EEPROM</title>

<para>To make the EEPROM changes with
<application>apctest</application> you must first stop the
<application>apcupsd</application> daemon</para>

<para><application>apctest</application> is not installed during the
installation process, so to use it you will need to do the following
after having built <application>apcupsd</application>:</para>

<programlisting>
cd &lt;apcupsd-source&gt;/src
su           
&lt;root-password&gt;
./apctest
</programlisting>

<para>At that point, you should get output similar to the following:</para>

<programlisting>
2003-07-07 11:19:21 apctest 3.10.6 (07 July 2003) redhat
Checking configuration ...
Attached to driver: apcsmart
sharenet.type = DISABLE
cable.type = CUSTOM_SMART

You are using a SMART cable type, so I'm entering SMART test mode
mode.type = SMART
Setting up serial port ...
Creating serial port lock file ...
Hello, this is the apcupsd Cable Test program.
This part of apctest is for testing Smart UPSes.
Please select the function you want to perform.

1) Query the UPS for all known values
2) Perform a Battery Runtime Calibration
3) Abort Battery Calibration
4) Monitor Battery Calibration progress
5) Program EEPROM
6) Enter TTY mode communicating with UPS
7) Quit

Select function number: 
</programlisting>

<para>You might want to run option 1) just to ensure that
<application>apctest</application> is properly talking to your UPS. It
will produce quite about 70 lines of output.</para>

<para>To program the EEPROM, select option 5), and you will get the
EEPROM menu as follows:</para>

<programlisting>
This is the EEPROM programming section of apctest.
Please select the function you want to perform.

1) Print EEPROM values
2) Change Battery date
3) Change UPS name
4) Change sensitivity
5) Change alarm delay
6) Change low battery warning delay
7) Change wakeup delay
8) Change shutdown delay
9) Change low transfer voltage
10) Change high transfer voltage
11) Change battery return threshold percent
12) Change output voltage when on batteries
13) Change the self test interval
14) Set EEPROM with conf file values
15) Quit

Select function number: 
</programlisting>

<para>If you wish to use the old pre-3.10.x method of EEPROM
programming with values specified in the
<filename>apcupsd.conf</filename> file, select option 14). However, we
recommend that you start with item 1) to see what EEPROM values
<application>apctest</application> finds. This command can take a few
minutes to run, so be patient. The values printed should be the same
as what you got using <application>apcaccess</application>, but in
addition, the EEPROM battery date and UPS Name should be
displayed. For example:</para>

<programlisting>
Select function number: 1

Doing prep_device() ...

Valid EEPROM values for the SMART-UPS 1000

                       Config        Current  Permitted
Description              Directive     Value    Values
===================================================================
Upper transfer voltage   HITRANSFER    253      253 264 271 280 
Lower transfer voltage   LOTRANSFER    196      196 188 208 204 
Return threshold         RETURNCHARGE  0        00 15 50 90 
Output voltage on batts  OUTPUTVOLTS   230      230 240 220 225 
Sensitivity              SENSITIVITY   H        H M L L 
Low battery warning      LOWBATT       2        02 05 07 10 
Shutdown grace delay     SLEEP         20       020 180 300 600 
Alarm delay              BEEPSTATE     0        0 T L N 
Wakeup delay             WAKEUP        0        000 060 180 300 
Self test interval       SELFTEST      336      336 168 ON  OFF 
===================================================================
Battery date: 07/31/99
UPS Name    : UPS_IDEN
</programlisting>

<para>At this point, you can select any item from 2) to 13) to modify the
appropriate value. You will shown the existing value and prompted
for the new values.</para>

<para>We recommend that you change the EEPROM as little as is
absolutely necessary since it is a somewhat delicate process that
has occasionally produced problems (i.e. improper EEPROM values are
displayed after the update). Fortunately this seems to be quite
rare and was much more likely to occur with the old &quot;batch&quot; like
process especially if incorrect values were supplied.</para>
</sect2>
</sect1>

</chapter>
<chapter id='maintaining'><title>Maintaining Your UPS</title>

<para>If you have your UPS long enough, you will probably have battery
problems. Below, you will find some suggestions for replacing
batteries. One <emphasis>important</emphasis> note of caution: at
least one user purchased one of the non-APC batteries noted below and
found out that they would not fit into his unit. This required cutting
and soldering and other very undesirable things, so be extremely
careful in measuring the batteries including every millimeter of the
terminal connections which can cause problems.</para>

<para>Although you can do a hot swap of your batteries while the
computer is running, it may not be very satisfactory because the unit
will not know that the batteries have been swapped and apcupsd will
continue to show Low Battery.  To correct this situation, you must do a
discharge and recharge of the battery followed by a battery
recalibration using <application>apctest</application>.  At that point
the battery should be calibrated better.  As noted below, Carl has found
that it takes several discharge/charges before the runtime calibration
is accurate.  Take care not to discharge your battery too much as it
tends to shorten the battery life.</para>

<sect1><title>What Various People Have to Say about Batteries</title>

<para>Here is what John Walker has to say about APC UPS batteries:</para>

<blockquote>
<para>I thought I'd pass on some information I've obtained which
you'll probably eventually need. Besides, by writing it down I'll be
able to find it the next time. I started installing mine in
1995-1996. Lead-acid batteries have a finite life even if not
subjected to deep discharge cycles. For the batteries used by APC,
this is typically four to six years. As part of the self-test cycle,
the UPS measures the voltage of the battery at full charge (which
falls as the battery ages), and if it's below about 90% of the value
for a new battery, it sets off the &quot;Replace battery&quot; alarm,
which it repeats every day. [on apcupsd versions prior to 3.8.0, this
message is sent once, on version 3.8.0, it is sent every 9 hours -
KES]. You will occasionally get a false alarm. It's a good idea if you
get an alarm to repeat the self-test the next day and see if the alarm
goes away. If the alarm is persistent, you need to replace the
batteries, which can be done without powering down the UPS or load-you
just open up the battery door, take out the old batteries, and hook up
the new ones.</para>

<para>APC makes &quot;Replacement Battery Units&quot; for each of the
SmartUPS models, but they sell them directly only in the U.S.</para>

<para>It's best to wait until the low battery alarm before ordering a
replacement-keeping batteries on the shelf reduces their life unless
you keep them fully charged.</para>
</blockquote>

<para>And Andr&#xE9; Hendrick says:</para>

<blockquote>
<para>[For replacement batteries] You need to goto you your local
Yamaha SeaDoo shop. There are 35 AMP Hour deep cycle marine batteries
that are direct replacements. These are gel-cel and will double the
runtime and/or cut your recharge time in half.</para>

<programlisting>
Jet Works
1587 Monrovia Ave.
Newport Beach CA 9266?
Tel: +1 714 548-5259

J-W Batteries, Inc.
Tel: +1 714 548-4017

WPS 49-1200
GEL-CELL KB-35 BATTERY
</programlisting>

<para>For those that do not know what this means........
I found the best battery for APCC UPS products that use In the two
systems below:</para>

<programlisting>
SMART-UPS 3000 10.9% is running at 327W runs for 47.0 min.
Smart-UPS 1250 22.3% is running at 279W runs for 54.0 min.

APCUPSD UPS Network Monitor
Thu Jan 18 21:55:36 PST 2001
System Model Status Battery Chg Utility UPS Load UPS Temp Batt. Run Time Data
Linux ATA Development SMART-UPS 3000 ONLINE
                    100.0 % 120.2 VAC 10.9 % 36.9 C 47.0 min. All data
Linux ATA Development II APC Smart-UPS 1250 ONLINE
                    100.0 % 119.6 VAC 22.3 % 45.9 C 54.0 min. All data
</programlisting>

<para>Look at the numbers and see that these batteries are better and
have more total running energy than standard ones.</para>

<programlisting>
SMART-UPS 3000 10.9% is running at 327W runs for 47.0 min.
Smart-UPS 1250 22.3% is running at 279W runs for 54.0 min.

APCUPSD UPS Network Monitor
Thu Jan 18 22:00:45 PST 2001
System Model Status Battery Chg Utility UPS Load UPS Temp Batt. Run Time Data
Linux ATA Development SMART-UPS 3000 ONLINE
                    100.0 % 120.2 VAC 19.2 % 36.9 C 27.0 min. All data
Linux ATA Development II APC Smart-UPS 1250 ONLINE
                    100.0 % 119.6 VAC 21.8 % 45.9 C 55.0 min. All data

SMART-UPS 3000 19.2% is running at 576W runs for 27.0 min.
Smart-UPS 1250 21.8% is running at 273W runs for 55.0 min.
Smart-UPS 1250 46.1% is running at 576W runs for 26.0 min.

</programlisting>

<para>Kind of cool.</para>

<para>The 1250 can outrun the 3000 by a factor of two under identical
percentages, or run head to head for the same time.</para>

<para>SMART-UPS 3000 is a 48V based or 4 batteries.  Smart-UPS 1250 is
a 24V based or 2 batteries.</para>

<para>Cheers,</para>

<literallayout>
Andre Hedrick
Linux ATA Development
</literallayout>
</blockquote>

<para>Finally, here is what Carl Erhorn has to say about
batteries:</para>

<blockquote>
  <para>Hi, Folks.</para>

  <para>Well, Kern was absolutely right. The problem with my UPS was
batteries. It was unexpected though, because there was no
indication of a bad battery right up until the UPS failed
entirely.</para>

  <para>For those who might encounter the same thing, and don't know
what's happening (I didn't either), here's what happened.</para>

  <para>A week or so ago, I turned on one of my SmartUPS 700-NET models.
The load is a small dual P-III unix server (Solaris 8, X86) and a
4MM tape drive. During the normal selftest that runs when you first
turn on any APC UPS, the UPS 'freaked out'. The alarm stuttered at
about 4 or 5 beeps per second, and all the panel lights flashed
spasmodically, as if something was loose inside the UPS.</para>

  <para>I turned off the UPS and it's load, then turned the UPS on
again. This time, everything seemed fine. I booted the system that
was attached, and there were no problems. The status monitor showed
9 minutes runtime (which indicates fairly low capacity), but the
batteries showed fully charged. I began to suspect a bad inverter
in the UPS.</para>

  <para>However, Kern told me that he suspected the batteries. So I took
the UPS offline, put an old SU-600 in it's place (just barely big
enough to handle the startup peaks - I get an 'overload' lamp lit
for about 2 seconds during boot), and checked out the batteries.
They did indicate that they were near the end of life, so I ordered
a replacement set. Those came in on Friday, and after the initial
charge, a complete charge/discharge cycle to recalibrate the UPS,
and some testing, I put it back in service.</para>

  <para>Surprise! (Or maybe not?) Kern was right - there is nothing
wrong with the inverter or the charging circuit, and the new cells
fixed everything.</para>

  <para>What confused me is that there was no 'replace battery'
indication from the UPS, even when it failed, plus a fair amount of
runtime indicated with a full charge. So if you see such behavior
on one of your UPS models, it makes sense to replace the batteries,
even if there is no indication that the batteries have failed
yet.</para>

  <para>One of the things I learned during this process is that the UPS
internal calibration will lose accuracy over the life of the
battery. I always do a recalibrate when I install new cells, but
rarely do it after that, as it's time-consuming, and you really
can't use the system attached to the UPS while doing it. Since my
systems are almost constantly in use, it's a pain to schedule a
recal, and I tend to put it off. This time it bit me. I'd suggest
that folks do a recal at least once every six months. It will make
your runtime estimates much more accurate, and also allows you to
keep track of the state of your batteries.</para>

  <para>For those who don't know how to do this, here's what you do.
This proceedure should not be confused with the 'Recalibrate'
feature in the APC PowerchutePlus software. They do not do the same
thing.</para>

  <para>&gt;From APC's web site:</para>

  <para>Perform a Runtime Calibration. This is a manual procedure and
should not be confused with the runtime calibration performed
through PowerChute plus. The batteries inside of the Smart-UPS are
controlled by a microprocessor within the UPS. Sometimes it is
necessary to reset this microprocessor, especially after the
installation of new batteries. Stop the PowerChute plus software
from running and disconnect the serial cable. There must be at
least a 30% load attached to the UPS during this procedure, but the
process will cause the UPS to shut off and cut power to its
outlets. Therefore, attach a non-critical load to the UPS and then
force the UPS on battery by disconnecting it from utility power.
Allow the unit to run on battery until it turns off completely.
Make sure a 30% load is present! Plug the UPS back into the wall
outlet and allow it to recharge (it will recharge more quickly
turned off and with no load present). Once the unit has recharged,
the &quot;runtime remaining&quot; calculation should be more accurate.
Remember that if the unit is an older model, then the runtime will
not improve significantly.</para>

  <para>Background:</para>

  <para>An APC Smart-UPS has a microprocessor which calculates runtime
primarily based on the load attached to the UPS and on its battery
capacity. On the right side of the front display panel there is a
vertical graph of five LEDs. Each LED is an indication of battery
charge in increments of twenty percent: 20, 40, 60, 80, 100%
(bottom to top). For example, if the battery charge is 99%, then
only four of the five LEDs are illuminated.</para>

  <para>To ensure that an operating system receives a graceful shutdown
when using PowerChute plus or a SmartSlot accessory, an alert is
generated by the Smart-UPS indicating that the UPS has reached a
low battery condition. The alert is audible (rapid beeping), visual
(flashing battery LED or LEDs), and readable through the graphical
interface of PowerChute plus software (or a native UPS shutdown
program within a particular operating system.) In order to
calculate this &quot;low battery condition,&quot; all Smart-UPS products have
a preconfigured low battery signal warning time of two minutes
(this is the factory default setting). There are a total of four
user-changeable settings: 2, 5, 7, or 10 minutes. If the low
battery signal warning time is set for 2 minutes, then the alerts
will activate simultaneously two minutes prior to shutdown.
Similarly, if the total runtime for a particular UPS is 30 minutes
with a low battery signal warning time set at 10 minutes, then the
UPS will run on battery for 20 minutes before the low battery alert
begins.</para>

  <para>Total runtime is primarily based on two factors, battery
capacity and UPS load. UPS load and runtime on battery are
inversely proportional: as load increases, battery runtime
decreases and vice versa. When utility power is lost, the UPS
begins discharging the battery in order to support the attached
load. Once power returns, the Smart-UPS will automatically begin to
recharge its battery.</para>

  <para>My comments on this proceedure:</para>

  <para>I believe this proceedure works for all APC models that calulate
runtime, not just the SmartUPS. It's important that you load the
UPS to 30% of the UPS capacity, as reported by apcupsd or another
UPS monitor program. I've found that normal house lamps of
different wattages allow me to adjust the load to almost exactly
what I want, which is between 30% and 35% of the UPS capacity. This
is critical te getting an accurate reading (according to the APC
web documents). Always bring the UPS to 100% charge first, as
indicated by the front panel lamps, or your UPS monitoring
software.</para>

  <para>Set the UPS shutdown time to 2 minutes, all other settings to
nominal, and disconnect the serial port cable from the UPS before
running the recalibration. If you leave a monitoring program
running through the serial port, it will turn the UPS off early,
and you don't want to do that during a recalibration run. When the
run is complete, and the UPS turns off, you can reattach the serial
cable, and the normal loads, and recharge the batteries normally.
If you think you might have a power outage during the recharge
time, allow the UPS to recharge to 20% or so (indicated by the
panel lamps) before trying to use the computer system. This will
allow the UPS to handle short dropouts while it recharges. Of
course, if you can leave the computer off during the recharge time,
the UPS will recharge much faster.</para>

  <para>As an aside, when the batteries failed, my total runtime at 100%
charge and an idle state was 9 minutes, which is pretty bad. I
replaced the batteries with extended capacity cells, which add
about 15% to the stock capacity. Now, after two complete charge/
discharge cycles, 100% charge shows the available runtime to be 42
minutes on the system when it's idle, and 33 minutes when the
system is very busy. The differences are due to the load of the
computer, when the disks are busy, and the cpus are not in a halted
state (my system halts the cpus when they are idle, to save power
and lower heat, as do other OS like Linux), when compared to an
idle state. Apcupsd indicates the load is about 27% when idle, and
as much as 37% when heavily loaded.</para>

  <para>I've found that two charge/discharge cycles result in a more
accurate recalibration when installing new cells. It appears that
some batteries need to be put through a couple of complete cycles
before they reach their full capacity. I've also noticed that the
full-charge voltage is different for each battery until they have
been through two cycles. On the initial charge of my new batteries,
the 100% charge voltage on the two cells was almost .5 VDC apart.
After two complete cycles, the batteries measure within .01 VDC of
each other!</para>

  <para>I hope this information helps anyone who might encounter the
problem I saw, and also shows folks how to recal their batteries.
If you haven't done a complete recalibration in a year or two, I'd
recommend it, so that you have warning of a low battery instead of
what happened to me.</para>

  <para>Regards,</para>

  <para>--Carl</para>
</blockquote>

</sect1>
<sect1><title>Where Carl Suggests You Get Batteries</title>
<blockquote>

  <para>Hi, Folks.</para>

  <para>I'm just replacing the batteries in one of my SmartUPS models,
and it occurs to me that some of you may not know about the place I
get them from. I have no relationship with this company, other than
as a customer, but I feel they know what they are doing, their
prices are fair, and they have some interesting batteries available
that you can't obtain from APC.</para>

  <para>These are the reasons I use them, and I thought this information
might be useful to the US list members. They will ship outside of
the US. If you have questions, you can contact them through the
email address listed on their web pages. They have always responded
pretty quickly to my questions.</para>

  <para>The company is called Battery Wholesale Distributors, and they
are located in Georgetown, Texas. If you have questions, you can
reach them by phone at (800) 365-8444, 9:00AM to 5:00PM (their
local time), Monday through Friday. I've gotten email from them on
the weekends, although the office is not open then.</para>

  <para>I won't post prices, as you can get current pricing from their
web site. They have an entire section dedicated to APC replacement
batteries, and it's easy to find what you need. You can order over
the web, or by phone. They accept all the usual credit cards.</para>

  <para>The web site (as you might guess) is: <ulink
url="http://www.batterywholesale.com">www.batterywholesale.com</ulink></para>

  <para>The thing I really like is that they have found manufacturers
who make batteries in the standard case sizes, but have additional
capacity over the original batteries shipped with the APC UPS
models. Often, the difference is as much as 15% or so, and this can
result in additional runtime. It's a nice upgrade for a minor
increase in price.</para>

  <para>They are also 'green-aware', in that they encourage you to
recycle your old batteries, and will accept the old batteries back
from you if you cannot find a local place that recycles them. You
pay the shipping, but I think other than that, there is no charge.
I've never done this, as I have a battery retailer just down the
street who will accept my old batteries.</para>

  <para>Anyway, if you didn't know about these folks, put the info aside
where you can find it when you need replacement batteries. I won't
make any guarantees, but I've been very pleased with their
products, service, and pricing. I hope you find them as helpful to
you as I do. I've been dealing with them since about 1994, and have
never been disappointed. The owner of the place also is very good
on technical issues, so if you have questions on their products, he
can get as technical as you need to go.</para>

<literallayout>
Regards,
--Carl
</literallayout>
</blockquote>

<para>Here is a link to the
<ulink url="http://www.batterywholesale.com/battery-store/APC-batteries/?PHPSESSID=10ba07023457efda6a3520af1957755f">APC Battery Store</ulink>.</para>
</sect1>
</chapter>
<chapter><title>Frequently-Asked Questions</title>

<para>See the bugs section of this document for a list of known
bugs and solutions.</para>

<qandaset defaultlabel="qanda">

<qandaentry>
<question id='crazy'>
<para>Why all the craziness with custom serial cables?</para>
</question>
<answer>
<para>It was nothing more nor less than a form of customer
control. For a long time APC wanted to keep other people from talking
to its UPSes so it could lock out potential competition for its
PowerChute software.  Scrambling the leads on its serial cables was
a cheap way to accomplish this &mdash; in fact, they tended to be wired so
that if you tried a straight-through cable, opening a serial link to
the UPS would be interpreted as a shutdown command!</para>

<para>(Hardware companies often think like this &mdash; they lock up
interfaces by instinct, cornering a small market rather than growing a
bigger one.  It's fundamentally stupid and self-defeating, but it's
the kind of stupid that tends to sound good at an executive
meeting.)</para>

<para>Fortunately, APC has lost a lot of this attitude since about
2000; nowadays they even release technical information to the
<application>apcupsd</application> maintainers.</para>
</answer>
</qandaentry>

<qandaentry>
  <question>
    <para>What UPS brands does <application>apcupsd</application>
    support?</para>
  </question>
  <answer>
    <para>Currently <application>apcupsd</application> supports only
    APC UPSes. However, some companies such as Hewlett Packard put
    their own brand name on APC manufactured UPSes. Thus even if you
    do not have an APC branded UPS, it may work with
    <application>apcupsd</application>. You will need to know the
    corresponding APC model
    number. <application>apcupsd</application> supports all the
    popular APC models. See the installation and configurations
    sections of this document for more details.</para>
  </answer>
</qandaentry>

<qandaentry>
  <question><para>Does <application>apcupsd</application> support Windows?</para></question>
  <answer>
    <para>With release 3.8.0, <application>apcupsd</application> now
    runs on Win95/98, WinMe, WinNT, and Win2000 machines. All features of
    the Unix versions of <application>apcupsd</application> are
    implemented. The UPS EEPROM programming features of
    <application>apcupsd</application> have not been tested under
    Windows. Version 3.8.0 does not support simple signaling UPSes
    (BackUPS, etc). Version 3.8.1 does support most simple signaling
    UPSes, but not all cables (due to deficiencies in the Windows serial
    port API). Please note that we have had reports that
    <application>apcupsd</application> does not work properly on the WinXP
    system. If you have any information on this, please email us.</para>
  </answer>
</qandaentry>

<qandaentry>
  <question><para>I don't have a cable, which one should I build?</para></question>
  <answer>
    <para>First you must know if you have an apcsmart UPS or a
    voltage-signalling UPS &#x2014; See the <link
    linkend='type_table'>table of supported UPSes</link>. If you
    have a apcsmart UPS, we recommend building a <link
    linkend='custom_smart'>Custom Smart</link> cable. If you have a
    voltage-signaling UPS, we recommend that you build a <link
    linkend='custom_simple'>Custom Simple</link> cable.</para>
  </answer>
</qandaentry>

<qandaentry>
  <question><para>How much CPU resources does <application>apcupsd</application> use?</para></question>
  <answer>
    <para>Depending on your CPU speed, you may see more or less of
    the CPU consumed by <application>apcupsd</application>. On a
    400MHz Unix system, the CPU usage should fall well below
    0.1%. On slower systems, the percentage will increase
    proportionally to the decrease in the CPU speed. On a 400Mhz
    Win98 machine, the CPU usage will be on the order of
    0.5-1.0%. This is higher than for Unix systems. However,
    compared to the 30% CPU usage by APC's PowerChute (the version
    on the CDROM shipped with my UPS),
    <application>apcupsd</application>'s 0.5-1.0% is very
    modest.</para> <para>If you configure
    <application>apcupsd</application> to run with pthreads
    (<option>--with-pthreads</option> on the
    <command>./configure</command> line),
    <application>apcupsd</application> will run considerably faster,
    otherwise said, it will consume less of your CPU, and it will
    use approximately one third of the memory. For example, Carl
    Erhorn reports that on his Solaris system, &quot;With the old
    3-process version, we averaged about 4.8MB of total memory
    used. With the new single process, we use only about 1.7MB!
    That's also a very good improvement.&quot;</para>
  </answer>
</qandaentry>

<qandaentry>
  <question><para>What language is <application>apcupsd</application> written in?</para></question>
  <answer>
    <para>It is written entirely in C.</para>
  </answer>
</qandaentry>

<qandaentry>
  <question><para>We are using apcupsd-3.8.1-1 in RedHat 6.2. The slave, when
  shutting down, is reporting an error at line 436 of apcupsd.c. The
  error is initiated by <command>apcupsd --killpower</command>! What
  can we do to fix this, and is it critical?</para></question>
  <answer>
    <para>No, the error is not serious. Unfortunately, the
    documentation in the area of master/slaves is not very detailed,
    and for that reason, your slave setup is not totally correct as
    explained below.</para>

    <para>On master machines, we modify
    <filename>/etc/rc.d/init.d/halt</filename> to re-invoke apcupsd
    with the <option>--killpower</option> option (actually the
    script apccontrol is called). This causes the UPS to send the
    codes to the UPS to make it power off.</para>

    <para>On slave machines, these modifications should not be made
    to the <filename>/etc/rc.d/init.d/halt</filename> script since
    the slave has no connection to the UPS.</para>

    <para>To eliminate the problem, on all your slave machines, either
    restore the original halt file, or simply delete all the lines
    containing ***apcupsd***, which were inserted by the apcupsd
    installation process.</para>
  </answer>
</qandaentry>

<qandaentry>
  <question><para>To test <application>apcupsd</application>, I unplugged the
  UPS to simulate a power outage. After the machine went into the
  shutdown process I plugged the UPS back into the commercial power
  source. This caused the shutdown process to hang after the daemon
  tried to shut-off the ups. Have you run into this problem, and if so
  do you have a remedy?</para></question>
  <answer>
    <para>Normally, once the shutdown process has begun, we cannot
    stop it, though there <emphasis>is</emphasis> some code that
    tries to do so, we don't consider it a very good idea &mdash;
    how do you stop a shutdown that has killed off half of the
    daemons running on your system? Most likely you will be left
    with an unusable system. In addition, when apcupsd is
    re-executed in the halt script after the disks are synced, it
    tries to shut off the UPS power, but the UPS will generally
    refuse to do so if the AC power is on. Since we cannot be 100%
    sure whether or not the UPS will shut off the power, we don't
    attempt to reboot the system if we detect that the power is back
    as it might then get caught by a delayed power off (at least for
    Smart UPSes).</para>
  </answer>
</qandaentry>

<qandaentry>
  <question><para>After running apcupsd for a while, I get the following
  error: &quot;Serial communications with UPS lost.&quot; What is
  the problem?</para></question>
  <answer>
    <para>We use standard Unix serial port read() and write() calls
    so once a connection is made, we generally have few
    problems. However, there have been reports that APC's SNMP
    Management Card can cause serial port problems. If you have such
    a card, we suggest that you remove it and see if the problem
    goes away. It is also possible that some other process such as a
    <application>getty</application> is reading the serial
    port.</para>
  </answer>
</qandaentry>

<qandaentry>
  <question><para>When apcupsd starts, I get the following error:
  &quot;attach_shmarea: cannot get shm area: Identifier
  removed.&quot; What is the problem?</para></question>
  <answer>
    <para>This problem and the problem of <emphasis
    role="bold">cannot create shm area</emphasis> are due to the
    fact that the shared memory key that apcupsd wants to use is
    already in use. This happens most frequently when there is an
    old zombie apcupsd process still in the system.  The solution is
    to remove the old process.  You can often see what is going on
    by doing a: <command>ipcs</command> command as root when apcupsd
    is not running. If you see a segment with the key 0x10feed01,
    you can be sure there is some old apcupsd process still using
    it. If you cannot kill the old process, you can try using
    <command>ipcrm</command> (see the man pages).  Recent versions
    of <application>apcupsd</application> starting with
    apcupsd-3.8.2Beta6 should no longer have this problem as they
    will automatically try using a different key.</para>
  </answer>
</qandaentry>

<qandaentry>
  <question><para>I get the following error: &quot;Starting apcupsd power
  management.  Mar 20 21:19:40 box apcupsd[297]: apcupsd FATAL ERROR
  in apcserial.c at line 83. Cannot open UPS tty /dev/cua01: No such
  file or directory.&quot; What is the problem?</para></question>
  <answer>
    <para>The two most likely causes of your problem are:  1. You have the
    wrong serial port device name in the apcupsd.conf file.
    2. The device name is not defined on your system.
    Suggestions for proceeding:For the first item, check what your
    serial port device should be named. You might be able to find the
    name with an:</para>
<programlisting>
ls /dev
</programlisting>

    <para>Normally there will be hundreds or even thousands of names
    that print. If that doesn't produce anything useful, you can try
    step 2.  Perhaps your device is not defined. To get more
    information on your devices try man <command>MAKEDEV</command>
    or <command>find / -name MAKEDEV</command>.  It is often located
    in <command>/dev/MAKEDEV</command>.  Looking at the
    documentation may tell you what the correct name is, or at least
    allow you to create the device.</para>
  </answer>
</qandaentry>

<qandaentry>
  <question><para>How do I ensure that the slaves shutdown before the master?</para></question>
  <answer>
    <para>There are several strategies for getting the slaves
    properly shutdown before shutting down the master. The first is
    to make the master wait a period of time for the slaves to
    shutdown before doing its own shutdown. Currently, the master
    always waits 30 seconds before starting its own shutdown. If
    this is insufficient, you can add additional time by putting an
    appropriate <emphasis role="bold">sleep</emphasis> shell command
    in the <filename>/etc/apcupsd/apccontrol</filename> file just
    before the actual system shutdown command is executed (there are
    something like 3 places). The second strategy is to put a
    TIMEOUT value in the apcupsd.conf file on the slave that is
    sufficiently short that you are sure that the slave will
    shutdown before the master. If the shutdown is done with a
    poweroff, this will also save power so that the master can stay
    up longer.</para>
  </answer>
</qandaentry>

<qandaentry>
  <question><para>How do I ensure that my database server is correctly shutdown?</para></question>
  <answer>
    <para>You simply add whatever commands are necessary in the
    appropriate case statements in
    <filename>/etc/apcupsd/apccontrol</filename>, which is a
    standard script file that is called to actually do the
    shutdown. Alternatively, you can add your own script file that
    will be called before doing the commands in
    <application>apccontrol</application>. Your script file must
    have the same name as the appropriate case statement in
    <application>apccontrol</application>; it must be executable;
    and it must be in the same directory as
    <application>apccontrol</application>.</para>
  </answer>
</qandaentry>

<qandaentry>
  <question><para>I have Win2k Advanced server, and when starting the service,
    get: Could not start the Apcupsd Server service on Local Computer.
    Error 1067: The process terminated unexpectedly</para></question>
  <answer>
    <para>The most common error causing your problem is an incorrect
    serial port specification on your DEVICE directive. It should be:</para>
<programlisting>
DEVICE /dev/com2
</programlisting>
    <para>On WinNT machines, and probably Win2000 machines you MUST
    use <filename>/dev/com2</filename> unless you modify the
    behavior of the boot process to prevent Windows from probing the
    port. This is documented in our manual for WinNT. Although I
    imagine it is the same for Win2000, I am not sure.</para>

    <para>The second most common problem is bad placement of the
    files &#x2014; i.e. you did not install them in c:\apcupsd
    Unfortunately for the current release, this path is &quot;hard
    coded&quot; into the binaries.</para>

    <para>The third most common problem is that you did not run the
    <filename>setup.bat</filename> script after loading the
    files. This is necessary to install apcupsd as a service.</para>

    <para>If all the above fails, try starting apcupsd by hand
    inside a CYGWIN <application>rxvt</application> window &#x2014;
    if you use an rxvt window rather than a DOS window, you will see
    many more of the error messages.</para>

    <para>In addition, most of the apcupsd startup errors are
    reported in:
    <filename>c:\apcupsd\etc\apcupsd\apcupsd.events</filename></para>

    <para>Many error messages associated with Windows services will
    be reported in the Windows System Log.</para>
  </answer>
</qandaentry>

<qandaentry>
  <question><para>When using USB, I get the following log messages: usb-uhci.c:
  interrupt, status 3, frame# 826. What does it mean?</para></question>
  <answer>
    <para>It means one transfer worked (bit 0 in status) and another
    one (after that) failed (bit 1) at time frame 826. This kind of
    soft error is common on USB and if everything seems to be
    working, you can ignore it.</para>
  </answer>
</qandaentry>

<qandaentry>
  <question>
    <para><application>apcnisd</application> doesn't work. It always
    gives: FATAL ERROR in apcipc.c at line 497. attach_shmarea: shared
    memory version mismatch (or UPS not yet ready to report)</para>
  </question>
  <answer>
    <para>Unfortunately <application>apcnisd</application> does not
    work with pthreads enabled. You have the following options:</para>

   <orderedlist>
   <listitem>
     <para>If you build with pthreads enabled,
      <application>apcnisd</application> will not work no matter
      what you do.</para>
   </listitem>
   <listitem>
     <para>If you build with pthreads enabled, and you want
     to have network information from apcupsd, you must
     set NETSERVER ON. This is the configuration we
     recommend (i.e. using pthreads and NETSERVER ON).</para>
  </listitem>
  <listitem>
    <para>If you build with pthreads disabled, you have the choice
    of using <application>apcnisd</application> or the NETSERVER
    code. If you wish to use <application>apcnisd</application>, you
    must set NETSERVER OFF</para>
  </listitem>
  <listitem>
    <para>If you build with pthreads disabled, and you do not use
    <application>apcnisd</application>, you must set NETSERVER ON if
    you wish to have network information from apcupsd.</para>
  </listitem>
  </orderedlist>

  <para>Concerning the names one sees with &quot;ps&quot;.</para>

  <orderedlist>
  <listitem>
    <para>With pthreads enabled, on Linux machines, you will
    see multiple copies of apcupsd running, but they
    will all be called apcupsd rather than apcmain, 
    apcser, ... They will still run as LWP, but we
    are unable to set the names on threads (LWP). Note,
    though ps shows &quot;multiple copies&quot; of apcupsd running,
    it is really one memory image but with multiple threads.</para>
  </listitem>
  <listitem>
    <para>With pthreads disabled, we are able to set the
    child process names (at least on Linux) so you
    will see apcmain, apcser, apcnis, ... in the
    ps output. In this case, they are really different
    processes each with its own memory image (the
    code image is most likely shared).</para>
  </listitem>
  </orderedlist>
</answer>
</qandaentry>

<!-- prototype
<qandaentry>
<question>
<para></para>
</question>
<answer>
<para></para>
</answer>
</qandaentry>
-->

</qandaset>
</chapter>
<chapter><title>Apcupsd Bugs</title>

<para>Unfortunately, it seems that every program has some bugs. We do
our best to keep the bugs to a minimum by extensive testing. However,
because of our inherent nature to occasionally overlook things and the
fact that we don't have all the UPS models nor the APC documentation
on those models, <application>apcupsd</application> will have
some bugs.</para>

<para>As the bugs become known to us, we will post them on
the bug tracking system at SourceForge.</para>

</chapter>

</part>
<part id='advanced'><title>Advanced topics</title>

<chapter id='events'><title>Customizing Event Handling</title>

<para>When <application>apcupsd</application> detects anomalies from
your UPS device, it will make some decisions that usually result in
one or more calls to the script located in
<filename>/etc/apcupsd/apccontrol</filename>. The <emphasis
role="bold">apccontrol</emphasis> file is a shell script that acts on
the first argument that <application>apcupsd</application> passes to
it. These actions are set up by default to sane behavior for all
psituations <application>apcupsd</application> is likely to
detect from the UPS. However, you can change the
<application>apccontrol</application> behavior for every single
action.</para>

<para>To customize, so create a file with the same name as the action,
which is passed as a command line argument. Put your script in the
<filename>/etc/apcupsd</filename> directory.</para>

<para>These events are sent to the system log, optionally sent to the
temporary events file
(<filename>/etc/apcupsd/apcupsd.events</filename>), and they also
generate a call to <filename>/etc/apcupsd/apccontrol</filename> which
in turn will call any scripts you have placed in the
<filename>/etc/apcupsd</filename> directory.</para>

<para>Normally, <filename>/etc/apcupsd/acpcontrol</filename> is called
only by <application>apcupsd</application>. Consequently, you should
not invoke it directly.  However, it is important to understand how it
functions, and in some cases, you may want to change the messages that
it prints using <command>wall</command>. We recommend that you do so
by writing your own script to be invoked by
<command>apccontrol</command> rather than by modifying
<application>apccontrol</application> directly. This makes it easier
for you to upgrade to the next version of
<application>apcupsd</application></para>

<para>In other case, you may want to write your own shell scripts that
will be invoked by <application>apccontrol</application>. For example,
when a power fail occurs, you may want to send an email message to
root. At present the arguments that
<application>apccontrol</application> recognizes are:</para>

<para>When <application>apcupsd</application> detects an event, it
calls the <application>apccontrol</application> script with four
arguments as:</para>

<para>apccontrol &lt;event&gt; &lt;ups-name&gt; &lt;connected&gt;
&lt;powered&gt;</para>

<para>where:</para>
<variablelist>
  <varlistentry>
    <term>event</term>
    <listitem>
      <para>is the event that occurred and it may be any one of the values
      described in the next section.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>ups-name</term>
    <listitem>
      <para>is the name of the UPS as specified in the configuration file
      (not the name in the EEPROM). For version 3.8.2, this is always set
      to <emphasis role="bold">Default</emphasis></para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>connected</term>
    <listitem>
      <para>is 1 if <application>apcupsd</application> is connected to
      the UPS via a serial port (or a USB port). In most
      configurations, this will be the case. In the case of a Slave
      machine where <application>apcupsd</application> is not directly
      connected to the UPS, this value will be 0.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>powered</term>
    <listitem>
      <para>is 1 if <application>apcupsd</application> is powered by
      the UPS and 0 if not. In version 3.8.2, this value is always 1.</para>
    </listitem>
  </varlistentry>
</variablelist>

<sect1><title><application>apccontrol</application> Command Line Options</title>

<para><application>apccontrol</application> accepts the following
command line options:</para>

<variablelist>
  <varlistentry>
    <term>annoyme</term>
    <listitem>
      <para>Does a &#xA0;&#xA0;<command>printf
      &quot;Power problems please logoff.&quot; | wall</command>
      &#xA0;&#xA0; then exits.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>changeme</term>
    <listitem>
      <para>Does a &#xA0;&#xA0; <command>printf
      &quot;Emergency! UPS batteries have failed\nChange them NOW&quot; |
      wall</command> &#xA0;&#xA0; then exits.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>commfailure</term>
    <listitem>
      <para>Does a &#xA0;&#xA0;<command>printf
      &quot;Warning serial port communications with UPS lost.&quot; |
      wall</command> &#xA0;&#xA0; then exits.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>commok</term>
    <listitem>
      <para>Does a &#xA0;&#xA0;<command>printf
      &quot;Serial communications with UPS restored.&quot; | wall</command>
      &#xA0;&#xA0;then exits.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>doreboot</term>
    <listitem>
      <para>Does a reboot of the system by calling &#xA0;&#xA0;
      <command>shutdown -r now</command></para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>doshutdown</term>
    <listitem>
      <para>Does a shutdown of the system by calling&#xA0;&#xA0;
      <command>shutdown -h now</command></para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>emergency</term>
    <listitem>
      <para>Does an emergency shutdown of the system by calling&#xA0;&#xA0;
      <command>shutdown -h now</command></para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>failing</term>
    <listitem>
      <para>Does a&#xA0;&#xA0;<command>printf &quot;UPS battery power
      exhausted. Doing shutdown.\n&quot; | wall</command> &#xA0;&#xA0;then
      exits.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>loadlimit</term>
    <listitem>
      <para>Does a &#xA0;&#xA0; <command>printf &quot;UPS battery
      discharge limit reached. Doing shutdown.\n&quot; | wall</command>
      &#xA0;&#xA0; then exits.  After completing this event,
      <application>apcupsd</application> will immediately initiate a
      &#xA0;&#xA0; <command>doshutdown</command> event.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>mainsback</term>
    <listitem>
      <para>Attempts to cancel the shutdown with a &#xA0;&#xA0;
      <command>shutdown -c</command></para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>onbattery</term>
    <listitem>
      <para>Does a &#xA0;&#xA0;<command>printf &quot;Power
      failure. Running on UPS batteries.&quot; | wall</command>
      &#xA0;&#xA0;then exits.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>powerout</term>
    <listitem>
      <para>Does a &#xA0;&#xA0;<command>printf &quot;Warning power
      loss detected.&quot; | wall</command>&#xA0;&#xA0; then exits.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>remotedown</term>
    <listitem>
      <para>Does a &#xA0;&#xA0; <command>shutdown -h now</command></para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>restartme</term>
    <listitem>
      <para>Terminates the currently running
      <application>apcupsd</application> and then restarts it.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>runlimit</term>
    <listitem>
      <para>Does a &#xA0;&#xA0;<command>printf &quot;UPS battery
      runtime percent reached. Doing shutdown.\n&quot; |
      wall</command> &#xA0;&#xA0; then exits.  After completing this
      event, <application>apcupsd</application> will immediately
      initiate a <command>doshutdown</command> event.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>timeout</term>
    <listitem>
      <para>Does a &#xA0;&#xA0;<command>printf &quot;UPS battery
      runtime limit exceeded. Doing shutdown.\n&quot; | wall</command>
      &#xA0;&#xA0; then exits. After completing this event,
      <application>apcupsd</application> will immediately initiate a
      <command>doshutdown</command> event.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>startselftest</term>
    <listitem>
      <para>This is called when <application>apcupsd</application>
      detects that the UPS is doing a self test. No action is taken.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>endselftest</term>
    <listitem>
      <para>This is called when <application>apcupsd</application>
      determines that a self test has been completed. No action is
      taken.</para>
    </listitem>
  </varlistentry>
</variablelist>

<para>To write your own routine for the <emphasis
role="bold">powerout</emphasis> action, you create shell script named
<emphasis role="bold">powerout</emphasis> and put it in the lib
directory (normally <filename>/etc/apcupsd</filename>). When the
<emphasis role="bold">powerout</emphasis> action is invoked by
<application>apcupsd</application>,
<application>apccontrol</application> will first give control to your
script. If you want <application>apccontrol</application> to continue
with the default action, simply exit your script with an exit status
of zero. If you do not want <application>apccontrol</application> to
continue with the default action, your script should exit with the
special exit code of <emphasis role="bold">99</emphasis>. However, in
this case, please be aware that you must ensure proper shutdown of
your machine if necessary.</para>

<para>Some sample scripts (onbattery and mainsback) that email power
failure messages can be found in the <filename>examples</filename>
directory of the source code.</para>
</sect1>
</chapter>

<chapter><title>Master/Slave Configurations</title>

<para>If you have two or more computers that are powered by the same UPS
and they are connected by a network, you can configure
<application>apcupsd</application> so that the computer that controls the UPS
(connected by the serial port or USB port), which is called the
master, can provide information to other machines powered by the
UPS, called slaves. When the master detects a power failure, it
will notify all the slaves (maximum of twenty). If the master
detects that the battery is low, it will also notify the slave so
that the slave may perform a shutdown. </para>

<para>In addition, in cases where you wish to keep the master up
longer than the slave, you can configure the slave to shut down in a
predetermined time after the UPS goes on batteries.</para>

<para>If a picture is worth a thousand words for you, please see
<xref linkend="configtypes"/>.</para>

<sect1><title>Configuration Directives</title>

<para>If you are setting up a master/slave configuration, you will be
required to make some modifications to the
<filename>apcupsd.conf</filename> files after the build is
done.</para>

<para>The minimum set of configuration directive changes needed to
create a proper master and slave configuration files is described in
the <xref linkend="config-examples"/> section of this
manual.</para>

<para>The details of these directives are explained in the <xref
linkend="UPS_Sharing"/> section of the Configuration chapter of this
document.</para>

<para>In addition, sample master and slave configuration files can be
found in the <filename>&lt;src&gt;/examples</filename> directory
(<filename>apcupsd.master.conf</filename> and
<filename>apcupsd.slave.conf</filename>).</para>

</sect1>
<sect1><title>Master/Slave Problems</title>

<sect2><title>Master/Slave Shutdown</title>

<para>For additional details of shutting down a master/slave
configuration, please see the Master/Slave Shutdown
section of the <link linkend='shutdown'>Shutdown chapter</link> of 
the Technical Reference.</para>

</sect2>
<sect2><title>Master/Slave Networking using NIS and the NET Driver</title>

<para>It is also possible to implement a network of master/slave
apcupsds using the new 3.10.x code and the <emphasis
role="bold">net</emphasis> driver. This mode of master/slave
networking is considerably different from the old method described at
the beginning of this chapter. In the old code, there is a lot of
configuration on both the master and slave side, and the master polls
or sends info to the slave. Using the <emphasis
role="bold">net</emphasis> driver is much simpler. However, you should
carefully check that the slave does a proper shutdown. In the
master/slave code, the master ensures the best it can that the slave
is shutdown or notified before it shuts down itself. On the other
hand, using the net driver, the master knows nothing about the slaves
that may be listening and thus takes no special precautions to ensure
that the slaves receive the shutdown signal. Since the slave reads the
master's data once per second there should be no shutdown problems,
and our experience confirms this.  This question can only  be answered
by carefully testing the shutdown.</para>

<para>In this master/slave mode, the master is a standard stand alone
configuration except that it must have <emphasis role="bold">NETSERVER
on</emphasis> in the configuration file and have an <emphasis
role="bold">NISPORT nnn</emphasis> defined. Thus any
<application>apcupsd</application> running in this mode then becomes
the master.</para>

<para>The slave then uses the net driver to connect to the master's
NIS output. In this mode, the slave decides how often to poll the
master for the NIS information. The slave copy of apcupsd, have
<emphasis role="bold">UPSTYPE net</emphasis>, which will invoke the
&quot;network&quot; driver. By setting this machine's <emphasis
role="bold">DEVICE</emphasis> to be <emphasis
role="bold">master-ip:master-NIS-port</emphasis> it will automatically
connect to the master and use the master's signals to shutdown the
computer.  In the example net slave configuration file below, the
slave uses the NIS information provided by the computer <emphasis
role="bold">tibs</emphasis> on port <emphasis
role="bold">3551</emphasis>.</para>

<programlisting>
## apcupsd.conf v1.1 ##
UPSCABLE ether
UPSTYPE net
# Specify the server name:port where NIS is running
DEVICE tibs:3551
LOCKFILE /var/lock
BATTERYLEVEL 5
MINUTES 3
TIMEOUT 0
ANNOY 300
ANNOYDELAY 60
NOLOGON disable
EVENTSFILE /etc/apcupsd/apcupsd.events
UPSCLASS standalone
UPSMODE disable
#
# Use this to control the poll time.
#  the default is 60 or 1 minute
#
NETTIME 30
</programlisting>
</sect2>
</sect1>
<sect1><title>Network Problems with Master/Slave Configurations</title>

<para>When working with a master/slave configuration (one UPS powering
more than one computer), the master and slave communicate via the
network. In many configurations, <application>apcupsd</application> is
started before the network is initialized. In this case, it is
possible that the master will be unable to contact the slave. On
<application>apcupsd</application> versions prior to 3.8.0, this could
cause <application>apcupsd</application> to error off. The solution to
this problem is to either force <application>apcupsd</application> to
be started after the network and the DNS (fiddle the symbolic links in
/etc/rc.d), or put the names of the slave machines in your
<filename>/etc/hosts</filename> file, or even more preferable, use IP
addresses rather than machine names. On some configurations, you may
need to use fully qualified names (host.domain.xxx) rather than simple
host names.</para>

<sect2><title>Error Messages from a Master Configuration</title>

<para>In a master/slave configuration, you can get the following error
messages from a master. The error message is followed by a possible
explanation:</para>

<sect3><title>Cannot resolve slave name <replaceable>XXX</replaceable></title>

<para>To contact the slave, the slave name given in the configuration
file must be resolved to an IP address. In this case,
<application>apcupsd</application> could not get the IP
address. Either the slave name is incorrect, your DNS may not be
working, or you have started <application>apcupsd</application> during
the boot process before the network is operational.</para>

</sect3>
<sect3><title>Got slave shutdown from <replaceable>SSS</replaceable></title>

<para>This message should not be printed as it is not yet used.</para>

</sect3>
<sect3><title>Cannot write to slave <replaceable>SSS</replaceable></title>

<para>This message occurs when the master attempts to send a message
to the slave SSS and gets an error. It indicates that either the slave
machine is not responding (<application>apcupsd</application> died,
the system crashed, ...) or that the network is down.</para>

</sect3>
<sect3><title>Cannot read magic from slave <replaceable>SSS</replaceable></title>

<para>This message indicates that the master attempted to read the
code key from the slave SSS and it did not match the value expected. A
common cause of this problem is that the master and slave versions of
<application>apcupsd</application> are not the same. Please be sure
you are running the same version of <application>apcupsd</application>
on all your master and slave machines.</para>

</sect3>
<sect3><title>Connect to slave SSS failed</title>

<para>This message is logged when the master attempts to connect to
slave SSS and no connection is accepted. The most common cause of this
problem is that the slave copy of <application>apcuspd</application>
is not yet ready to accept connections or is not running. Generally,
<application>apcupsd</application> will retry the connection a bit
later. If the problem is persistent, it can indicate a network problem
or the slave name on the SLAVE directive of the master's configuration
file is incorrect.</para>

</sect3>
<sect3><title>Cannot open stream socket</title>

<para>This indicates a fundamental networking problem on your system &mdash;
either a lack of sufficient resources or you have not configured
TCP/IP operations.</para>
</sect3>
</sect2>
<sect2><title>Error Messages from a Slave Configuration</title>

<para>In a master/slave configuration, you can get the following error
messages from a slave. The error message is followed by a possible
explanation:</para>

<sect3><title>Can't resolve master name <replaceable>MMM</replaceable></title>

<para>This message is logged when the slave attempts to resolve the
name given on the MASTER configuration directive to an IP address. It
probably means that the master name MMM is not defined, your DNS is
not properly working, or you have started
<application>apcupsd</application> in the boot process before the
network is initialized. Check the name MMM, or use an explicit IP
address on the MASTER configuration directive in the slave's
configuration file.</para>

</sect3>
<sect3><title>Cannot bind local address, probably already in use</title>

<para>This means that the slave has attempted to bind the port number
so that it can listen for messages from the master. This can occur if
already have a copy of <application>apcupsd</application> running, or
you have previously run <application>apcupsd</application> in the past
5 or 10 minutes, because occasionally the operating system will not
shutdown a port correctly for 5 to 10 minutes after a program
exits. In this case, you can either wait a few minutes for the problem
to go away, or use a different port in both your master and slave
configuration files.</para>

</sect3>
<sect3><title>Socket accept error</title>

<para>The slave got an error waiting on the accept() system call. This is
probably due to a fundamental networking problem.</para>

</sect3>
<sect3><title>Unauthorized attempt from master <replaceable>MMM</replaceable></title>

<para>The master named MMM (probably an IP address) contacted the slave
but MMM is not the master that was listed on the MASTER
configuration directive in /etc/apcupsd.conf, and consequently, it
is not authorized to communicate with the slave. Please check that
your MASTER and SLAVE names in your slave and master configuration
files respectively are correct.</para>

</sect3>
<sect3><title>Read failure from socket</title>

<para>The slave got an error reading the socket open to the master. This
indicates a fundamental networking problem.</para>

</sect3>
<sect3><title>Bad APC magic from master: <replaceable>MMM</replaceable></title>

<para>The slave received a code key from the master that does not
correspond to the one expected by the slave. The most common cause of
this problem is that you are running a different version of
<application>apcupsd</application> on the master and the slave. Please
ensure that you are running the same version of
<application>apcupsd</application> on all your master and
slaves.</para>

</sect3>
<sect3><title>Bad user magic from master: <replaceable>MMM</replaceable></title>

<para>This message indicates that the master and slave have previously
communicated, but that the code key transmitted with the most
recent message from the master does not correspond to what the
slave expects. This problem is probably due to a network error or
some other user or machine contacting the slave on the network
port.</para>
</sect3>

</sect2>
<sect2><title>Master/Slave Connection Not Working</title>

<para>Master/slave problems are usually related to one of the following
items:</para>

<orderedlist>
  <listitem>
    <para>Improper apcupsd.conf files. A good starting point are the
    master/slave example files in the examples subdirectory of the
    source.</para>
  </listitem>
  <listitem>
    <para>Master or slave IP address or name incorrect. Try ping'ing each
    machine from the other using the names or addresses that you have
    put in the respective apcupsd.conf files.</para>
  </listitem>
  <listitem>
    <para>Make sure no other program is using socket number 6666 or
    change the NETPORT directive in both apcupsd.conf files.</para>
  </listitem>
  <listitem>
    <para>Make sure you are using the same version of apcupsd on both the
    master and slave machines.</para>
  </listitem>
</orderedlist>

</sect2>
</sect1>
</chapter>

<chapter><title>Controlling Multiple UPSes on one Machine</title>

<para>You may want to use your server to control multiple UPSes. This
is possible by proper configuration and by running one copy of
<application>apcupsd</application> for each UPS to be
controlled (recall the <xref linkend='configtypes'/>).</para>

<sect1><title>Configuration</title>

<para>The way to accomplish the above is to ensure that none of the
critical files used by each of the two copies of
<application>apcupsd</application> are the same. By using suitable
configuration options, this is possible.</para>

<sect2><title>The First Copy of <application>apcupsd</application></title>

<para>For example, assuming you have SmartUPSes in both cases, to
configure and install the first copy of
<application>apcupsd</application>, which controls a UPS and Computer
A, one could use the following configuration:</para>

<programlisting>
./configure \
  --prefix=/usr \
  --sbindir=/sbin \
  --with-cgi-bin=/home/http/cgi-bin \
  --enable-cgi \
  --with-css-dir=/home/http/css \
  --with-log-dir=/etc/apcupsd \
  --with-serial-dev=/dev/ttyS0 \
  --enable-pthreads \
  --with-nis-port=3551 \
  --enable-powerflute 
</programlisting>

<para>This is pretty much a &quot;normal&quot; installation using many
of the defaults. Once built and installed, this would control the
first UPS and cause a shutdown of the system when the batteries are
low.  This copy of <application>apcupsd</application> will be started
and stopped automatically when the system is booted and halted.</para>

</sect2>
<sect2><title>The Second Copy of <application>apcupsd</application></title>

<para>To configure and install the second copy of
<application>apcupsd</application>, which controls the second UPS and
Computer B, you could use the following configuration:</para>

<programlisting>
./configure \
  --prefix=$HOME/apcupsd/bin \
  --sbindir=$HOME/apcupsd/bin \
  --enable-cgi \
  --with-cgi-bin=$HOME/apcupsd/bin \
  --with-log-dir=$HOME/apcupsd/bin \
  --with-pid-dir=$HOME/apcupsd/bin \
  --sysconfdir=$HOME/apcupsd/bin \
  --with-lock-dir=$HOME/apcupsd/bin \
  --with-pwrfail-dir=$HOME/apcupsd/bin \
  --with-serial-dev=/dev/ttyS1 \
  --enable-pthreads \
  --with-nis-port=7001 \
  --disable-install-distdir
</programlisting>

<para>Note, in this case, we use considerably more configuration options
to ensure that the system files are placed in a different directory
(<filename>$HOME/apcupsd/bin</filename>). We have also selected a different serial port
and a different NIS (Network Information Server) port. And finally,
we have used the <option>--disable-install-distdir</option> option, which
prevents <command>make install</command> from doing the final system
installation (i.e. the modification of the halt script) since this
was previously done.</para>

</sect2>
<sect2><title>Important Steps after Installation of the Second Copy</title>

<para>After the <command>make install</command> of the second copy of
<application>apcupsd</application> there are a number important steps
to complete. You must either remove or modify the file
<filename>$HOME/apcupsd/bin/apccontrol</filename>, so that it will not
shutdown Computer A when the battery of UPS 2 is low. One suggestion
is to copy <filename>examples/safe.apccontrol</filename> into
<filename>$HOME/apcupsd/bin/apccontrol</filename>. Alternatively, you
could edit the <filename>$HOME/apcupsd/bin/apccontrol</filename> and
delete all statements that attempt to shutdown the machine. Another
important step is to find a way to shutdown Computer B when UPS 2's
battery is low.  Probably the simplest way to do this is to edit
<filename>$HOME/apcupsd/bin/apcupsd.conf</filename> on Computer A so
that this second copy of <application>apcupsd</application> becomes a
network master. Then install a standard slave configuration on
Computer B. Please remember that if UPS 1's batteries are exhausted
before UPS 2's batteries, Computer B may not be properly shutdown. And
at the current time, there is no simple means to make the two copies
of <application>apcupsd</application> running on Computer A
communicate. Thus there are certain risks in such a
configuration. However, these configurations can be very useful for
powering electronic equipment and such.</para>

<para>If Computer B is vitally important, it would probably be better
to purchase a serial port card for it, or perhaps use a USB UPS. To
ensure that it is properly shutdown if Computer A goes down, you could
run a second copy of <application>apcupsd</application> on Computer B
as a slave connected to the main copy of
<application>apcupsd</application> on Computer A. Thus Computer B
would be running two slaves, one driven by the master controlling UPS
1 and the other by the master controlling UPS 2, and Computer B could
be shutdown by the first master that signaled it to do so.</para>
</sect2>
</sect1>
</chapter>

<chapter id='snmp'><title>Support for SNMP UPSes</title>

<para><ulink url='snmp'>snmp</ulink>
To run <application>apcupsd</application> with an SNMP UPS, you need the
following things:</para>

<itemizedlist>
  <listitem>
    <para>An SNMP UPS, for example a Web/SNMP card installed into the 
          SmartSlot.</para>
  </listitem>
  <listitem>
    <para><application>apcupsd</application> version 3.10.0 or higher</para>
  </listitem>
  <listitem>
    <para><ulink url="http://www.net-snmp.org/">Net-SNMP</ulink> library
    (previously known as ucd-snmp) installed</para>
  </listitem>
</itemizedlist>

<sect1><title>Connecting an SNMP UPS</title>

<para>The Simple Network Management Protocol provides an interface to
connect to remote devices through the
network. <application>apcupsd</application> is now capable of using
the SNMP interface of an SNMP-enabled UPS to communicate with an
UPS. Currently <application>apcupsd</application> supports only APC's
PowerNet MIB. To enable the SNMP support it is enough to configure the
correct device in your apcupsd.conf configuration file. The directive
needed for this configuration is:</para>

<programlisting>
DEVICE 192.168.100.2:161:APC:private
</programlisting>

<para>where the directive is made by four parts:</para>
<itemizedlist>
  <listitem>
    <para>IP address of the remote UPS</para>
  </listitem>
  <listitem>
    <para>Remote SNMP port</para>
  </listitem>
  <listitem>
    <para>Kind of remote SNMP agent, currently can only be &quot;APC&quot; for
    APC's powernet MIB</para>
  </listitem>
  <listitem>
    <para>The read-write community string, usually it is
    &quot;private&quot; for read-write access.</para>
  </listitem>
</itemizedlist>

</sect1>
<sect1><title>Building and Installing <application>apcupsd</application></title> 

<para>Follow the instructions in <xref linkend="build_install"/>l,
being sure to include the following options (in addition to any others
you need) on the <emphasis role="bold">./configure</emphasis>
line:</para>

<programlisting>
./configure \
--with-serial-dev=&lt;your-SNMP-device&gt; \
--with-upstype=snmp \
--with-upscable=smart \
--enable-pthreads \
--enable-snmp
</programlisting>

</sect1>
<sect1><title>SNMP Specific Information</title>

<para>The SNMP connection gives less information compared to a serial
smart cable. This is not a problem as the most useful information
is given, together with a number of secondary parameters that are
informative enough to run safely your UPS.</para>

</sect1>
<sect1><title>Known Problems</title>

<para>Currently (as of 3.10.0) the code to power off the UPS needs
special configuration. The killpower command for SNMP UPSes can not be
issued during shutdown as typically at some time during shutdown
operations the network stack is stopped. To overcome this problem it
is needed to modify the <filename>/etc/rc.d/apcupsd</filename> system
control script to tell <application>apcupsd</application> to issue the
power down command (killpower) to the UPS immediately before apcupsd
initiates the system shutdown. For this reason it is paramount to set
your UPS grace time to a value greater than 120 seconds to allow for
clean shutdown operations before the UPS removes the power from its
plugs. To enable correct shutdown operation during powerdown do the
following:</para>

<itemizedlist>
  <listitem>
    <para>Connect to your Web/SNMP card using your favorite web browser,
     go to the UPS configuration menu and change the &quot;Shutdown Delay&quot;
     parameter to 180 seconds or more, depending on how much time your
     system shutdown requires to umount all the filesystems.</para>
  </listitem>
  <listitem>
    <para>Change /etc/rc.d/apcupsd script adding the
'--kill-on-powerfail' to the apcupsd invocation.</para>
  </listitem>
  <listitem>
    <para>Restart your <application>apcupsd</application></para>
  </listitem>
</itemizedlist>

<para>With this setup your UPS operations should be safe.</para>
</sect1>
</chapter>
<chapter><title>Alternate Ways To Run The Network Information Server</title>

<para><application>apcupsd</application> maintains STATUS and EVENTS
data concerning the UPS and its operation. This information can be
obtained over the network using either
<application>apcnisd</application> or
<application>apcupsd</application>'s internal network information
server, which is essentially the same code as
<application>apcnisd</application> but compiled into
<application>apcupsd</application>. Clients on the network make a
connection to the information server and send requests for status or
events data, which the server then transmits to them.</para>

<para>The information served to the network by this interface should
not be confused with master/slave mode that shares a UPS between two
or more computers. That code is described in <xref
linkend="UPS_Sharing"/> of this documentation.</para>

<para>There are three different ways to run the information server
depending on your requirements and preferences. It can be run as 1.  a
standalone program, 2. a standalone program invoked by the inetd
daemon, or 3. as a thread (or child process) of
<application>apcupsd</application> (default configuration). We
recommend option 3 unless you have specific reasons to do
otherwise. Option 3 is what is configured in by default.</para>

<sect1><title>Running the server as a child of <application>apcupsd</application></title>

<para>This is probably the simplest way to run the network information
server. To do so, you simply make sure the <emphasis
role="bold">NETSERVER</emphasis> directive in
<filename>/etc/apcupsd/apcupsd.conf</filename> is <emphasis
role="bold">on</emphasis>, and then stop and restart
<application>apcupsd.</application> It will automatically create the
server thread (or spawn an additional child process named
<application>apcnis</application>) to handle network clients. In the
case where pthreads are enabled, a new thread will be created rather
than a child process to handle the network information requests. Note,
the above modification should not be necessary if you use the default
<filename>apcupsd.conf</filename>, since it is already turned
on.</para>

<para>Although this method is simple, it affords no protection from
the outside world accessing your network server unless you
are behind a firewall. In addition, if there is a bug in the network
server code, or if a malicious user sends bad data, it may be possible
for <application>apcnis</application> to die, in which case, though it
is not supposed to, <application>apcupsd</application> may also exit,
thus leaving your machine without shutdown protection. In addition,
since <application>apcupsd</application> is running at root level, all
threads or any child process will do so also. That being said, most of
us prefer to run the server this way.</para>

<para>With <application>apcupsd</application> version 3.8.2 and later,
you may enable the TCP Libwrap subroutines to add additional
security. In this case, access to the network server will be
controlled by the statements you put in
<filename>/etc/hosts.allow</filename>.</para>

</sect1>
<sect1><title id="ApcnisdINETD">Running apcnisd from INETD</title>

<para>This is probably the most secure and most desirable way of
running the network information server. Unfortunately, it is a bit
more complicated to set up. However, once running, the server remains
unexecuted until a connection is attempted, at which point, inetd will
invoke <application>apcnisd</application>. Once
<application>apcnisd</application> has responded to the client's
requests, it will exit. None of the disadvantages of running it
standalone apply since <application>apcnisd</application> runs only
when a client is requesting data. Note, running in this manner works
only if you are using the old forking code and have pthreads
explicitly turned off. The pthreads version of
<application>apcupsd</application> does not support the shared memory
calls that are necessary for <application>apcnisd</application> to
access the internal state of
<application>apcupsd</application>.</para>

<para>An additional advantage of this method of running the network
information server is that you can call it with a TCP wrapper and thus
use access control lists (ACL) such as
<filename>hosts.allow</filename>. See the man pages for
<filename>hosts.allow</filename> for more details.</para>

<para>To configure <application>apcnisd</application> to run from
INETD, you must first put an entry in
<filename>/etc/services</filename> as follows:</para>

<programlisting>
apcnisd         3551/tcp
</programlisting>

<para>This defines the port number (3551) and the service (TCP) that
<application>apcnisd</application> will be using. This statement can
go anywhere in the services file. Normally, one adds local changes
such as these to the end of the file.</para>

<para>Next, you must modify <filename>/etc/inetd.conf</filename> to have the
following line:</para>

<programlisting>
apcnisd stream  tcp     nowait  root    /usr/sbin/tcpd  /sbin/apcnisd -i
</programlisting>

<para>If you do not want to run the TCP wrapper, then the line should
be entered as follows (not tested):</para>

<programlisting>
apcnisd stream  tcp     nowait  root    /sbin/apcnisd -i
</programlisting>

<para>Please check that the file locations are correct for your
system. Also, note that the <option>-i</option> option is necessary so
that <application>apcnisd</application> knows that it was called by
INETD. Before restarting INETD, first ensure that the <emphasis
role="bold">NETSERVER</emphasis> directive in
<filename>/etc/apcupsd/apcupsd.conf</filename> is set to <emphasis
role="bold">off</emphasis>. This is necessary to prevent
<application>apcupsd</application> from starting a child process that
acts as a server. If you change <emphasis
role="bold">NETSERVER</emphasis>, you must stop and restart
<application>apcupsd</application> for the configuration change to be
effective.</para>

<para>Finally, you must restart INETD for it to listen on port 3551.
On a Red Hat system, you can do so by:</para>

<programlisting>
/etc/rc.d/init.d/inet reload
</programlisting>

<para>At this point, when a client attempts to make a connection on
port 3551, INETD will automatically invoke
<application>apcnisd</application>.</para>

</sect1>
<sect1><title>Running <application>apcnisd</application> Standalome</title>

<para>This is probably the least desirable of the three ways to run an
<application>apcupsd</application> network information server because
if <application>apcupsd</application> is stopped, you must also stop
<application>apcnisd</application> before you can restart
<application>apcupsd</application>. This is because
<application>apcnisd</application>, when run standalone, holds the
shared memory buffer by which <application>apcnisd</application> and
<application>apcupsd</application> communicate. This prevents a new
execution of <application>apcupsd</application> from creating
it.</para>

<para>To execute <application>apcnisd</application> in standalone
mode, first ensure that the <emphasis role="bold">NETSERVER</emphasis>
directive in <emphasis
role="bold">/etc/apcupsd/apcupsd.conf</emphasis> is set to <emphasis
role="bold">off</emphasis>. This is necessary to prevent
<application>apcupsd</application> from starting a child process that
acts as a server. Restart <application>apcupsd</application> normally,
then:</para>

<programlisting>
/sbin/apcnisd
</programlisting>

<para>The advantage of running the network information server
standalone is that if for some reason, a client causes the network
server to crash, it will not affect the operation of
<application>apcupsd</application>.</para>
</sect1>
</chapter>
<chapter><title><application>apcupsd</application> System Logging</title>

<para>The <application>apcupsd</application> philosophy is that all
logging should be done through the <emphasis
role="bold">syslog</emphasis> facility (see: <command>man
syslog</command>). This is now implemented with the exceptions that
<emphasis role="bold">STATUS</emphasis> logging, for compatibility,
with prior versions is still done to a file, and <emphasis
role="bold">EVENTS</emphasis> logging can be directed to a
&quot;temporary&quot; file so that it can be reported by the network
information server.</para>

<sect1><title>Logging Types</title>

<para><application>apcupsd</application> splits its logging into four
separate types called:</para>

<orderedlist>
  <listitem>
    <para>DEBUG</para>
  </listitem>
  <listitem>
    <para>DATA</para>
  </listitem>
  <listitem>
    <para>STATUS</para>
  </listitem>
  <listitem>
    <para>EVENTS</para>
  </listitem>
</orderedlist>

<para>Debug logging consists of debug messages. Normally these are
turned on only by developers, and currently there exist very few of
these debug messages.</para>

<bridgehead>DATA Logging</bridgehead>

<para>Data logging consists of periodically logging important data
concerning the operation of the UPS. See the <link
linkend='datalogging'>Data Logging</link> section of this manual for
more details.</para>

<bridgehead>STATUS Logging</bridgehead>

<para>Status logging consists of logging all available information known
about your UPS as a series of ASCII records. This information is
also made available by the <application>apcupsd</application> network
information server.</para>

<para>For more details on STATUS logging, see the <link
linkend="statusformat">Status</link> section of the Technical
Reference.</para>

<bridgehead>EVENTS Logging</bridgehead>

<para>Events logging consists of logging events as they happen. For
example, successful startup, power fail, battery failure, system
shutdown, ...</para>

<para>See the manual section on <link linkend='events'>customizing event
handling</link> for more details.</para>

</sect1>
<sect1><title>Implementation Details</title>

<para>In order to ensure that the data logged to syslog() can be directed
to different files, I have assigned syslog() levels to each of our
four types of data as follows:</para>

<orderedlist>
<listitem><para>1. DEBUG logging has level LOG_DEBUG</para></listitem>

<listitem><para>2. DATA logging has level LOG_INFO</para></listitem>

<listitem><para>3. STATUS logging has level LOG_NOTICE</para></listitem>

<listitem><para>4. EVENTS logging has levels LOG_WARNING, LOG_ERR, 
LOG_CRIT, and LOG_ALERT</para></listitem>
</orderedlist>

<para>It should be noted that more work needs to be done on the
precise definitions of each of the levels for EVENTS logging.
Currently, it is roughly broken down as follows:</para>

<para>LOG_WARNING general information such as startup, etc.</para>

<para>LOG_ERR an error condition detected, e.g. communications problem
with the UPS.</para>

<para>LOG_CRIT a serious problem has occurred such as power failure,
running on UPS batteries, ...</para>

<para>LOG_ALERT a condition that needs immediate attention such as
pending system shutdown, ...</para>

<para>The default Facility for syslog() logging is DAEMON, although this
can be changed with the FACILITY directive in apcupsd.conf. In the
following example, we should the facility as local0.</para>

<para>More work needs to be done to the code to ensure that it
corresponds to the above levels.</para>

<para>As a practical example of how to setup your syslog() to use the
new logging feature, suppose you wish to direct all DATA logging to a
file named <filename>/var/log/apcupsd.data</filename>, all EVENTS to
the standard <filename>/var/log/messages</filename> file (to be mixed
with other system messages), and at the same time send all EVENTS to
<filename>/var/log/apcupsd.events</filename>, and finally, you want to
send all STATUS logging to the named pipe
<filename>/var/log/apcupsd.status</filename></para>

<para>First as root, you create the named pipe:</para>

<programlisting>
mkfifo /var/log/apcupsd.status
</programlisting>

<para>Change its permissions as necessary or use the -m option to set
them when creating the pipe.</para>

<para>Then you modify your <filename>/etc/syslog.conf</filename> file
to direct the appropriate levels of messages where you want them. To
accomplish the above, my syslog.conf file looks like:</para>

<programlisting>
# exclude all apcupsd info by default
*.info;local0.none                    /var/log/messages

# Everything for apcupsd goes here
local0.info;local0.!notice             /var/log/apcupsd.data
local0.notice;local0.!warn            |/var/log/apcupsd.status
local0.warn                            /var/log/apcupsd.events
local0.warn                            /var/log/messages
</programlisting>

</sect1>
<sect1><title>Developer's Notes</title>

<para>All logging functions and all error reporting are now done
through the log_event() subroutine call. Exceptions to this are:
initialization code where printf's are done, and writing to the
status file. Once the initialization code has completed and the
fork() to become a daemon is done, no printf's are used.
log_event() has exactly the same format as syslog(). In fact, the
subroutine consists of only a syslog() call. If anyone really
wishes to log to a file, the code to do so can easily be done by
adding code to log_event() in apclog.c.</para>

</sect1>
</chapter>
</part>
<part id='win32'><title>Legacy Installation: Windows</title>

<chapter><title>The Windows Version of <application>apcupsd</application></title>

<para>The Windows version of <application>apcupsd</application> has
been tested on Win95, Win98, WinMe, WinNT, WinXP, and Win2000
systems. This version of <application>apcupsd</application> has been
built to run under the CYGWIN environment, which provides many of the
features of Unix on Windows systems. It also permitted a rapid port
with very few source code changes, which means that the Windows
version is for the most part running code that has long proved stable
on Unix systems. Even though the Win32 version of
<application>apcupsd</application> is a port that relies on many Unix
features, it is just the same a true Windows program. When running, it
is perfectly integrated with Windows and displays its icon in the
system icon tray, and provides a system tray menu to obtain additional
information on how <application>apcupsd</application> is running
(status and events dialogue boxes). If so desired, it can also be
stopped by using the system tray menu, though this should normally
never be necessary.</para>

<para>Once installed <application>apcupsd</application> normally runs
as a system service.  This means that it is immediately started by the
operating system when the system is booted, and runs in the background
even if there is no user logged into the system.</para>

<sect1><title>Installation</title>

<para>Normally, you will install the Windows version of
<application>apcupsd</application> from the binaries. This install is
somewhat Unix like since you do many parts of the installation by
hand. To install the binaries, you need <emphasis
role="bold">WinZip</emphasis>.</para>

<itemizedlist>
<listitem>
  <para>Simply double click on the
  <filename>winapcupsd-3.8.5.tar.gz</filename> icon.  The actual name
  of the icon will vary from one release version to another.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="wininstall3.png" depth="299" width="254"/>
      </imageobject>
    </mediaobject>
  </listitem>
  <listitem>
    
  <para>When Zip says that it has one file and asks if it should unpack
  it into a temporary file, respond with <emphasis
  role="bold">Yes</emphasis>.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="wininstall4.png" depth="152" width="374"/>
      </imageobject>
    </mediaobject>
  </listitem>
  <listitem>
    
  <para>Ensure that you extract all files and that the extraction will
  go into <filename>C:\</filename></para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="wininstall5.png" depth="246" width="486"/>
      </imageobject>
    </mediaobject>
  </listitem>
</itemizedlist>

<para>If you wish to install the package elsewhere, please note that you
will need to proceed with a manual installation, which is not
particularly easy as you must rebuild the source and change the
configuration file as well.</para>

<para>This installation assumes that you do <emphasis
role="bold">not</emphasis> have CYGWIN installed on your computer. If
you do, and you use mount points, you may need to do a special manual
installation.</para>

<para>Once you have unzipped the binaries, open a window pointing to
the binary installation folder (normally
<filename>c:\apcupsd</filename>). This folder should contain folders
with the name bin, etc, examples, and manual. If and when you no
longer need them, the examples and manual sub-folders of the
<filename>c:\apcupsd</filename> directory may be removed.</para>

<para>Continuing the installation process:</para>
<itemizedlist>
  <listitem>
    <para>Open the directory <filename>c:\apcupsd\etc\apcupsd</filename>
    in the Windows Explorer by Clicking on the apcupsd folder then on the
    <filename>etc</filename> folder, then on the apcupsd folder. Finally
    double click on the file <filename>apcupsd.conf</filename> and edit it
    to contain the values appropriate for your site. In most cases, no
    changes will be needed, but if you are not using COM1 for your serial
    port, you will need to set the <emphasis role="bold">DEVICE</emphasis>
    configuration directive to the correct serial port. Note, if you are
    using WinNT or Win2000, the operating system may probe the port
    attempting to attach a serial mouse. This will cause
    <application>apcupsd</application> to be unable to communicate with
    the serial port. If this happens, or out of precaution, you can edit
    the <filename>c:\boot.ini</filename> file. Find the line that looks
    something like the following:</para>

    <para>multi(0)disk(0)rdisk(0)partition(1)\WINNT=&quot;Windows NT
    Workstation Version 4.00&quot;</para>

    <para>and add the following to the end of the line: /NoSerialMice:COM1
    (or COM2 depending on what you want to use). The new line should
    look similar to:</para>

    <para>multi(0)disk(0)rdisk(0)partition(1)\WINNT=&quot;Windows NT
    Workstation Version 4.00&quot; /NoSerialMice:COM1</para>

    <para>where the only thing you have changed is to append to the end of
    the line. This addition will prevent the operating system from
    interferring with <application>apcupsd</application></para>
  </listitem>
  <listitem> 
    <para>Then return to <filename>c:\apcupsd</filename> and open on the
    <filename>bin</filename> folder so that you see its contents.</para>
  </listitem>
  <listitem>
    <para>To do the final step of installation, double click on the
    <filename>setup.bat</filename> program. This script will setup the
    appropriate mount points for the directories that
    <application>apcupsd</application> uses, it will install
    <application>apcupsd</application> in the system registry, and on
    Windows 98, it will start <application>apcupsd</application>
    running.</para>

    <para>If everything went well, you will get something similar to the
    following output in a DOS shell window:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="wininstall1.png" depth="359" width="652"/>
      </imageobject>
    </mediaobject>

    <para>What is important to verify in the DOS window is that the root
    directory <filename>\</filename> is mounted on device
    <filename>c:\</filename>.</para>

    <para>The DOS window will be followed immediately by a Windows
    dialogue box as follows:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="wininstall2.png" depth="139" width="324"/>
      </imageobject>
    </mediaobject>
  </listitem>
  <listitem>
    <para>On Windows 98, to actually start the service, either reboot the
    machine, which is not necessary, or open a DOS shell window, and
    type the following commands:</para>

    <programlisting>
    cd c:\apcupsd\bin
    apcupsd /service
    </programlisting>

    <para>Alternatively, you can go to the
    <filename>c:\apcupsd\bin</filename> folder with the Explorer and
    double click on the <emphasis role="bold">Start</emphasis>
    icon.</para>
  </listitem>
  <listitem>
    <para>On Windows NT, to start the service, either reboot the machine,
    which is not necessary, or go to the Control Panel, open the Services
    folder and start the <application>apcupsd</application> daemon program
    by selecting the <application>apcupsd</application> UPS Server and
    then clicking on the Start button as shown below:</para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="wininstall6.png" depth="339" width="672"/>
      </imageobject>
    </mediaobject>
    <para>If the Services dialog reports a problem, it is normally
    because your DEVICE statement does not contain the correct serial
    port name.</para>
  </listitem>
</itemizedlist>

<para>You probably should also click on the <emphasis
role="bold">Startup...</emphasis> button to ensure that the correct
defaults are set. The dialogue box that appears should have <emphasis
role="bold">Startup Type</emphasis> set to <emphasis
role="bold">Automatic</emphasis> and <emphasis
role="bold">Logon</emphasis> should be set to <emphasis
role="bold">System Account</emphasis> with <emphasis role="bold">Allow
Service to Interact with Desktop</emphasis> checked. If these values
are not set correctly by default, please change them otherwise
<application>apcupsd</application> will not work.</para>

<para>For WinXP systems (and probably Win2K), the dialogs are a bit
different from those shown here for WinNT, but he concept is the
same. You get to the Services dialog by clicking on: <emphasis
role="bold">Control Panel -&gt; Administrative Tools -&gt; Component
Services</emphasis>. The <application>apcupsd</application> service
should appear in the right hand window when you click on <emphasis
role="bold">Services (Local)</emphasis> in the left hand menu
window.</para>

<para>That should complete the installation process. When the system
tray icon turns from a battery
<inlinemediaobject><imageobject><imagedata fileref="onbatt.png"
depth="16" width="16"/></imageobject></inlinemediaobject> into a plug
<inlinemediaobject><imageobject><imagedata fileref="online.png"
depth="16" width="16"/></imageobject></inlinemediaobject>, right click
on it and a menu will appear. Select the <emphasis
role="bold">Events</emphasis> item, and the Events dialogue box should
appear. There should be no error messages. By right clicking again on
the system tray plug and selecting the <emphasis
role="bold">Status</emphasis> item, you can verify that all the values
for your UPS are correct.</para>

<para>When the UPS switches to the battery, the battery icon will
reappear in the system tray. While the UPS is online, if the battery
is not at least 99% charged, the plug icon will become a plug with a
lightning bolt in the middle
<inlinemediaobject><imageobject><imagedata fileref="charging.png"
depth="16" width="16"/></imageobject></inlinemediaobject> to indicate
that the battery is charging.</para> 

</sect1>
<sect1><title>Installation Directory</title>

<para>The Win32 version of <application>apcupsd</application> must
reside in the <filename>c:\apcupsd\</filename> directory, and there
must be a <filename>c:\tmp</filename> directory on your machine. The
installation will do this automatically, and we recommend that you do
not attempt to place <application>apcupsd</application> in another
directory. If you do so, you are on your own, and you will need to do
a rebuild of the source.</para> </sect1>
<sect1><title>Testing</title>

<para>It would be hard to overemphasize the need to do a full testing
of your installation of <application>apcupsd</application> as there
are a number of reasons why it may not behave properly in a real power
failure situation.</para>

<para>Please read <xref linkend="testing"/> of
this document for general instructions on testing the Win32
version. However, on Win32 systems, there is no Unix system log
file, so if something goes wrong, look in the file
<filename>c:\apcupsd\etc\apcupsd\apcupsd.events</filename> where apcupsd
normally logs its events, and you will generally find more detailed
information on why the program is not working. The most common
cause of problems is either improper configuration of the cable
type, or an incorrect address for the serial port.</para>

</sect1>
<sect1><title>Upgrading</title>

<para>On Win98 and Win95 systems, to upgrade to a new release, simply
stop <application>apcupsd</application> by using the tray icon and
selecting the <emphasis role="bold">Close
<application>apcupsd</application></emphasis> menu item, or by double
clicking on the <emphasis role="bold">Stop</emphasis> icon located in
the <filename>c:\apcupsd\bin</filename> directory, then apply the
upgrade and restart <application>apcupsd</application>.</para>

<para>On WinNT systems (and Win2000 systems), you may stop
<application>apcupsd</application> as indicated abover or
alternatively you may stop <application>apcupsd</application> by using
the <emphasis role="bold">Services</emphasis> item in the <emphasis
role="bold">Control Panel</emphasis>. In addition, at least on my
system, there seems to be a WinNT bug that causes the system to
prevent <emphasis role="bold">apcupsd.exe</emphasis> from being
overwritten even though the file is no longer being used.  This is
manifested by an error message when attempting load a new version and
overwrite the old <application>apcupsd.exe</application> (the extract
part of WinZip as described above). To circumvent this problem (if it
happens to you), after shutting down the running version of
<application>apcupsd</application>, through the <emphasis
role="bold">Services</emphasis> dialogue in the <emphasis
role="bold">Control Panel</emphasis>, first click on the <emphasis
role="bold">Stop button</emphasis>:</para>

<mediaobject>
  <imageobject>
    <imagedata fileref="wininstall6.png" depth="339" width="672"/>
  </imageobject>
</mediaobject>

<para>then click on the <emphasis role="bold">Startup ...</emphasis>
button, and in the Startup dialogue select the <emphasis
role="bold">Disabled</emphasis> button to disable
<application>apcupsd</application>:</para>

<mediaobject>
  <imageobject>
    <imagedata fileref="wininstall7.png" depth="405" width="382"/>
  </imageobject>
</mediaobject>

<para>After closing the dialogues, reboot the system, typical of
Microsoft :-(. When the system comes back up,
<application>apcupsd</application> will not be automatically launched
as a service, and you can install the new version. To reinstate
<application>apcupsd</application> as an automatic service, using the
<emphasis role="bold">Control Panel</emphasis>: reset
<application>apcupsd</application> to <emphasis
role="bold">Automatic</emphasis> startup in the Startup dialogue, then
restart <application>apcupsd</application> in the <emphasis
role="bold">Services</emphasis> dialogue as shown above in the
installation instructions. Frequently after an upgrade, you will click
on the <emphasis role="bold">Start</emphasis> button and after a few
seconds, the system reports that it failed to start. The cause of this
problem is unknown, but the solution is simply to click again on the
<emphasis role="bold">Start</emphasis> button.</para> </sect1>
<sect1><title>Post
Installation</title>

<para>After installing <application>apcupsd</application> and before
running it, you should check the contents of two files to ensure that
it is configured properly for your system. The first is
<filename>c:\apcupsd\etc\apcupsd\apcupsd.conf</filename>. You will
probably need to change your UPSCABLE directive, your UPSTYPE and
possibly your DEVICE directives. Please refer to the configuration
section of this manual for more details.</para>

<para>The second file that you should examine is
<filename>c:\apcupsd\etc\apcupsd\apccontrol</filename>. This file is
called by <application>apcupsd</application> when events (power loss,
etc) are generated. It permits the user to program handling the
event. In particular, it permits the user to be notified of the
events. For the Win32 version, each event is programmed to display a
Windows popup dialogue box. If your machine is mostly unattended, you
may want to comment out some of these popup dialogue boxes by putting
a pound sign (#) in column one of the appropriate line.</para>

</sect1>
<sect1><title>Problem Areas</title>

<para>In addition to possible problems of reinstallation or upgrade on
WinNT systems, as noted above, we have discovered the following
problem: On some Windows systems, the domain resolution does not seem
to work if you have not configured a DNS server in the Network section
of the Control Panel. This problem should be apparent only when
running a master or a slave configuration. In this case, when you
specify the name of the master or the slave machine(s) in your
<filename>apcupsd.conf</filename> file, apcupsd will be unable to
resolve the name to a valid IP address. To circumvent this problem,
simply enter all machine addresses as an IP address rather than a
domain name, or alternatively, ensure that you have a valid DNS server
configured on your system (often not the case on Win32 systems).  For
example, instead of using the directive &quot;MASTER
my.master.com&quot; use something like &quot;MASTER 192.168.1.54&quot;
where you replace the IP address with your actual IP address.</para>

<para>Also, on WinNT systems, the PIF files in
<filename>/apcupsd/bin</filename> used for starting and stopping
<application>apcupsd</application> do not work. Use the services
control panel instead.</para>

<para>On Win95 systems, there are reports that the PIF files do not
work. If you find that to be the case, the simplest solution is to use
the batch files that we have supplied in the
<filename>c:/apcupsd/bin</filename> directory. Also, on Win95 systems,
we have an unconfirmed report that indicates that
<application>apcupsd</application> does not start automatically as a
service even though the Registry has been properly updated. If you
experience this problem, a work around is to put a shortcut to
<application>apcupsd</application> in the StartUp folder.</para>

<para>As noted above, after an upgrade, you may need to start
<application>apcupsd</application> several times before it will
actually run.</para>

<para>On WinNT, WinXP, and Win2K systems, you can examine the System
Applications log to which <application>apcupsd</application> writes
Windows error messages during startup.</para>

<para>Regardless of which Windows system you are running,
<application>apcupsd</application> logs most error messages to
<filename>c:\apcupsd\etc\apcupsd\apcupsd.events</filename>. This type
error messages such as configuration file not found, etc are written
to this file.</para>

</sect1>
<sect1><title>Utility Functions</title>

<para>The directory <filename>c:\apcupsd\bin</filename> contains six
utility routines (actually .pif files) that you may find useful. They
are:</para>

<programlisting>
Start
Stop
Install
Uninstall
ups-events
ups-status
</programlisting>

<para>Any of these utilities may be used on any system, with the
exception of the Start utility, which cannot be used on WinNT and
Win2000 systems. On those systems, the apcupsd service must always be
started through the <emphasis role="bold">Services</emphasis>
sub-dialogue of the <emphasis role="bold">Control
Panel</emphasis>.</para>

<para>The <emphasis role="bold">Install</emphasis> and <emphasis
role="bold">Uninstall</emphasis> utilities install and uninstall
apcupsd from the system registry only. All other pieces (files) of
apcupsd remain intact. It is not absolutely necessary for apcupsd to
be installed in the registry as it can run as a regular
program. However, if it is not installed in the registry, it cannot be
run as a service.</para>

<para>The functions of <emphasis role="bold">Stop</emphasis>,
<emphasis role="bold">ups-events</emphasis>, and <emphasis
role="bold">ups-status</emphasis> can be more easily invoked by right
clicking on the apcupsd icon in the system tray and selecting the
desired function from the popup menu.</para>

</sect1>
<sect1><title>Disclaimer</title>

<para>Some of the features such as EEPROM programming have not been
exhaustively tested on Win32 systems. If at all possible, we
recommend not to use it as a network master on Win95, Win98, and
WinMe due to the instability of those operating systems.</para>

<para>Some items to note:</para>

<itemizedlist>
  <listitem>    
    <para>This version of apcupsd will not attempt to shut off the
    UPS power when the battery is exhausted. Thus if the power returns
    before the UPS completely shuts down, your computer may not reboot
    automatically. This is because we do not know how to regain control
    after the disks have been synced in order to shut off the UPS
    power.</para>

    <para>Nevertheless, it is possible to use the
    <option>--kill-on-powerfail</option> option on the apcupsd command
    line, but the use of this option could cause the power to be cut
    off while your machine is still running. See <xref
    linkend="shutdown"/> of this document for a more complete
    discussion of this subject. If you are still interested in trying
    to get this to work, please look at the code that is commented out
    in <filename>c:\apcupsd\etc\apcupsd\apccontrol</filename> under
    the <emphasis role="bold">doshutdown</emphasis> case.</para>

    <para>An alternative to the <option>--kill-on-powerfail</option>
    option is to use the <link linkend="KILLDELAY">KILLDELAY</link>
    configuration directive.</para>

    <para>This configuration directive is appropriate on Windows machines
    where apcupsd continues to run even when the machine is
    halted (as is the case on most NT machines).</para>
  </listitem>
  <listitem>
    <para>When apcupsd detects important events, it calls
    <filename>c:\apcupsd\etc\apcupsd\apccontrol</filename>, which is a
    Unix shell script. You may modify this script to suit your
    particular needs.  Currently, it puts a Windows dialogue on the
    screen with a brief explanation of the event. If these dialogues
    annoy you, you can remove or comment out the calls to <emphasis
    role="bold">popup</emphasis> from this file.</para>
  </listitem>
</itemizedlist>

</sect1>
<sect1><title>Email Notification of Events</title>

<para>On Win95/98 systems, it is possible to receive notification of
apcupsd events that are passed to
<application>apccontrol</application>. This is possible using a simple
email program that unfortunately is not functioning 100% correctly. In
addition, I (Kern) was not able to make this program work on WinNT
while apcupsd is running as a service under the system account (it
works fine with any user account).</para>

<para>If you wish to try this program on Win95/98 systems, look at the
files named <emphasis role="bold">changeme, commfailure, commok,
onbattery, and mainsback</emphasis> in the directory
<filename>c:\apcupsd\examples</filename>. To use them, you must modify
the SYSADMIN variable to have a valid email address, then copy the
files into the directory
<filename>c:\apcupsd\etc\apcupsd</filename>.</para>

</sect1>
<sect1><title>Killpower under Windows</title>

<para>If your batteries become exhausted during a power failure and
you want your machine to automatically reboot when the power comes
back, it is useful to implement the
<application>killpower</application> feature of the UPS where apcupsd
sends the UPS the command to shut off the power.  In doing so, the
power will be cut to your PC and if your BIOS is properly setup, the
machine will automatically reboot when the power comes back. This is
important for servers.</para>

<para>This feature is implemented on Unix systems by first requesting
a system shutdown. As a part of the shutdown, apcupsd is terminated
by the system, but the shutdown process executes a script where
apcupsd is recalled after the disks are synced and the machine is
idle. Bacula then requests the UPS to shut off the power
(killpower).</para>

<para>Unfortunately on Windows, there is no such shutdown script that
we are aware of and no way for apcupsd to get control after the
machine is idled. If this feature is important to you, it is
possible to do it by telling apcupsd to immediately issue the
killpower command after issuing the shutdown request. The danger in
doing so is that if the machine is not sufficiently idled when the
killpower takes place, the disks will need to be rescanned (and
there is a possibility of lost data however small). Generally,
UPSes have a shutdown grace period which gives sufficient time for
the OS to shutdown before the power is cut.</para>

<para>To implement this feature, you need to add the
<option>-p</option> option to the apcupsd command line that is
executed by the system.  Currently the procedure is manual. You do so
by editing the registry and changing the line:</para>

<programlisting>
c:\apcupsd\apcupsd.exe /service
</programlisting>

<para>found under the key:</para>

<programlisting>
HKEY_LOCAL_MACHINE Software\Microsoft\Windows\CurrentVersion\RunServices
</programlisting>

<para>to</para>

<programlisting>
c:\apcupsd\apcupsd.exe /service -p
</programlisting>

<para>If you have a Smart UPS, you can configure the kill power grace
period, and you might want to set it to 3 minutes. If you have a
dumb UPS, there is no grace period and you should not use this
procedure. If you have a Back-UPS CS or ES, these UPSes generally
have a fixed grace period of 2 minutes, which is probably
sufficient.</para>

</sect1>
<sect1><title>Power Down During Shutdown</title>

<para>Our philosophy is to shutdown a computer but not to power it down
itself (as opposed to having the UPS cut the power as described
above). That is we prefer to idle a computer but leave it running.
This has the advantage that in a power fail situation, if the
killpower function described above does not work, the computer will
continue to draw down the batteries and the UPS will hopefully
shutoff before the power is restore thus permitting an automatic
reboot. </para>

<para>Nevertheless some people prefer to do a full power down. To do
so, you might want to get a copy of PsShutdown, which does have a
power down option. You can find it and a lot more useful software at:
<ulink
url="http://www.sysinternals.com/ntw2k/freeware/pstools.shtml">http://www.sysinternals.com/ntw2k/freeware/pstools.shtml</ulink>.
to use their shutdown program rather than the apcupsd supplied
version, you simply edit:</para>

<programlisting>
c:\apcupsd\etc\apcupsd\apccontrol
</programlisting>

<para>with any text editor and change our calls to shutdown to
psshutdown.</para>
</sect1>
<sect1><title>Command Line Options Specific to the Windows Version</title>

<para>These options are not normally seen or used by the user, and are
documented here only for information purposes. At the current time,
to change the default options, you must either manually run
apcupsd or you must manually edit the system registry and
modify the appropriate entries.</para>

<para>In order to avoid option clashes between the options necessary
for apcupsd to run on Windows and the standard
apcupsd options, all Windows specific options are signaled
with a forward slash character (/), while as usual, the standard
apcupsd options are signaled with a minus (-), or a minus
minus (--). All the standard apcupsd options can be used on
the Windows version. In addition, the following Windows only
options are implemented:</para>

<variablelist>
  <varlistentry>
    <term>/servicehelper</term>
    <listitem>
      <para>Run the service helper application</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>/service</term>
    <listitem>
      <para>Start apcupsdas a service</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>/run</term>
    <listitem>
      <para>Run the apcupsd application</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>/install</term>
    <listitem>
      <para>Install apcupsd as a service in the system registry</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>/remove</term>
    <listitem>
      <para>Uninstall apcupsd from the system registry</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>/about</term>
    <listitem>
      <para>Show the apcupsd about dialogue box</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>/status</term>
    <listitem>
      <para>Show the apcupsd status dialogue box</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>/events</term>
    <listitem>
      <para>Show the apcupsd events dialogue box</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>/kill</term>
    <listitem>
      <para>Stop any running apcupsd</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>/help</term>
    <listitem>
      <para>Show the apcupsd help dialogue box</para>
    </listitem>
  </varlistentry>
</variablelist>

<para>It is important to note that under normal circumstances the user
should never need to use these options as they are normally handled
by the system automatically once apcupsd is installed.
However, you may note these options in some of the .pif files that
have been created for your use.</para>

</sect1>
<sect1><title>Building the Win32 Version from the Source</title>

<para>If you have the source code, follow the standard procedures for
building <application>apcupsd</application> on Unix in <xref
linkend='build_install'/> of this manual. Please don't forget to look
at the system specifics for CYGWIN.</para>
</sect1>
</chapter>
</part>
<part id='legacy'><title>Legacy Installation: Serial-Line UPSes</title>

<chapter><title>Overview of Serial-Interface UPSes</title>

<para>If you have a UPS that communicates via serial port, you need to
do two things before you can even think about configuring the
software. First, you need to figure out whether it's a dumb
(voltage-signalling) UPS or speaks the apcsmart protocol (see <link
linkend='upstypes'>this discussion</link>).  Second, if you have an
interface cable from APC, you need to figure out what kind it is.  If
you don't have such a cable, you need to build one.  A
straight-through serial cable <link linkend='crazy'>won't
work</link>.</para>

</chapter>
<chapter><title>Connecting a Serial-Line UPS to a USB Port</title>

<para>By using a special adaptor, you can connect your serial-line UPS
to a USB port. If you would like to free up your serial port and
connect your existing serial port UPS to a USB port, it is possible if
you have one of the later kernels. You simply get a serial to USB
adapter that is supported by the kernel, plug it in and make one minor
change to your <filename>apcupsd.conf</filename> file and away you
go. (Kern adds: Thanks to Joe Acosta for this out to
me.)</para>

<para>The device that Joe Acosta and Kern are using is IOgear guc232a USB 2
serial adapter. There may be other adapters that work equally well.
If you know of one, please let us know.</para>

<para>At Kern's site, running Red Hat 7.1 with kernel 2.4.9-12, he
simply changed his <filename>/etc/apcupsd/apcupsd.conf</filename>
configuration line to be:</para>

<programlisting>
DEVICE /dev/ttyUSB0
</programlisting>

<para>Depending on whether or not you have <emphasis
role="bold">hotplug</emphasis> working, you may need to explicitly
load the kernel modules <emphasis role="bold">usbserial</emphasis> and
<emphasis role="bold">pl2303</emphasis>. In Kern's case, this was not
necessary.</para>

<para>In fact, it turns out the protocol adaptor isn't necessary if
you have the right cable.  The ports on APC USB UPSes not only speak
USB, but also serial apcsmart and dumb voltage-signalling as well!
This is something that one of our users discovered by accident. With the
Custom RJ45 cable described below plugged into the APC UPS USB socket at
one end and the other end plugged into a serial port on your PC, any
APPC USB UPS will act as a serial-line device.</para>

</chapter>

<chapter id='cables'><title>Cables</title>

<para>You can either use the cable that came with your UPS
(the easiest if we support it) or you can make your own cable. We
recommend that you obtain a supported cable directly from APC.</para>
<para>If you already have an APC cable, you can determine what kind it
is by examining the flat sides of the two connectors where you will
find the cable number embossed into the plastic. It is generally on
one side of the male connector.</para>

<para>To make your own cable you must first know whether you have a
UPS that speaks the apcsmart protocol or a &quot;dumb&quot; UPS that
uses serial port line voltage signalling.</para>

<para>If you have an apcmart UPS, and you build your
own cable, build a <emphasis>Smart-Custom</emphasis> cable. If you
have a voltage-Signalling or dumb UPS, build a
<emphasis>Simple-Custom</emphasis> cable. If you have a BackUPS CS
with a RJ45 connector, you can build your own
<emphasis>Custom-RJ45</emphasis> cable.</para>

<sect1 id='custom_smart'><title>Smart-Custom Cable for SmartUPSes</title>

<literallayout>
  SMART-CUSTOM CABLE

Signal Computer                  UPS
       DB9F                     DB9M
 RxD    2   --------------------  2  TxD  Send
 TxD    3   --------------------  1  RxD  Receive
 GND    5   --------------------  9  Ground
</literallayout>

<para>When using this cable with <application>apcupsd</application>
specify the following in <filename>apcupsd.conf</filename>:</para>
<para>
If you have an OS that requires DCD or RTS to be set before
you can receive input, you might try building the standard
APC Smart 940-0024C cable listed below.
</para>
<programlisting>
UPSCABLE smart
UPSTYPE apcsmart
DEVICE /dev/ttyS0 (or whatever your serial port is)
</programlisting>
<para>
If you wish to build the standard cable furnished by
APC (940-0024C), use the following diagram. </para>
<literallayout>
  APC Smart Cable 940-0024C

Signal Computer                  UPS
       DB9F                     DB9M
 RxD    2   --------------------  2  TxD  Send
 TxD    3   --------------------  1  RxD  Receive
 DCD    1   --*
              |
 DTR    4   --*
 GND    5   --------------------  9  Ground
 RTS    7   --*
              |
 CTS    8   --*

</literallayout>
</sect1>

<sect1><title>Smart Signalling Cable for BackUPS CS Models</title>

<para>If you have a BackUPS CS, you are probably either using it with
the USB cable that is supplied or with the 940-0128A supplied by APC,
which permits running the UPS in dumb mode. By building your own
cable, you can now run the BackUPS CS models (and perhaps also the ES
models) using smart signalling and have all the same information that
is available as running it in USB mode.</para>

<para>The jack in the UPS is actually a 10 pin RJ45. However, you can
just as easily use a 8 pin RJ45 connector, which is more standard
(ethernet TX, and ISDN connector). It is easy to construct the cable
by cutting off one end of a standard RJ45-8 ethernet cable and wiring
the other end (three wires) into a standard DB9F female serial port
connector.</para>

<para>Below, you will find a diagram for the CUSTOM-RJ45 cable:</para>

<literallayout>
  CUSTOM-RJ45 CABLE

Signal Computer              UPS     UPS
       DB9F                 RJ45-8  RJ45-10
 RxD    2   ----------------  1      2     TxD  Send
 TxD    3   ----------------  7      8     RxD  Receive
 GND    5   ----------------  6      7     Ground

The RJ45-8 pins are: looking at the end of the connector:

 8 7 6 5 4 3 2 1
___________________
| . . . . . . . . |
|                 |
-------------------
       |____|

The RJ45-10  pins are: looking at the end of the connector:

10 9 8 7 6 5 4 3 2 1
_______________________
| . . . . . . . . . . |
|                     |
-----------------------
       |____|

</literallayout>

<para>For the serial port DB9F connector, the pin numbers are stamped
in the plastic near each pin. In addition, there is a diagram near the
end of this chapter.</para>

<para>When using this cable with <application>apcupsd</application>
specify the following in <filename>apcupsd.conf</filename>:</para>

<programlisting>
UPSCABLE smart
UPSTYPE apcsmart
DEVICE /dev/ttyS0 (or whatever your serial port is)
</programlisting>

<para>The information for constructing this cable was discovered and
transmitted to us by slither_man. Many thanks!</para>

</sect1>
<sect1 id='custom_simple'><title>Voltage-Signalling Cable for &quot;dumb&quot; UPSes</title>

<para><emphasis role="bold">NOTE. YOU DO NOT HAVE THIS CABLE UNLESS
YOU BUILT IT YOURSELF.  THE SIMPLE-CUSTOM CABLE IS NOT AN APC
PRODUCT.</emphasis></para>

<para>For &quot;dumb&quot; UPSes using voltage signalling, if you are going to
build your own cable, we recommend to make the cable designed by
the <application>apcupsd</application> team as follows:</para>

<literallayout>
       SIMPLE-CUSTOM CABLE

Signal Computer                  UPS
       DB9F   4.7K ohm          DB9M
 DTR    4   --[####]--*              DTR set to +5V by Apcupsd
                      |
 CTS    8   ----------*---------  5  Low Battery
 GND    5   --------------------  4  Ground
 DCD    1   --------------------  2  On Battery
 RTS    7   --------------------  1  Kill UPS Power

</literallayout>

<para>List of components one needs to make the Simple cable:</para>

<orderedlist>
  <listitem>
    <para>One (1) male DB9 connector, use solder type connector only.</para>
  </listitem>
  <listitem>
    <para>One (1) female DB9/25F connector, use solder type connector only.</para>
  </listitem>
  <listitem>
    <para>One (1) 4.7K ohm 1/4 watt 5% resistor.</para>
  </listitem>
  <listitem>
    <para>resin core solder.</para>
  </listitem>
  <listitem>
    <para>three (3) to five (5) feet of 22AWG multi-stranded four or more
conductor cable.</para>
  </listitem>
</orderedlist>

<procedure>
<step><para> Solder the resistor into pin 4 of the female DB9
connector.</para></step>
<step><para> Next bend the resistor so that it connects to pin 8 of the
female DB9 connector.</para></step>
<step><para> Pin 8 on the female connector is also wired to pin 5 on the
male DB9 connector. Solder both ends.</para></step>
<step><para> Solder the other pins, pin 5 on the female DB9 to pin 4 on the
male connector; pin 1 on the female connector to pin 2 on the male
connector; and pin 7 on the female connector to pin 1 on the male
connector.</para></step>
<step><para>Double check your work. </para></step>
</procedure>

<para>We use the DTR (pin 4 on the female connector) as our +5 volts
power for the circuit. It is used as the Vcc pull-up voltage for
testing the outputs on any &quot;UPS by APC&quot; in voltage-signalling
mode.  This cable may not work on a BackUPS Pro if the default
communications are in apcsmart mode. This cable is also valid for
&quot;ShareUPS&quot; BASIC Port mode and is also reported to work on
SmartUPSes. However, the Smart Cable described above is much
simpler. To have a better idea of what is going on inside
<application>apcupsd</application>, for the SIMPLE cable
<application>apcupsd</application> reads three signals and sets
three:</para>

<literallayout>
Reads:
CD, which apcupsd uses for the On Battery signal when high.

CTS, which apcupsd uses for the Battery Low signal when high.

RxD (SR), which apcupsd uses for the Line Down 
    signal when high. This signal isn't used for much.

Sets:
DTR, which apcupsd sets when it detects a power failure (generally
     5 to 10 seconds after the CD signal goes high). It
     clears this signal if the CD signal subsequently goes low
     -- i.e. power is restored.

TxD (ST), which apcupsd clears when it detects that the CD signal
     has gone low after having gone high - i.e. power is restored.

RTS, which apcupsd sets for the killpower signal -- to cause the UPS
     to shut off the power.
</literallayout>

<para>Please note that these actions apply only to the SIMPLE cable,
the signals used on the other cables are different.</para>
<para>Finally, here is another way of looking at the CUSTOM-SIMPLE
cable:</para> 

<literallayout>
APCUPSD SIMPLE-CUSTOM CABLE

Computer Side  |  Description of Cable           |     UPS Side  
DB9f  |  DB25f |                                 |   DB9m  | DB25m
4     |   20   |  DTR (5vcc)             *below  |    n/c  |
8     |    5   |  CTS (low battery)      *below  | &lt;-  5   |   7
2     |    3   |  RxD (no line voltage)  *below  | &lt;-  3   |   2
5     |    7   |  Ground (Signal)                |     4   |  20
1     |    8   |  CD (on battery from UPS)       | &lt;-  2   |   3
7     |    4   |  RTS (kill UPS power)           | -&gt;  1   |   8
n/c   |    1   |  Frame/Case Gnd (optional)      |     9   |  22

Note: the &lt;- and -&gt; indicate the signal direction.

Optional connections of original SIMPLE-CUSTOM specification
that are not used.

              4.7K ohm
 DTR    4   --[####]--*              Note needed
                      |
 RxD    2   ----------*---------  3  Not used by Apcupsd

</literallayout>

<para>When using this cable with <application>apcupsd</application>
specify the following in <filename>apcupsd.conf</filename>:</para>

<programlisting>
UPSCABLE simple
UPSTYPE dumb
DEVICE /dev/ttyS0 (or whatever your serial port is)
</programlisting>

</sect1>
<sect1><title>Other APC Cables that <application>apcupsd</application>
Supports</title>

<para><application>apcupsd</application> will also support the
following off the shelf cables that are supplied by APC</para>

<itemizedlist>
  <listitem>
    <para>940-0020B/C Simple Signal Only, all models.</para>
  </listitem>
  <listitem>
    <para>940-0023A Simple Signal Only, all models.</para>
  </listitem>
  <listitem>
    <para>940-0119A Simple Signal Only, Back-UPS Office, and BackUPS ES.</para>
  </listitem>
  <listitem>
    <para>940-0024[B/C/G] SmartMode Only, SU and BKPro only.</para>
  </listitem>
  <listitem>
    <para>940-0095[A/B/C] PnP (Plug and Play), all models.</para>
  </listitem>
  <listitem>
    <para>940-1524C SmartMode Only</para>
  </listitem>
  <listitem>
    <para>940-0127A/B USB Cables</para>
  </listitem>
  <listitem>
    <para>940-0128A Simple Signal Only, Back-UPS CS in serial mode.</para>
  </listitem>
</itemizedlist>

</sect1>
<sect1 id="CableModes"><title>Voltage Signalling
Features Supported by Apcupsd for Various Cables</title>

<para>The following table shows the features supported by the current
version of <application>apcupsd</application> (3.8.5 or later) for
various cables running the UPS in voltage-signalling mode.</para>

<informaltable>
  <tgroup cols="5">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <colspec colnum="3" colname="col3"/>
    <colspec colnum="4" colname="col4"/>
    <colspec colnum="5" colname="col5"/>
    <thead>
      <row>
        <entry>Cable</entry>
        <entry>Power Loss</entry>
        <entry>Low Battery</entry>
        <entry>Kill Power</entry>
        <entry>Cable Disconnected</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>940-0020B</entry>
        <entry>Yes</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>No</entry>
      </row>
      <row>
        <entry>940-0020C</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
        <entry>No</entry>
      </row>
      <row>
        <entry>940-0023A</entry>
        <entry>Yes</entry>
        <entry>No</entry>
        <entry>No</entry>
        <entry>No</entry>
      </row>
      <row>
        <entry>940-0119A</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
        <entry>No</entry>
      </row>
      <row>
        <entry>940-0127A</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
        <entry>No</entry>
      </row>
      <row>
        <entry>940-0128A</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
        <entry>No</entry>
      </row>
      <row>
        <entry>940-0095A/B/C</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
        <entry>No</entry>
      </row>
      <row>
        <entry>simple</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
        <entry>No</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>

</sect1>
<sect1><title>Voltage Signalling</title>

<para>Apparently, all APC voltage-signalling UPSes have the same
signals on the output pins of the UPS. The difference at the computer
end is due to different cable configurations. Thus, by measuring the
connectivity of a cable, one can determine how to program the UPS.
This is to be verified.</para>

<para>The signals presented or accepted by the UPS on its DB9
connector using the numbering scheme listed above is:</para>

<literallayout>
UPS Pin         Signal meaning
 1     &lt;-     Shutdown when set by computer for 1-5 seconds.
 2     -&gt;     On battery power (this signal is normally low but
                    goes high when the UPS switches to batteries).
 3     -&gt;     Mains down (line fail) See Note 1 below.
 5     -&gt;     Low battery. See Note 1 below.
 6     -&gt;     Inverse of mains down signal. See Note 2 below.
 7     &lt;-     Turn on/off power (only on advanced UPSes only)

 Note 1: these two lines are normally open, but close when the
     appropriate signal is triggered. In fact, they are open collector
     outputs which are rated for a maximum of +40VDC and 25 mA. Thus
     the 4.7K ohm resistor used in the Custom Simple cable works 
     quite well.

 Note 2: the same as note 1 except that the line is normally closed,
     and opens when the line voltage fails.
</literallayout>

</sect1>
<sect1><title>The Back-UPS Office 500 signals</title>

<para>The Back-UPS Office UPS has a telephone type jack as output,
which looks like the following:</para>

<literallayout>
Looking at the end of the connector:

   6 5 4 3 2 1
  _____________
 | . . . . . . |
 |             |
 |  |----------|
 |__|

</literallayout>

<para>It appears that the signals work as follows:</para>

<literallayout>
  UPS            Signal meaning
1 (brown)    &lt;-   Shutdown when set by computer for 1-5 seconds.
2 (black)    -&gt;   On battery power
3 (blue)     -&gt;   Low battery
4 (red)           Signal ground 
5 (yellow)   &lt;-   Begin signalling on other pins
6 (none)          none
</literallayout>

</sect1>
<sect1><title>Analyses of APC Cables</title>

<sect2><title>940-0020B Cable Wiring</title>

<para>This diagram is for informational purposes and is not complete.
Although we do not know what the black box semi-conductor contains,
we believe that we understand its operation (many thanks to Lazar
M. Fleysher for working this out).</para>

<para>This cable can only be used on voltage-signalling UPSes, and
provides the On Battery signal as well as kill UPS power. Most recent
evidence (Lazar's analysis) indicates that this cable under the right
conditions may provide the Low Battery signal. This is to be
confirmed.</para>

<literallayout>
APC Part# - 940-0020B

Signal Computer                  UPS
       DB9F                     DB9M
 CTS    8   --------------------  2  On Battery
 DTR    4   --------------------  1  Kill power
 GND    5   ---------------*----  4  Ground
                           |
                ---        *----  9  Common
 DCD    1  ----|///|-----------   5  Low Battery
               |\\\|
 RTS    7  ----|///| (probably a
                ---   semi-conductor)
</literallayout>

<para>Thanks to Lazar M. Fleysher.</para>

</sect2>
<sect2><title>940-0020C Cable Wiring</title>

<para>This diagram is for informational purposes and may not be
complete, we don't recommend that use it to build you build one
yourself.  This cable can only be used on voltage-signalling UPSes, and
provides the On Battery signal, the Low Battery signal as well as kill
UPS power. In <application>apcupsd</application> versions 3.8.2 and
prior, please set your UPSCABLE to 940-0020B. In version 3.8.3 and
later, you may specify the cable as 940-0020C. Please note that this
diagram may not be accurate.</para>

<literallayout>
APC Part# - 940-0020C

Signal Computer                  UPS
       DB9F                     DB9M
 CTS    8   --------------------  2  On Battery
 DTR    4   --------------------  1  Kill power
 GND    5   ---------------*----  4  Ground
                           |
                           *----  9  Common
 RTS    7 -----[ 93.5K ohm ]----- 5  Low Battery
               or semi-conductor
</literallayout>

</sect2>
<sect2><title>940-0023A Cable Wiring</title>

<para>This diagram is for informational purposes and may not be
complete, we don't recommend that use it to build you build one
yourself.  This cable can only be used on voltage-signalling UPSes, and
apparently only provides the On Battery signal. As a consequence, this
cable is pretty much useless, and we recommend that you find a better
cable because all APC UPSes support more than just On Battery. Please
note that we are not sure the following diagram is correct.</para>

<literallayout>
APC Part# - 940-0023A

Signal Computer                  UPS
       DB9F                     DB9M
 DCD    1   --------------------  2  On Battery

              3.3K ohm
 TxD    3   --[####]-*
                     |
 DTR    4   ---------*
 GND    5   ---------------*----  4  Ground
                           |
                           *----  9  Common

</literallayout>

</sect2>
<sect2><title>940-0095A Cable Wiring</title>

<para>This is the definitive wiring diagram for the 940-0095A cable
submitted by Chris Hanson &lt;cph at zurich.ai.mit.edu&gt;, who
disassembled the original cable, destroying it in the process. He then
built one from his diagram and it works perfectly.</para>

<literallayout>
Construction and operation of the APC #940-0095A cable.
This cable is included with the APC Back-UPS Pro PNP series.


UPS end                                      Computer end
-------                                      ------------
                  47k        47k
BATTERY-LOW (5) &gt;----R1----*----R2----*----&lt; DTR,DSR,CTS (4,6,8)
                         |          |
                         |          |
                         |         /  E
                         |       |/
                         |    B  |
                         *-------|  2N3906 PNP
                                 |
                                 |\
                                   \  C
                                    |
                                    |
                                    *----&lt; DCD (1)     Low Batt
                                    |
                                    |
                                    R 4.7k
                                    3
                                    |
                             4.7k   |
SHUTDOWN (1)    &gt;----------*----R4----*----&lt; TxD (3)            
                         |
                         |  1N4148
                         *----K|---------&lt; RTS (7)      Shutdown

POWER-FAIL (2)  &gt;--------------------------&lt; RxD,RI (2,9) On Batt

GROUND (4,9)    &gt;--------------------------&lt; GND (5)


Operation:

* DTR is &quot;cable power&quot; and must be held at SPACE.  DSR or CTS may be
used as a loopback input to determine if the cable is plugged in.

* DCD is the &quot;battery low&quot; signal to the computer.  A SPACE on this
line means the battery is low.  This is signalled by BATTERY-LOW
being pulled down (it is probably open circuit normally).

Normally, the transistor is turned off, and DCD is held at the MARK
voltage by TxD.  When BATTERY-LOW is pulled down, the voltage
divider R2/R1 biases the transistor so that it is turned on, causing
DCD to be pulled up to the SPACE voltage.

* TxD must be held at MARK; this is the default state when no data is
being transmitted.  This sets the default bias for both DCD and
SHUTDOWN.  If this line is an open circuit, then when BATTERY-LOW is
signalled, SHUTDOWN will be automatically signalled; this would be
true if the cable were plugged in to the UPS and not the computer,
or if the computer were turned off.

* RTS is the &quot;shutdown&quot; signal from the computer.  A SPACE on this
line tells the UPS to shut down.

* RxD and RI are both the &quot;power-fail&quot; signals to the computer.  A
MARK on this line means the power has failed.

* SPACE is a positive voltage, typically +12V.  MARK is a negative
voltage, typically -12V.  Linux appears to translate SPACE to a 1
and MARK to a 0.
</literallayout>

</sect2>
<sect2><title>940-0095B Cable Wiring</title>

<para>This diagram is for informational purposes and may not be complete,
we don't recommend that use it to build one yourself.</para>

<literallayout>
APC Part# - 940-0095B

Signal Computer                  UPS
       DB9F                     DB9M
 DTR    4   ----*
 CTS    8   ----|
 DSR    6   ----|
 DCD    1   ----*
 GND    5   ---------------*----  4  Ground
                           |
                           *----  9  Common
 RI     9   ----*
                |
 RxD    2   ----*---------------  2  On Battery
 TxD    3   ----------[####]----  1  Kill UPS Power
                      4.7K ohm
</literallayout>

</sect2>
<sect2><title>940-0119A Cable Wiring</title>

<para>This diagram is for informational purposes and may not be complete,
we don't recommend that use it to build you build one yourself.
This cable is used with the BackUPS Office UPSes.</para>

<literallayout>
APC Part# - 940-0119A

  UPS      Computer
  pins     pins      Signal             Signal meaning
1 (brown)    4,6      DSR DTR     &lt;-   Shutdown when set by computer for 1-5 seconds.
2 (black)    8,9      RI  CTS     -&gt;   On battery power
3 (blue)     1,2      CD  RxD     -&gt;   Low battery 
4 (red)       5       Ground
5 (yellow)    7       RTS         &lt;-   Begin signalling on other pins 
6 (none)     none

</literallayout>

</sect2>
<sect2><title>BackOffice ES</title>

<para>The BackUPS ES has a straight through serial cable with no
identification on the plugs. To make it work with
<application>apcupsd</application>, specify the <emphasis
role="bold">UPSCABLE 940-0119A</emphasis> and <emphasis
role="bold">UPSTYPE backups</emphasis>.  The equivalent of cable
940-0119A is done on a PCB inside the unit.  Thanks to William Stock
for supplying us with the information about the straight through
cable, the PCB, and the following diagram:</para>

<literallayout>
computer           ----------- BackUPS-ES -----------------
DB9-M              DB-9F
pin    signal      pin

 4      DSR   -&gt;    4 --+
                        |  diode   resistor
 6      DTR   -&gt;    6 --+----&gt;|----/\/\/\---o kill power

 1      DCD   &lt;-    1 --+
                        |
 2      RxD   &lt;-    2 --+----------------+--o low battery
                                         |
 7      RTS   -&gt;    7 --------+--/\/\/\--+
                              |
                              +--/\/\/\--+
                                         |
 8      RI    &lt;-    8 --+----------------+--o on battery
                        |
 9      CTS   &lt;-    9 --+

 5      GND   ---   5 ----------------------o ground

 3      TxD         3 nc

</literallayout>

</sect2>
<sect2><title>BackUPS ES and CS in Serial mode with Cable 940-0128A</title>

<para>Though these UPSes are USB UPSes, APC supplies a serial cable
(typically with a green DB9 F connector) that has 940-0128A stamped
into one side of the plastic serial port connector. The other end of
the cable is a 10 pin RJ45 connector that plugs into the UPS (thanks
to Dean Waldow for sending me a cable!). Apcupsd version 3.8.5 and
later supports this cable when specified as <emphasis
role="bold">UPSCABLE 940-0128A</emphasis> and <emphasis
role="bold">UPSTYPE backups</emphasis>. However, running in this mode
much of the information that would be available in USB mode is
lost. In addition, when <application>apcupsd</application> attempts to
instruct the UPS to kill the power, it begins cycling about 4 times a
second between battery and line. The solution to the problem (thanks
to Tom Suzda) is to unplug the UPS and while it is still chattering,
press the power button (on the front of the unit) until the unit beeps
and the chattering stops. After that the UPS should behave normally
and power down 1-2 minutes after requested to do so.</para>

<para>An amazing discovery by slither_man allows one to build a
CUSTOM-RJ45 cable (documented above) and run the BackUPS CS (and
probably also the ES) in Smart mode. Running it this way provides
all the same information that you would get by running it in USB
mode. As a consequence, we recommend that you either purchase
(where I don't know) or build your own CUSTOM-RJ45 cable rather
than use the 940-0128A cable.</para>

<para>Thanks to all the people who have helped test this and have
provided information on the cable wiring, our best guess for the
cable schematic is the following:</para>

<literallayout>
computer      --------- Inside the Connector---------  UPS
DB9-F         |                                     |  RJ45
pin - signal  |                                     |  Pin - Color
              |                                     |
 4     DSR  -&gt;|---+                                 |
              |   |  diode   resistor               |
 6     DTR  -&gt;|---+----&gt;|----/\/\/\---o kill power  |  8  Orange
              |                                     |
 1     DCD  &lt;-|----+                                |
              |    |                                |
 2     RxD  &lt;-|----+----------------+--o low battery|  3  Brown
              |                     |               |
 7     RTS  -&gt;|----------+--/\/\/\--+               |
              |          |                          |   
              |          +--/\/\/\--+               |
              |                     |               |
 8     RI   &lt;-|----+----------------+--o on battery |  2  Black
              |    |                                |
 9     CTS  &lt;-|----+                                |
              |                         signal      |
 5     GND  --|-----------------------o ground      |  7  Red
              |                                     |
 3     TxD    |                                     |
              |                         chassis     |
 Chassis/GND  |-----------------------o ground      |  4  Black
              |                                     |
              |          Not connected              |  1, 5, 6, 9, 10
              -------------------------------------- 

The RJ45 pins are: looking at the end of the connector:

10 9 8 7 6 5 4 3 2 1
_______________________
| . . . . . . . . . . |
|                     |
-----------------------
       |____|

</literallayout>

</sect2>
</sect1>
<sect1><title>Win32 Implementation Restrictions for Simple UPSes</title>

<para>Due to inadequacies in the Win32 API, it is not possible to
set/clear/get all the serial port line
signals. <application>apcupsd</application> can detect: CTS, DSR, RNG,
and CD. It can set and clear: RTS and DTR.</para> <para>This imposes a
few minor restrictions on the functionality of some of the cables. In
particular, LineDown on the Custom Simple cable, and Low Battery on
the 0023A cable are not implemented.</para>

</sect1>
<sect1><title>Internal Apcupsd Actions for Simple Cables</title>

<literallayout>
This section describes how apcupsd 3.8.5 (March 2002)
treats the serial port line signals for simple cables.

apcaction.c: 
 condition = power failure detected
 cable = CUSTOM_SIMPLE
 action = ioctl(TIOCMBIS, DTR)      set DTR (enable power bit?)

apcaction.c: 
 condition = power back
 cable = CUSTOM_SIMPLE
 action = ioctl(TIOCMBIC, DTR)      clear DTR (clear power bit)
 action = ioctl(TIOCMBIC, ST)       clear ST (TxD)

apcserial.c: 
 condition = serial port initialization
 cable = 0095A, 0095B, 0095C
 action = ioctl(TIOMBIC, RTS)       clear RTS (set PnP mode)

 cable = 0119A, 0127A, 0128A
 action = ioctl(TIOMBIC, DTR)       clear DTR (killpower)
 action = ioctl(TIOMBIS, RTS)       set   RTS (ready to receive)

apcserial.c: 
 condition = save_dumb_status
 cable = CUSTOM_SIMPLE
 action = ioctl(TIOMBIC, DTR)       clear DTR (power bit?)
 action = ioctl(TIOMBIC, RTS)       clear RTS (killpower)

 cable = 0020B, 0020C, 0119A, 0127A, 0128A
 action = ioctl(TIOMBIC, DTR)       clear DTR (killpower)

 cable = 0095A, 0095B, 0095C
 action = ioctl(TIOMBIC, RTS)       clear RTS (killpower)
 action = ioctl(TIOMBIC, CD)        clear DCD (low batt)
 action = ioctl(TIOMBIC, RTS)       clear RTS (killpower) a second time!

apcserial.c:
 condition = check_serial

 cable = CUSTOM_SIMPLE
 action = OnBatt = CD
 action = BattLow = CTS
 action = LineDown = SR

 cable = 0020B, 0020C, 0119A, 0127A, 0128A
 action = OnBatt = CTS
 action = BattLow = CD
 action = LineDown = 0

 cable = 0023A
 action = Onbatt = CD
 action = BattLow = SR
 action = LineDown = 0

 cable = 0095A, 0095B, 0095C
 action = OnBatt = RNG
 action = BattLow = CD
 action = LineDown = 0


apcserial.c
 condition = killpower

 cable = CUSTOM_SIMPLE, 0095A, 0095B, 0095C
 action = ioctl(TIOMCBIS, RTS)      set RTS (kills power)
 action = ioctl(TIOMCBIS, ST)       set TxD       

 cable = 0020B, 020C, 0119A, 0127A, 0128A
 action = ioctl(TIOMCBIS, DTR)      set DTR (kills power)

</literallayout>

</sect1>
<sect1><title>RS232 Wiring and Signal Conventions</title>

<informaltable>
  <tgroup cols="4">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <colspec colnum="3" colname="col3"/>
    <colspec colnum="4" colname="col4"/>
    <thead>
      <row>
        <entry>DB-25
Pin #</entry>
        <entry>DB-9
Pin #</entry>
        <entry>Name</entry>
        <entry>DTE-DCE Description</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>1</entry>
        <entry>--</entry>
        <entry>FG</entry>
        <entry>--- Frame Ground/Chassis GND</entry>
      </row>
      <row>
        <entry>2</entry>
        <entry>3</entry>
        <entry>TD</entry>
        <entry>---&gt; Transmitted Data, TxD</entry>
      </row>
      <row>
        <entry>3</entry>
        <entry>2</entry>
        <entry>RD</entry>
        <entry>&lt;--- Received Data, RxD</entry>
      </row>
      <row>
        <entry>4</entry>
        <entry>7</entry>
        <entry>RTS</entry>
        <entry>---&gt; Request To Send</entry>
      </row>
      <row>
        <entry>5</entry>
        <entry>8</entry>
        <entry>CTS</entry>
        <entry>&lt;--- Clear To Send</entry>
      </row>
      <row>
        <entry>6</entry>
        <entry>6</entry>
        <entry>DSR</entry>
        <entry>&lt;--- Data Set Ready</entry>
      </row>
      <row>
        <entry>7</entry>
        <entry>5</entry>
        <entry>SG</entry>
        <entry>---- Signal Ground, GND</entry>
      </row>
      <row>
        <entry>8</entry>
        <entry>1</entry>
        <entry>DCD</entry>
        <entry>&lt;--- Data Carrier Detect</entry>
      </row>
      <row>
        <entry>9</entry>
        <entry>--</entry>
        <entry>--</entry>
        <entry>--- Positive DC test voltage</entry>
      </row>
      <row>
        <entry>10</entry>
        <entry>--</entry>
        <entry>--</entry>
        <entry>--- Negative DC test voltage</entry>
      </row>
      <row>
        <entry>11</entry>
        <entry>--</entry>
        <entry>QM</entry>
        <entry>&lt;--- Equalizer mode</entry>
      </row>
      <row>
        <entry>12</entry>
        <entry>--</entry>
        <entry>SDCD</entry>
        <entry>&lt;--- Secondary Data Carrier Detect</entry>
      </row>
      <row>
        <entry>13</entry>
        <entry>--</entry>
        <entry>SCTS</entry>
        <entry>&lt;--- Secondary Clear To Send</entry>
      </row>
      <row>
        <entry>14</entry>
        <entry>--</entry>
        <entry>STD</entry>
        <entry>---&gt; Secondary Transmitted Data</entry>
      </row>
      <row>
        <entry>15</entry>
        <entry>--</entry>
        <entry>TC</entry>
        <entry>&lt;--- Transmitter (signal) Clock</entry>
      </row>
      <row>
        <entry>16</entry>
        <entry>--</entry>
        <entry>SRD</entry>
        <entry>&lt;--- Secondary Receiver Clock</entry>
      </row>
      <row>
        <entry>17</entry>
        <entry>--</entry>
        <entry>RC</entry>
        <entry>---&gt; Receiver (signal) Clock</entry>
      </row>
      <row>
        <entry>18</entry>
        <entry>--</entry>
        <entry>DCR</entry>
        <entry>&lt;--- Divided Clock Receiver</entry>
      </row>
      <row>
        <entry>19</entry>
        <entry>--</entry>
        <entry>SRTS</entry>
        <entry>---&gt; Secondary Request To Send</entry>
      </row>
      <row>
        <entry>20</entry>
        <entry>4</entry>
        <entry>DTR</entry>
        <entry>---&gt; Data Terminal Ready</entry>
      </row>
      <row>
        <entry>21</entry>
        <entry>--</entry>
        <entry>SQ</entry>
        <entry>&lt;--- Signal Quality Detect</entry>
      </row>
      <row>
        <entry>22</entry>
        <entry>9</entry>
        <entry>RI</entry>
        <entry>&lt;--- Ring Indicator</entry>
      </row>
      <row>
        <entry>23</entry>
        <entry>--</entry>
        <entry>--</entry>
        <entry>---&gt; Data rate selector</entry>
      </row>
      <row>
        <entry>24</entry>
        <entry>--</entry>
        <entry>--</entry>
        <entry>&lt;--- Data rate selector</entry>
      </row>
      <row>
        <entry>25</entry>
        <entry>--</entry>
        <entry>TC</entry>
        <entry>&lt;--- Transmitted Clock</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>

</sect1>
<sect1><title>Pin Assignment for the Serial Port (RS-232C), 25-pin and 9-pin,
Female End</title>

<literallayout>
   13                         1         5         1
 _______________________________      _______________
 \  . . . . . . . . . . . . .  /      \  . . . . .  /    RS232-connectors
  \  . . . . . . . . . . . .  /        \  . . . .  /     looking into the
   ---------------------------          -----------      end of the cable.
   25                      14            9       6

The diagram above represents the Female end of the cable. The
male end is the same, but looking from inside the cable.

 DTE : Data Terminal Equipment (i.e. computer)
 DCE : Data Communications Equipment (i.e. UPS)
 RxD : Data received; 1 is transmitted &quot;low&quot;, 0 as &quot;high&quot;
 TxD : Data sent; 1 is transmitted &quot;low&quot;, 0 as &quot;high&quot;
 DTR : DTE announces that it is powered up and ready to communicate
 DSR : DCE announces that it is ready to communicate; low=modem hang-up
 RTS : DTE asks DCE for permission to send data
 CTS : DCE agrees on RTS
 RI  : DCE signals the DTE that an establishment of a connection is attempted
 DCD : DCE announces that a connection is established
</literallayout>

</sect1>
<sect1><title id="ioctl">Ioctl to RS232 Correspondence</title>

<literallayout>
#define TIOCM_LE        0x001
#define TIOCM_DTR       0x002
#define TIOCM_RTS       0x004
#define TIOCM_ST        0x008
#define TIOCM_SR        0x010
#define TIOCM_CTS       0x020
#define TIOCM_CAR       0x040
#define TIOCM_RNG       0x080
#define TIOCM_DSR       0x100
#define TIOCM_CD        TIOCM_CAR
#define TIOCM_RI        TIOCM_RNG
#define TIOCM_OUT1      0x2000
#define TIOCM_OUT2      0x4000
</literallayout>
</sect1>
</chapter>

<chapter id='dumb_testing'><title>Testing Serial-Line UPSes</title>

<para>If you have a serial-line UPS, there are some tests you should
run before the general ones described in the <link
linkend='testing'>Testing</link> section.</para>

<para>To test your computer's connection with a serial-line UPS, you first
need to establish that the serial line is functioning, and then that the
UPS is responding to commands.  This can be a bit tricky, especially
with a dumb voltage-signalling interface, because it is completely
quiescent when there are no commands being passed, and the command 
repertoire doesn't include any self-tests.</para>

<para>Because it is easy to configure a serial cable incorrectly in
such a way as to cause premature shutdowns of the UPS power, we
<emphasis>strongly</emphasis> recommend, especially for voltage-
signaling (dumb) UPSes, that you do most of the initial testing with
your computer plugged into the wall rather than your UPS. Thus if the
UPS power is suddenly shut off, your computer will continue to run. We
also recommend using <application>safe-apccontrol</application> as
described below, until you are sure that the signaling is
correct.</para>

<para>Also note that if you launch the execution of
<application>apcupsd</application> while your voltage-signaling UPS is
on battery power, it is very likely that your UPS will immediately
shut off the power. This is due to the initialization of the serial
port line signals, which often looks to the UPS like a shutdown
command.</para>

<para>Finally, double-check the state of your cabling and UPS
indicator lights frequently during testing.  For voltage-signaling
UPSes, <application>apcupsd</application> is not currently able to
detect whether or not the serial cable is connected. In addition, some
simple signaling UPSes with certain cable combinations are not able to
detect the low battery condition.  For more details please see
<xref linkend="CableModes"/>.</para>

<sect1><title id="SerialPort">Establishing Serial Port Connection</title>

<para>Once you have compiled, installed, and invoked
<application>apcupsd</application>, you should wait to allow
<application>apcupsd</application> to configure itself and establish
contact with the UPS.</para>

<para>If you see the following message about 30 seconds after starting
<application>apcupsd</application>:</para>

<programlisting>
apcupsd FATAL ERROR in apcserial.c at line 156
PANIC! Cannot communicate with UPS via serial port.
</programlisting>

<para>it means that <application>apcupsd</application> tried for about
30 seconds to establish contact with the UPS via the serial port, but
was unable to do so. Before continuing, you must correct this
problem. Some of the possible sources of the problem are:</para>

<itemizedlist>
  <listitem>
    <para>You have not configured the correct serial port name on the 
    DEVICE directive in your <filename>apcupsd</filename> configuration 
    file.</para>
  </listitem>
  <listitem>
    <para>The serial port that you have chosen has logins enabled. You must 
    disable logins on that port, otherwise, the system prevents 
    <application>apcupsd</application> from using it.
    Normally, the file <filename>/etc/inittab</filename> specifies the
    ports for which a <application>getty</application> process is started 
    (on Sun machines, the serial port program equivalent to 
    <application>getty</application> is called 
    <application>ttymon</application>). You must disable this for the port
    that you wish to use.</para>
  </listitem>
  <listitem>
    <para>Make sure you are doing your testing as 
    <emphasis role="bold">root</emphasis> otherwise, you may have permissions
    problems accessing the serial port.</para>
  </listitem>
  <listitem>
    <para>You may have cabling problems, either with an incorrect cable, or the
    incorrect cable specification directive in the configuration file.</para>
  </listitem>
  <listitem>
    <para>You may have a problem with the 
    <filename>/etc/apcupsd/acpupsd.conf</filename> file. For example, check 
    that you have specified the correct type of UPS and the correct networking
    directives.  For more details, see the 
    <xref linkend="after_installation"/>.</para>
  </listitem>
  <listitem>
    <para>If you have a SmartUPS 5000 RM 15U or similar model, that comes 
    with a &quot;Web/SNMP management card&quot; in one of the &quot;Smart
    Slots&quot;, this card may interfere with the serial port operation. 
    If you are having problems, please remove this card and try again. 
    Supposedly V3.0 of the card firmware has been corrected to properly
    release the serial port.</para>
  </listitem>
  <listitem>
    <para>Ensure that you have no other programs that are using the serial 
    port. One user reported that he had problems because the serial port
    mouse (gpm) was using the same port as <application>apcupsd</application>.
    This causes intermittent seemingly random problems.</para>
  </listitem>
  <listitem>
    <para>If you are using a WinNT or Win2000 machine, the OS is probably
    attempting to attach a serial mouse to the port you are using (COM1 or 
    COM2). To prevent this, edit your <filename>c:\boot.ini</filename> file, 
    and you will find a line that looks something like the following:

<programlisting>
multi(0)disk(0)rdisk(0)partition(1)\WINNT=&quot;Windows NT Workstation Version 4.00&quot;
</programlisting>

    Add the following to the end of the line: 
    <filename>/NoSerialMice:COM1</filename> (or COM2) so that the new line
    looks like:</para>

<programlisting>
multi(0)disk(0)rdisk(0)partition(1)\WINNT=&quot;Windows NT Workstation Version 4.00&quot; /NoSerialMice:COM1
</programlisting>
    </listitem>
    <listitem>
    <para>If you are using a WinNT or Win2000 machine, try connecting 
    <application>apcupsd</application> to COM2 rather than COM1 (be sure to 
    change your <filename>c:\apcupsd\etc\apcupsd\apcupsd.conf</filename> to
    reflect the change).</para>
  </listitem>
  <listitem>
    <para>If you are using a Solaris machine, you may have similar problems 
    as described above for the WinNT machine. A possible fix is documented
    in the Sun section of the Configuration chapter of this manual.</para>
  </listitem>
  <listitem>
    <para>Try connecting your UPS to another machine. If it works, then you
    probably have a bad serial port card. As unlikely as this may sound, at
    least two of our users have had to replace bad serial port cards.</para>
  </listitem>
  <listitem>
    <para>Try doing an <command>lsof /dev/ttyS0</command> where you replace
    the <emphasis role="bold">/dev/ttyS0</emphasis> with your serial port
    name. If you get no output, the port is free (or there is no physical
    port). If you get output, then another program is using the port, and
    you should see which one.</para>
  </listitem>
  <listitem>
    <para>Try doing a <command>dmesg | grep tty</command>. This may show 
    you if a program has grabbed the port. (Thanks to Joe Acosta for the 
    suggestion.)</para>
  </listitem>
  <listitem>
    <para>If all else fails, make sure your system is configured for serial 
    port support.</para>
  </listitem>
  <listitem>
    <para>If you are running Linux, check your <filename>/proc</filename> 
    file system. For example: <command>cat /proc/devices</command> should 
    print something like <emphasis>4 ttyS</emphasis> if you have a serial
    port. If your serial port is working, a <command>cat 
    /proc/interrupts</command> should show the serial port usage (e.g. 
    <emphasis role="bold">4: 294553 XT-PIC serial</emphasis>) Also, 
    <command>cat /proc/ioports</command> should show up something like 
    <emphasis role="bold">03f8-03ff : serial(auto)</emphasis>. Or, 
    <command>cat /proc/tty</command> should print a line like 
    <emphasis role="bold">serial /dev/ttyS 4 64-127 serial</emphasis>. 
    Finally, a <command>cat /proc/tty/driver/serial</command> should
    print something like the following:</para>

<programlisting>
serinfo:1.0 driver:5.05c revision:2001-07-08 
0: uart:16550A port:3F8 irq:4 baud:9600 tx:1503168 rx:1461721 fe:8
</programlisting>
</listitem>
</itemizedlist>

<para>The first thing to do is to look at your log file, usually
<filename>/var/log/messages</filename> because
<application>apcupsd</application> writes more detailed information to
the log file whenever there is an error.</para>

<para>If you have a UPS that uses apcsmart protcol (see <link
linkend="type_table">table of types</link> for a list of the UPSes
using these protocols), you can manually test the serial
communications with the UPS by starting a serial port communications
program (such as <application>minicom</application>,
<application>tip</application>, or <application>cu</application>) with
the settings 2400 8N1 (2400 baud, 8 bits, no parity, 1 stop bit). Be
extremely careful what you send to your UPS as certain characters may
cause it to power down or may even cause damage to the UPS. Try
sending an upper case Y to the UPS (without a return at the end). It
should respond with SM. If this is not the case, review the possible
problems listed above. If you fat finger the Y and enter y instead, no
cause for alarm, you will simply get the APC copyright notice.</para>
<para>Once you are sure that serial port communications is working,
proceed to the next test.</para>

</sect1>

<sect1 id='serial_apctest'><title>Using <application>apctest</application> on
Serial-Line UPSses</title>

<para>On an apcsmart serial-line UPS, <application>apctest</application>
will give you access to the battery of low-level tests we described in
<xref linkend='usb_apctest'/>.  If you have a voltage-signalling UPS,
it enables a different test repertoire which is described here,  Among
other things, if you are uncertain about what kind of cable you have, 
you may be able to use <application>apctest</application> to figure
that out.</para>

<para>Shutdown <application>apcupsd</application> if it is running.
Make sure your <filename>/etc/apcupsd/apcupsd.conf</filename> file has
<emphasis role="bold">UPSTYPE backups</emphasis> and <emphasis
role="bold">UPSCABLE simple</emphasis> Normally
<application>apctest</application> will have been built and installed
by default, otherwise, you can explicitly build it on Unix
with:</para>

<programlisting>
cd &lt;apcupsd-source-directory&gt;
make apctest
./apctest
</programlisting>

<para>on Win32 systems, use:</para>

<programlisting>
make apctestwin32
./apctest
</programlisting>

<para>It will present you with the following output</para>

<programlisting>
2001-02-07 04:08:26 apctest 3.8.5 (3 January 2002) redhat
Checking configuration ...
sharenet.type = DISABLE
cable.type = CUSTOM_SIMPLE
mode.type = BK
Setting up serial port ...
Creating serial port lock file ...
Doing prep_serial() ...
Hello, this is the apcupsd Cable Test program.
This part of apctest is for testing dumb UPSes (ones that uses signaling rather than commands.
Most tests enter a loop polling every second for 10 seconds.
</programlisting>

<para>Then it will present you with the following list of choices: </para>

<programlisting>
1) Test 1 - normal mode
2) Test 2 - no cable
3) Test 3 - no power
4) Test 4 - low battery (requires test 3 first)
5) Test 5 - battery exhausted
6) Test 6 - kill UPS power
7) Test 7 - run tests 1 through 5
8) Guess which is the appropriate cable
9) quit

Select test number: 
</programlisting>

<para>Run tests 1, 2, and 3. Note, none of the currently supported cables
will indicate a change for test 2. You can then run test 8 to see
what cable it thinks you should be using. Finally run test 4.</para>

<para>apctest can also be run for Smart UPSes.</para>

<para>The print out of your testing will be written to the file
<filename>apctest.output</filename>. If you are unable to solve your
problem, you can try posting that file to the development mailing
list, and perhaps we can help you. In this case, please also include
information on your operating system, which version of
<application>apcupsd</application> you are using, your UPS model, and
also your <filename>apcupsd.conf</filename> file.</para>

<sect2><title>Expected <application>apctest</application> Signals for a UPS</title>

<para>If you have configured your UPS as:</para>
<programlisting>
UPSTYPE backups
UPSCABLE APC_940_0119A
    or APC_940_0127A
    or APC_940_0128A
    or APC_940_0020B
    or APC_940_0020C
</programlisting>

<para>here are typical signals you would expect to see in the output from
the various tests of apctest:</para>

<programlisting>
<emphasis role="bold">Test 1</emphasis> normal:              RTS for cables (0119A 0127A 0128A)
<emphasis role="bold">Test 2</emphasis> no serial cable:     not important
<emphasis role="bold">Test 3</emphasis> no AC power:         <emphasis role="bold">CTS</emphasis> for all cables
<emphasis role="bold">Test 4</emphasis> batteries exhausted: <emphasis role="bold">CTS</emphasis> and <emphasis role="bold">CD</emphasis> for all cables
</programlisting>

<para>Note: <emphasis role="bold">RTS</emphasis> if set in Test 1 will
probably also be set in all the other tests. This is not important,
what counts is the appearance of <emphasis role="bold">CTS</emphasis>
when the power fails and additionally <emphasis
role="bold">CD</emphasis> when the batteries are low.</para>

</sect2>
<sect2><title>Expected apctest Signals for a BackUPS Pro</title>

<para>If you have configured your UPS as:</para>

<programlisting>
UPSTYPE backupspro
UPSCABLE APC_940_0095A
    or APC_940_0095C
</programlisting>

<para>here are the typical signals you would expect to see in the output
from the various tests of apctest:</para>

<programlisting>
<emphasis role="bold">Test 1</emphasis> normal:              RTS not set
<emphasis role="bold">Test 2</emphasis> no serial cable:     not important
<emphasis role="bold">Test 3</emphasis> no AC power:         <emphasis
role="bold">RNG</emphasis>
<emphasis role="bold">Test 4</emphasis> batteries exhausted: <emphasis role="bold">RNG</emphasis> and <emphasis role="bold">CD</emphasis></programlisting>

<para>Note: <emphasis role="bold">RTS</emphasis> should never be set
in any of the tests as it is the killpower signal. What is important
is the appearance of <emphasis role="bold">RNG</emphasis> when the
power fails and additionally <emphasis role="bold">CD</emphasis> when
the batteries are low.</para> 

</sect2>
</sect1>
</chapter>
<chapter><title>Troubleshooting Serial Line communications</title>

<sect1><title>Determining Which Voltage-Signaling Cable You Have</title>

<para><emphasis>The most frequently encountered problem with
voltage-signalling UPSes (e.g. BackUPS 650) is that you have
incorrectly specified which cable is being used.</emphasis> All cables
furnished by APC have the cable number stamped on the side of the
computer connector end of the cable. Using this number with
<application>apcupsd</application> will normally work fine. If you do
not know what cable you have, you can use the
<application>apctest</application> program to determine the type of
the cable.</para>

<para>For simple signaling UPSes, you should <emphasis>not</emphasis>
use <emphasis role="bold">simple</emphasis> in the cable specification
(i.e. <emphasis role="bold">UPSCABLE simple</emphasis>) unless you
have made the cable yourself according to the wiring diagram given in
the cables chapter of this manual.</para>

</sect1>
<sect1><title>Once you have established serial communications</title>

<para>Once you have established that
<application>apcupsd</application> can talk to the UPS over the serial
part, go do the series of functional tests described in the main
<link linkend='testing'>Testing</link> section.</para>

<para>One additional note applies:</para>

<sect2><title>Bizarre Intermittent Behavior</title>

<para>In one case, a user reported that he received random incorrect
values from the UPS in the status output. It turned out that
<application>gpm</application>, the mouse control program for command
windows, was using the serial port without using the standard Unix
locking mechanism. As a consequence, both
<application>apcupsd</application> and <application>gpm</application>
were reading the serial port. Please ensure that if you are running
<application>gpm</application> that it is not configured with a serial
port mouse on the same serial port.</para>
</sect2>

</sect1>
</chapter>
<chapter><title>Recalibrating the UPS Runtime</title>

<para>Note: In a future release of <application>apcupsd</application>
this procedure will be replaced by a daemon operation that can be
performed on all types of UPS.</para>

<para>This section does not apply to voltage-signalling or dumb UPSes
such as the older BackUPS models.</para>

<para>Smart UPSes internally compute the remaining runtime, and
<application>apcupsd</application> uses the value supplied by the
UPS. As the batteries age (after say two or three years), the runtime
computation may no longer be accurate since the batteries no longer
hold the same charge. As a consequence, in the event of a power
failure, the UPS and thus <application>apcupsd</application> can
report a runtime of 5 minutes remaining when in fact only one minute
remains. This can lead to a shutdown before you might expect it,
because regardless of the runtime remaining that is reported, the UPS
will always correctly detect low batteries and report it, thus causing
<application>apcupsd</application> to correctly shutdown your
computer.</para>

<para>If you wish to have the UPS recalibrate the remaining runtime
calculations, you can do so manually as the current version of
<application>apcupsd</application> does not support this feature. To
do so,</para>

<itemizedlist>
  <listitem>
    <para>Shutdown <application>apcupsd</application></para>
  </listitem>
  <listitem>
    <para>contact your UPS directly using some terminal program such as
    <application>minicom</application>, <application>tip</application>, or <application>cu</application> with the settings 2400 8N1 (2400 baud, 8 bits,
no parity, 1 stop bit). Be extremely careful what you send to your
UPS as certain characters may cause it to power down or may even
cause damage to the UPS. Try sending an upper case Y to the UPS
(without a return at the end). It should respond with SM. If this
is not the case, read the chapter on testing. If you fat finger the
Y and enter y instead, no cause for alarm, you will simply get the
APC copyright notice.</para>
  </listitem>
  <listitem>
    <para>when you are sure you are properly connected send an upper case
D (no cr). This will put the UPS into calibration mode, and it will
drain the battery down to 25% capacity (35% for a Matrix) at which
point it will go back on the mains. In doing so, it will recompute
the runtime calibration.</para>
  </listitem>
  <listitem>
    <para>If you wish to abort the calibration, enter a second D command.</para>
  </listitem>
  <listitem>
    <para>When you are done, restart <application>apcupsd</application>.</para>
  </listitem>
</itemizedlist>

<para>In principle, you should be able to do this with the computer
powered by the UPS, but if you wish to be completely safe, you should
plug your computer into the wall prior to performing the runtime
calibration. In that case, you will need to artificially load the UPS
with light bulbs or other means. You should supply a load of about 30
to 35% but not more than 50%. You can determine the load by looking at
the output of the <command>apcaccess status</command> command while
<application>apcupsd</application> is running.</para>

<para>You should not run the recalibration command more than once or
twice per year as discharging these kinds of batteries tends to
shorten their life span.</para>

<sect1><title>Status Logging On Serial-Line UPSes</title>

<para>Serial-line UPSes that speak the apcsmart protocol log all of
the events described in the <link linkend='statusformat'>Status
Format</link> section of the Technical Reference.  Voltage-signalling
UPSes, on the other hand, have a much narrower data channel.  They
can only report a small handful of conditions.</para>

<para>The following summarizes (rather sketchily, sorry) the 
data you can expect to get from this obsolete hardware.  All
corrections and additions will be welcome.</para>

<para>From BackUPS Pro and SmartUPS v/s:</para>

<programlisting>
LINEFAIL : OnlineStatus
BATTSTAT : BatteryStatus
MAINS    : LineVoltageState
LASTEVNT : LastEventObserved
</programlisting>

<para>BackUPS and NetUPS Simple Signals</para>

<programlisting>
LINEFAIL : OnlineStatus
BATTSTAT : BatteryStatus
</programlisting>

</sect1>
</chapter>
<chapter id='datalogging'><title>DATA Logging</title>

<para>This feature is somewhat outdated and not often used.</para>

<para>Data logging consists of periodically logging important data
concerning the operation of the UPS. For the definitive definition
of the format, see log_data() in apcreports.c. The format varies
according to the UPS model and the information available from the
UPS.</para>

<para>For UPS models, NBKPRO, SMART, SHARESMART, and MATRIX, the
output is written in a format very similar to what PowerChute
writes. That is:</para>

<para>MinLineVoltage, MaxLineVoltage, OutputVoltage, BatteryVoltage,
LineFrequency, LoadPercent,
UPSTemperature,AmbientTemperature,Humidity,LineVoltage,
BatteryCharge,toggle</para>

<para>Any value that is not supported by your UPS such as
AmbientTemperature and Humidity will be blank or possibly as 0.0.
In any case the commas before and after that field will still be
output. The toggle value alternates from 0 to 1 on each line. This
was added at user request so that no two adjacent samples are
identical.</para>

<para>An actual example from the log file is:</para>

<programlisting>
Nov  2 12:43:05 matou apcupsd[23439]: 224.9,227.5,226.2,27.74,50.00,100.0,30.6,,,226.2,50.0,1
</programlisting>
</chapter>
</part>

<part id='arcana'><title>Technical Reference</title>

<chapter id='directive_reference'><title>Configuration Directive
Reference</title>

<para>Configuration directives in 
<filename>/etc/apcupsd/apcupsd.conf</filename> control the behavior
of the <application>apcupsd</application> daemon.  For most installations
it is only necessary to set a handful of general directives. The rest
can be left at their defaults unless you have an exotic configuration.</para>

<sect1><title>General Configuration Directives</title>

<para>In general, each of these directives is required (ecept that the DEVICE
directive is ignored for UPSCABLE ether).</para>

<variablelist>
  <varlistentry>
    <term> UPSTYPE &lt;type of APC UPS you have&gt;</term>

    <listitem>
      <para>The name of a driver.  Should be one of
      <literal>dumb</literal>, <literal>apcsmart</literal>,
      <literal>net</literal>, <literal>usb</literal>,
      <literal>snmp</literal>, or <literal>test</literal>. This
      describes your interface type.</para>

      <para>The UPSTYPE directive can be defined during
      installation by using the <option>--with-upstype=</option> option of
      the <command>./configure</command> program.</para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>UPSCABLE &#xA0;&#xA0; &lt;type of cable you are using&gt;&gt;</term>
    <listitem>
<literallayout>
      [ simple | 940-0020B | 940-0023A ]
      [ smart | 940-0024B | 940-0024C ]
      [ 940-1524C | 940-0024G | 940-0095A | 940-0095B | 940-0095C | 940-0119A]
      [ ether | usb ] 
</literallayout>

      <para>The <option>--with-upscable=</option> option of 
      <command>./configure</command> can be used to set a default for 
      this directive during the your build.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>DEVICE&#xA0;&#xA0; &lt;name of device&gt;</term>
    <listitem>
       <para>Specify which device is used for UPS communications
       (normally a USB or serial port. The default is platform-dependent,
       and is usually something like <filename>/dev/ttyS0</filename>. For
       USB ports, you may leave the name of the device blank (no
       specification) and <application>apcupsd</application> will
       automatically search the standard locations for the UPS.
       You may also specify a port range specification of the form
       <filename>/dev/usb/hid/hiddev[0-15]</filename>, .</para>

       <para>Normally, the <command>./configure</command> program will
       set an appropriate default value.  You may also specify the 
       <option>--with-serial-dev=</option> option of the
       <command>./configure</command> program to set this directive 
       at build time.</para>

       <para>If you have specified 
       <emphasis role="bold">UPSTYPE net</emphasis>, then the device name
       to be specified consists of 
       <emphasis role="bold">hostname:port</emphasis> where the hostname
       is the fully qualified name or IP address of the host (NIS server)
       and the port (optional) is the port to use to contact the
       server.</para>

       <para>If you specified <emphasis role="bold">UPSTYPE snmp</emphasis>,
       then the device name becomes 
       <emphasis role="bold">hostname:vendor:community</emphasis>. Please 
       see the <link linkend='snmp'>SNMP chapter</link> in this manual 
       for more details.</para>
     </listitem>
  </varlistentry>
  <varlistentry>
    <term> LOCKFILE &#xA0;&#xA0; &lt;path to lockfile&gt;</term>
    <listitem>
      <para>This option tells <application>apcupsd</application>
      where to create a lockfile for the USB or serial port in the
      specified directory. This is important to keep two programs from
      reading or writing the port at the same time. Please note
      that although the directive name is LOCKFILE, you are actually
      specifying the lock file path. <application>apcupsd</application> 
      automatically appends the name of the device when creating the file.
      On most systems, this directive is automatically set by the
      <command>./configure</command> program.  You may also explicitly
      set it during the build process by using the 
      <option>--with-lock-dir=</option> option of the 
      <command>./configure</command> program.</para>
    </listitem>
  </varlistentry>
</variablelist>

</sect1>
<sect1 id="ConfigInfoServer"><title>Configuration Directives Used by the Network Information Server</title>

<para>None of these directives are required for proper operation of
<application>apcupsd</application>. For the Network Information Server
to work, it must be enabled in the configuration (default) with
<option>--enable-nis</option></para>

<variablelist>
  <varlistentry>
    <term>NETSERVER [on | off]</term>
    <listitem>
      <para>This configuration directive turns the network information
      server on or off. If it is on, <application>apcupsd</application>
      will spawn a child process that serves STATUS and EVENTS information
      over the network. This information is currently used by the Web-based
      CGI programs. The default is on. In some cases, for added security,
      you may want to invoke a separate information server daemon from the
      inetd daemon. In that case, <emphasis>NETSERVER</emphasis> should be 
      <emphasis>off</emphasis>.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>NISIP &lt;IP-address&gt;</term>
    <listitem>
      <para>This directive specifies an IP address on which NIS server will
      listen for incoming connections. Default value is 0.0.0.0 that
      means any incoming request will be serviced but if you want it to
      listen to a single subnet you can set it up to that subnet address,
      for example 192.168.10.0. Additionally you can listen for a single
      IP like 192.168.10.1. You may also use the <option>--with-nisip=</option>
      option of the <command>./configure</command> program to set this 
      directive during the build.</para> 

      <para>This directive does not work on Win32 machines because
      inet_ipton() is not implemented there.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term> NISPORT &lt;port&gt;</term>
    <listitem>
      <para>This configuration directive specifies the port to be used by
      the <application>apcupsd</application> Network Information Server.
      The default is platform dependent, but typically 3551, which we have
      received from IANA as the official <application>apcupsd</application>
      networking port. If you change this port, you must manually change the
      #define SERV_TCP_PORT in cgi/upsfetch.c and rebuild the CGI programs.
      An alternative is to use the <option>--with-nis-port=</option> option
      of the <command>./configure</command> program during the build. 
      In this case, all the appropriate locations will be automatically
      changed.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term> EVENTSFILE &lt;filename&gt;</term>
    <listitem>
      <para>If you want the <application>apcupsd</application>
      network information server to provide the last 10 events via the
      network, you must specify a file where <application>apcupsd</application>
      will save these events. The default is: 
      <filename>/etc/apcupsd/apcupsd.events</filename>.
      Currently, <application>apcupsd</application> will save at most the 
      last 50 events. Periodically (once an hour by default), 
      <application>apcupsd</application> will check the size of this file.
      When more than 50 events are recorded, <application>apcupsd</application>
      will truncate the file to the most recent 10 events. Consequently this
      file will not grow indefinitely. Although we do not recommend it, 
      you may change these values by editing apcevents.c and changing the
      appropriate defines. Be aware that if you set these values to very 
      large numbers, <application>apcupsd</application> may make excessive
      memory demands on the system during the data access and file truncation 
      operations.</para>

      <para>This filename may also be specified at build time by
      using the <option>--with-log-dir=</option> option of the 
      <command>./configure</command> program.</para>
    </listitem>
  </varlistentry>
</variablelist>

</sect1>
<sect1 id="ConfigPowerFail"><title>Configuration Directives used during Power Failures</title>

<para>In general, none of these directives are required. However, if
you have a voltage-signalling (dumb) UPS with a cable that does not
support the Low Battery signal, you must set the TIMEOUT directive to
force a shutdown. Please see the <link linkend='cables'>Cables</link>
section of this manual for more details. </para>

<variablelist>
  <varlistentry>
    <term>ANNOY &#xA0;&#xA0; &lt;time in seconds&gt;</term>
    <listitem>
      <para>Specify the time in seconds between messages requesting logged
      in users to get off the system during a power failure. This timer
      starts only when the UPS is running on batteries. The default is
      300 seconds (5 minutes). <application>apcupsd</application> sends
      the annoy messages by invoking the <application>apccontrol</application>
      script with the <command>annoyme</command> argument. The default is
      to send a <application>wall</application> message on Unix
      systems and a popup message in Windows.</para>

      <para>The value of <emphasis role="bold">ANNOYDELAY</emphasis> must be 
      greater than the value of <emphasis role="bold">ANNOY</emphasis> in
      order to receive annoy messages (this doesn't make sense, and means
      that the default values do not generate annoy messages: KES).</para>

      <para>Note that if <emphasis role="bold">NOLOGON</emphasis> 
      is set to <emphasis role="bold">disable</emphasis> the annoy messages
      will also be disabled.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>ANNOYDELAY&#xA0;&#xA0; &lt;time in seconds&gt;</term>
    <listitem>
      <para>Specify delay time in seconds before 
      <application>apcupsd</application> begins requesting logged in users 
      to get off the system during a power failure. This timer starts only
      after the UPS is running on batteries. This timer is reset when the
      power returns. The default is 60 seconds. Thus, the first warning to 
      log off the system occurs after 60 seconds on batteries, assuming
      that <emphasis role="bold">NOLOGON</emphasis> is not set to 
      <emphasis role="bold">disable</emphasis>.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>NOLOGON&#xA0;&#xA0;
&lt;specifies when <application>apcupsd</application> should prevent user
logins&gt;</term>
    <listitem>
      <para>[ disable | timeout | percent | minutes | always ] are valid types.</para>

      <para>The type specified allows you define the point when
      <application>apcupsd</application> will create the 
      <filename>/etc/nologin</filename> file and thus when user
      logins are prohibited. Once the <filename>/etc/nologin</filename> file
      is created, normal users are prevented from logging in. Control of
      when this file is created is important for allowing systems with
      big UPSes to run as normally until the system administrator
      determines the need for preventing user logins. The feature also
      allows the system administrator to hold the "ANNOY" factor until
      the <filename>/etc/nologin</filename> file is created. The default is
      always if no NOLOGON directive is specified.</para>

      <para>As far as I can tell, the only useful types are disable
      and always since the difference in the time when the logout
      warning is given and shutdown occurs for the other types is very
      short (KES).</para>

      <variablelist>
      <varlistentry>
      <term>disable</term>
      <listitem>
        <para>prevents <application>apcupsd</application> from creating
        the nologin file.  Consequently, any user can login during a
        power failure condition.  Also, the ANNOY feature is disabled so
        users will not be warned to logoff the system.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
      <term>timeout</term>
      <listitem>
        <para>specifies that <application>apcupsd</application> should
        prohibit logins after the UPS is on batteries for 90% of the
        time specified on the <emphasis role='bold'>TIMEOUT</emphasis>
        configuration directive. Note! Normally you don't want to
        specify a TIMEOUT value, so this option is probably not too
        useful (KES).</para>
      </listitem>
      </varlistentry>
      <varlistentry>
      <term>percent</term>
      <listitem>
        <para>specifies that <application>apcupsd</application> should
        prohibit logins when the remaining battery charge percentage
        reaches 110% or less than the value specified on the <emphasis
        role='bold'>BATTERYLEVEL</emphasis> configuration directive.
        Thus if the <emphasis role='bold'>BATTERYLEVEL</emphasis> is
        specified as 15, <application>apcupsd</application> will
        prohibit logins when the battery charge drops below 16% (15% X
        110% = 16%).</para>
      </listitem>
      </varlistentry>
      <varlistentry>
      <term>minutes</term>
      <listitem>
        <para>specifies that <application>apcupsd</application> should
        prohibit logins when the remaining runtime in minutes reaches
        110% or less than the value specified on the <emphasis
        role='bold'>MINUTES</emphasis> configuration directive. Thus if
        <emphasis role='bold'>MINUTES</emphasis> is set to 3,
        <application>apcupsd</application> will prohibit logins when the
        remaining runtime is less than 3 minutes (3 X 110% = 3).</para>
      </listitem>
      </varlistentry>
      <varlistentry>
      <term>always</term>
      <listitem>
        <para>causes <application>apcupsd</application> to immediately
        prohibit logins when a power failure occurs. This will also
        enable the ANNOY feature.</para>
      </listitem>
      </varlistentry>
      </variablelist>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>BATTERYLEVEL &#xA0;&#xA0; &lt;percent of battery&gt;</term>
    <listitem>
      <para>If BATTERYLEVEL is specified, during a power failure,
      <application>apcupsd</application> will halt the system when the 
      remaining battery charge falls below the specified percentage. 
      The default is 5 percent. This directive is ignored for dumb 
      (voltage-signalling) UPSes. To totally disable this counter, set 
      <emphasis role="bold">BATTERYLEVEL -1</emphasis> in your
      <filename>apcupsd.conf</filename> file.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>MINUTES &#xA0;&#xA0; &lt;battery runtime in minutes&gt;</term>
    <listitem>
      <para>If MINUTES is specified, during a power failure,
      <application>apcupsd</application> will shutdown the system when
      the remaining runtime on batteries as internally calculated by
      the UPS falls below the time specified. The default is 3. This
      directive is ignored for dumb (voltage-signalling) UPSes. It
      should be noted that some UPSes report an incorrect value for
      remaining runtime when the battery is fully charged. This can be
      checked by examining the <emphasis
      role="bold">TIMELEFT</emphasis> value as printed in the output
      of an <command>apcaccess status</command> command. If the value
      is zero or otherwise unreasonable, your UPS is probably broken.
      In this case, we recommend that you disable this timer by
      setting <emphasis role="bold">MINUTES -1</emphasis> in your
      <filename>apcupsd.conf</filename> file.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>TIMEOUT &#xA0;&#xA0; &lt;time in seconds&gt;</term>
    <listitem>
      <para>After a power failure, <application>apcupsd</application>
      will halt the system when TIMEOUT seconds have expired. A value
      of zero disables this timer. Normally for all Smart UPS models
      and dumb UPSes with cables that support low battery detection,
      this should be zero so that the shutdown time will be determined
      by the battery level and/or remaining runtime (see above) or in
      the case of a voltage-signalling UPS, when the battery is
      exhausted. This command is required for dumb UPSes that do not
      provide a battery exhausted signal (only testing can determine
      this point). For more information, see the <link
      linkend='testing'>Testing</link> section of this manual. This
      timer can also be useful if you want some slave machines to
      shutdown before other machines to conserve battery power. It is
      also useful for testing <application>apcupsd</application>
      because you can force a rapid shutdown by setting a small value
      (e.g. 60) and pulling the plug to the UPS.</para>

      <para>When apcupsd is running in master mode (UPSCLASS
      netmaster), and a shutdown condition is determined,
      <application>apcupsd</application> will notify each of the
      slaves to perform a shutdown then apcupsd will sleep for 30
      seconds before issuing the shutdown of its own computer. If you
      need the master to wait additional time before shutting down (to
      allow for shutdown of slower slaves or of slaves running
      software that requires more time to shutdown &mdash; e.g. databases),
      you can do so by adding additional sleep() commands to
      <filename>/etc/apcupsd/apccontrol</filename> in each case that 
      causes a shutdown.</para>

      <para><emphasis role='bold'>TIMEOUT</emphasis>, <emphasis
      role='bold'>BATTERYLEVEL</emphasis>, and <emphasis
      role='bold'>MINUTES</emphasis> can be set together without
      problems. apcupsd will react to the first case or test that is
      valid. Normally SmartUPS users will set <emphasis
      role='bold'>TIMEOUT</emphasis> to zero so that the system is
      shutdown depending on the percentage battery charge remaining
      (<emphasis role='bold'>BATTERYLEVEL</emphasis>) or the remaining
      battery runtime (<emphasis role='bold'>MINUTES</emphasis>).</para>
    </listitem>
  </varlistentry>
  <varlistentry id="KILLDELAY">
    <term> KILLDELAY &#xA0;&#xA0; &lt;time in seconds&gt;</term>
    <listitem>
      <para>If killdelay is set, <application>apcupsd</application> will 
      continue running after a shutdown has been requested, and after the 
      specified time in seconds, <application>apcupsd</application> will 
      attempt to shut off the UPS the power. This directive should
      normally be disabled by setting the value to zero, but on some
      systems such as Win32 systems <application>apcupsd</application> 
      cannot regain control after a shutdown to force the UPS to shut 
      off the power. In this case, with proper consideration for the timing,
      the <emphasis role="bold">KILLDELAY</emphasis> directive can be useful.
      Please be aware, if you cause <application>apcupsd</application> to 
      kill the power to your computer too early, the system and the disks 
      may not have been properly prepared. In addition, 
      <application>apcupsd</application> must continue running after the 
      shutdown is requested, and on Unix systems, this is not normally the 
      case as the system will terminate all processes during the 
      shutdown.</para>
    </listitem>
  </varlistentry>
</variablelist>

</sect1>
<sect1 id="ConfigLogging"><title>Configuration
Directives used to Control System Logging</title>

<variablelist>
  <varlistentry>
    <term>STATTIME&#xA0;&#xA0;&lt;time&gt;</term>
    <listitem>
      <para>This directive supplies the time interval between writes to the
      STATUS file. If set to zero, the STATUS file will not be written.
      Please note that in a future version of 
      <application>apcupsd</application> the STATUS
      file code will disappear since its functionality has been replaced
      by the Network Information Server and by 
      <emphasis role="bold">apcaccess status</emphasis>, as a consequence, 
      it is normally disabled by setting it to zero.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>STATFILE &#xA0;&#xA0;&lt;file&gt;</term>
    <listitem>
      <para>This directive specifies the file to be used when writing the
      STATUS information. The default is 
      <filename>/etc/apcupsd/apcupsd.status</filename>.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>DATATIME&lt;time&gt;</term>
    <listitem>
      <para>This directives supplies the time interval between writes
      of PowerChute&amp;tm; like data information to the log file. See
      the <link linkend='datalogging'>Data</link> section of this
      manual for additional details.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>FACILITY&#xA0;&#xA0;&lt;log-facility&gt;</term>
    <listitem>
      <para>The facility directive can be used to change the system logging 
      class or facility. The default is 
      <emphasis role="bold">DAEMON</emphasis>. This parameter can be useful 
      if you wish to direct the <application>apcupsd</application> system 
      logging information to other than your system default files. See 
      the Logging section of this manual for additional <!-- FIXME -->
      details.</para>
    </listitem>
  </varlistentry>
</variablelist>

</sect1>
<sect1 id="UPS_Sharing"><title>Configuration Directives for Sharing 
a UPS</title>

<para>The following directives apply to the master/slave networking
mode of <application>apcupsd</application> where multiple machines can
be powered by the same UPS. One machine, the master, will have a
serial port connection to the UPS, and the other machines, the slaves,
will obtain their information via the network from the master.</para>

<para>Note, as of version 3.10.x, the old master/slave code is by
default turned off in the configuration. You must explicitly enable
it by including a <option>--enable-master-slave</option> option on your
<command>./configure</command> command before building the source.</para>

<para>In addition to the old master/slave code, there is now a new
network driver enabled with <option>--enable-net</option> (default
disabled) that can be used to control a slave from any version of
apcupsd running NIS. This is a much more flexible system of
controlling slaves because a slave machine that also has NIS turned on
can thus act as a master for another slave with
<option>--enable-net</option> turned on. With this mode turned on, the
slave obtains the address of the master from the <emphasis
role="bold">DEVICE</emphasis> directive, which takes the form
<emphasis role="bold">hostname[:port]</emphasis> as a consequence,
none of the directives apply for this form of networking. In addition,
for this mode to work, you must specify <emphasis role="bold">UPSTYPE
net</emphasis> so that the proper driver is loaded.</para>

<para>The remainder of this section presents directives that apply to
the old master/slave code that must be enabled by the <emphasis
role="bold">enable-master-slave</emphasis> configuration
option.</para>

<variablelist>
  <varlistentry>
    <term>UPSCLASS&#xA0;&#xA0; &lt;class of operation&gt;</term>
    <listitem>
      <para>[ standalone | shareslave | sharemaster ] and
      [ netslave | netmaster ] are valid types.
      [ standalone | netslave | netmaster ] are tested classes.
      [ shareslave | sharemaster ] classes are being tested.</para>

      <para>The default is <emphasis role='bold'>standalone</emphasis>
      and should be used for all machines powered by the UPS and having a
      serial port connection to the UPS, but where there are no other
      computers dependent on power from the same UPS. This is the
      normal case.</para>

      <para>Use <emphasis role='bold'>netmaster</emphasis>, if and only
      if you have a serial port connection to the UPS and there are other
      machines deriving power from the same UPS. This is required in all
      master configuration files.</para>

      <para>Use <emphasis role='bold'>netslave</emphasis> if and only if
      you have no serial port connection to the UPS, but you derive power
      from it. This is required in all slave configuration files, and in
      this case, you will also have UPSCABLE set to ether.</para>

      <para>Use <emphasis role='bold'>shareslave</emphasis> if and only
      if you are using a ShareUPS and connected to a BASIC Port with
      Simple Signal. This code is not fully tested.</para>

      <para>Use <emphasis role='bold'>sharemaster</emphasis>, if and only 
      if you are using a ShareUPS and connected to the ADVANCED Port Smart 
      Signal control. This code is not fully tested.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>UPSMODE &#xA0;&#xA0; [disable | share | net | sharenet ] are valid types.</term>
    <listitem>
      <para>[ disable | net ] are the only known and tested classes.</para>

      <para>[ share | sharenet ] classes are being tested.</para>

      <para>For normal standalone operations, you will set UPSMODE to
      disable to indicate that you are disabling the master/slave
      networking.</para>

      <para>However, if you are using a single UPS to power several
      computers and you have configured master and slave computers, then
      set this value to net.</para>

      <para>Use share for two or seven (2/7) additional simple signal ports
      on a SmartAccessories(tm) (internal/external box) for SmartUPSes.
      The share and sharenet code is not fully tested.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>NETTIME &#xA0;&#xA0; &lt;time in seconds&gt;</term>
    <listitem>
      <para>The interval in seconds that the master uses to send
      information to slave machines. This rate is automatically set to 1
      second if the UPS goes on batteries and reset to your specified
      value when the mains power returns. A typical value might be 60
      seconds.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>NETPORT &#xA0;&#xA0; &lt;IP port number&gt;</term>
    <listitem>
      <para>This port number is used for communications in 
      the master/slave networking code. Note that the master and each slave 
      must have the same port number specified on the NETPORT directive in 
      the configuration file. This port may also be specified during 
      installation by using the <option>--with-net-port=</option> option of 
      the <command>./configure</command> program.</para>

      <para>The NETPORT should not be confused with the port number for the
      Network Information Server which is specified with the
      <emphasis role="bold">SERVERPORT</emphasis> configuration 
      directive.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>MASTER&#xA0;&#xA0; &lt;name of the master&gt; for slave machines.</term>
    <listitem>
       <para>Used in slave configuration files, this is the network name of
      the master which is authorized to send commands to this slave. In
      all cases (of which I am aware), when you specify a 
      <emphasis role="bold">MASTER</emphasis> directive, you will also specify 
      <emphasis role="bold">UPSCABLE ether</emphasis> since your
      information about the UPS will come via the network from a master.</para>

      <para>The slave machine will be shutdown whichever occurs first:
      either at the request of the master when it does a shutdown or when
      the values you have specified for TIMEOUT, BATTERYLEVEL, or MINUTES
      expire (these should work but have not been fully tested).
      Consequently, if you want the slaves to begin shutting down before
      the master, you can do so by adjusting the values in the
      configuration file. If you want the slave to remain up until the
      master shuts down, you should set TIMEOUT, BATTERYLEVEL, and
      MINUTES all to zero.</para>

      <para>For proper functioning of the slave, you must specify the same
      <emphasis role="bold">UPSTYPE</emphasis> in the slave configuration 
      file as is in the master configuration file.</para>

      <para>It should be noted that the master and slaves continue to
      communicate over the network even after the master has issued a
      shutdown command to the slaves. This is because the master 
      <application>apcupsd</application> continues to run until it receives 
      the shutdown signal from the system. This is important to ensure that 
      all the slaves have been properly notified of the shutdown.</para>

      <para>We recommend that the machine names used on the 
      <emphasis role="bold">MASTER</emphasis> and 
      <emphasis role="bold">SLAVE</emphasis> directives be put in your 
      <filename>/etc/hosts</filename> file so that 
      <application>apcupsd</application> will be able to resolve the machine 
      name during startup and shutdown even if DNS is not running.
      Alternatively, you can use IP addresses on the 
      <emphasis role="bold">MASTER</emphasis> and
      <emphasis role="bold">SLAVE</emphasis> directives, but this is 
      less flexible.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>SLAVE&#xA0;&#xA0; &lt;name of slave(s)&gt; used only in MASTER 
    configuration files.</term>
    <listitem>
      <para>Used in master configuration files, this is the name of a slave
      machine that depends on this master. There can be a maximum of 20
      slaves attached to one master. Thus you can specify multiple SLAVE
      directives in a master configuration file. Only one slave name can
      be specified per SLAVE directive, thus for multiple slaves, specify
      multiple SLAVE directives.</para>

      <para>As noted above the master and slaves continue to communicate
      over the network even after the master has issued a shutdown
      command to the slaves. This is because the master 
      <application>apcupsd</application> continues to run until it receives 
      the shutdown signal from the
      system. This is important to ensure that all the slaves have been
      properly notified of the shutdown.</para>

      <para>We recommend that the machine names used on the 
      <emphasis role="bold">MASTER</emphasis> and 
      <emphasis role="bold">SLAVE</emphasis> directives be put in your 
      <filename>/etc/hosts</filename> file
      so that <application>apcupsd</application> will be able to resolve
      the machine name during startup and shutdown even if DNS is not running.
      Alternatively, you can use IP addresses on the 
      <emphasis role="bold">MASTER</emphasis> and
      <emphasis role="bold">SLAVE</emphasis> directives, but this is less 
      flexible.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>USERMAGIC&#xA0;&#xA0; &lt; user defined magic&gt; used only in 
    SLAVE configuration files.</term>
    <listitem>
      <para>The USERMAGIC directive is a sort of password that gives a second 
      level of identification security in a slave configuration file. It is a 
      character string up to 17 characters in length. It should be unique for 
      each slave. When the slave makes initial contact with the master, this 
      string is passed to the master. Then on each transmission from the 
      master to the slave, the string is passed back to the slave, which 
      checks that it is the correct string before accepting the master's 
      information. This string should be different for each and every slave 
      on the network. This directive is not required.</para>
    </listitem>
  </varlistentry>
</variablelist>

</sect1>
<sect1 id="eprom"><title>Configuration Directives Used to Set the 
UPS EPROM</title>

<para>The values specified with the following directives are only used
if the <option>--configure</option> option is specified on the 
<application>apcupsd</application> command line, and the UPS is capable of 
internal EPROM programming.  In that case, <application>apcupsd</application> 
attempts to set the values into the UPSes EPROM.</para>

<para>Under normal operations, the values for these parameters
specified in the configuration file are not used. Instead, they are
read from the UPS EPROM by <application>apcupsd</application>.  See
<xref linkend="eprom"/> of this manual for further details
before attempting to reprogram your EEPROM.</para>

<variablelist>
  <varlistentry>
    <term>SENSITIVITY &#xA0;&#xA0; &lt;sets sensitivity level&gt;</term>
    <listitem>
      <para>(H)igh, (M)edium, (L)ow</para>

      <para>This value determine how sensitive
      the UPS is to the mains quality and voltage fluctuations. The more
      sensitive it is, the quicker the UPS will switch to battery power
      when the mains line quality is bad. Normally, this should be set to
      H, but if you find your UPS switching to batteries frequently, you
      might want to try a less sensitive setting, providing that your
      computer equipment tolerates the poor quality mains. This value is
      written to the UPS EPROM when the  configure option is
      specified.</para>

      <para>Under normal apcupsd operations (no <option>--configure</option>
      option), <application>apcupsd</application> will read the value 
      stored in the UPS and display it in the STATUS output.</para>
    </listitem>
  </varlistentry>
  <varlistentry id='WAKEUP'>
    <term>WAKEUP&#xA0;&#xA0; &lt;set wakeup delay&gt;</term>
    <listitem>
      <para>The UPS power restart delay value in [0,60,180,300] in seconds
      after the UPS has shut down during a power failure. This is to
      prevent the power from coming back on too quickly after a power
      down, and is important for those who have high rpm drives that need
      to spin down before powering them up again. Some older SCSI models
      are very sensitive to this problem. Default is zero. This value is
      written to the UPS EPROM when the <option>--configure</option> option is
      specified.</para>

      <para>Under normal apcupsd operations (no 
      <option>--configure</option> option), 
      <application>apcupsd</application> will read the value stored in the 
      UPS and display it in the STATUS output.</para>
    </listitem>
  </varlistentry>
  <varlistentry id='SLEEP'>
    <term>SLEEP&#xA0;&#xA0; &lt;set sleep delay&gt;</term>
    <listitem>
      <para>The UPS delay or grace period in [20,180,300,600] seconds
      before the UPS cuts the power to your equipment. The default is 20
      seconds. This value is written to the UPS EPROM when the
      <option>--configure</option> option is specified.</para>

      <para>Under normal 
      <application>apcupsd</application>operations (no 
      <option>--configure</option> option), <application>apcupsd</application>
      will read the value stored in the UPS and display it in the STATUS
      output.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>LOTRANSFER&#xA0;&#xA0; &lt;lower limit of ups batt. transfer&gt;</term>
    <listitem>
      <para>This sets the low line voltage point at which to switch over to 
      batteries. Different values are permitted based on the UPS model, 
      classification, and manufacture date. Use <command>apcaccess 
      eeprom</command> to show you which values are permitted. This value is 
      written to the UPS EPROM when the <option>--configure</option> option 
      is specified.</para>

      <para>Under normal 
      <application>apcupsd</application>operations (no 
      <option>--configure</option> option), <application>apcupsd</application>
      will read the value stored in the UPS and display it in the STATUS
      output.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>HITRANSFER &#xA0;&#xA0; &lt;upper limit of ups batt. transfer&gt;</term>
    <listitem>
      <para>This sets the high line voltage point to switch over to batteries.
      Different values are permitted based on the UPS model, 
      classification, and manufacture date. Use <command>apcaccess 
      eeprom</command> to show you which values are permitted. This value is 
      written to the UPS EPROM when the <option>--configure</option> option 
      is specified.</para>

      <para>Under normal 
      <application>apcupsd</application>operations (no 
      <option>--configure</option> option), <application>apcupsd</application>
      will read the value stored in the UPS and display it in the STATUS
      output.</para>
    </listitem>
  </varlistentry>
  <varlistentry id='RETURNCHARGE'>
    <term>RETURNCHARGE &#xA0;&#xA0; &lt;min. batt. charge level&gt;</term>
    <listitem>
      <para>This parameter specifies what
      battery percentage charge is necessary before the UPS will supply
      power to your equipment after a power down. Different values are
      permitted based on the UPS model, classification, and manufacture
      date. Use <command>apcaccess eeprom</command> to show you which 
      values are permitted. This value is written to the UPS EPROM when the
      <option>--configure</option> option is specified.</para>

      <para>Under normal 
      <application>apcupsd</application>operations (no 
      <option>--configure</option> option), <application>apcupsd</application>
      will read the value stored in the UPS and display it in the STATUS
      output.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>BEEPSTATE&#xA0;&#xA0; &lt;alarm beep state&gt;</term>
    <listitem>
      <para>This parameter tells the UPS when it can sound its audio alarm.
      These settings are based on discrete events related to the
      remaining capacity of the UPS.</para>

      <variablelist>
        <varlistentry>
        <term>0</term>
        <listitem><para>immediately upon power failure</para></listitem>
        </varlistentry>

        <varlistentry>
        <term>T</term>
        <listitem><para>power failure + 30 seconds</para></listitem>
        </varlistentry>

        <varlistentry>
        <term>L</term>
        <listitem><para>low battery power</para></listitem>
        </varlistentry>

        <varlistentry>
        <term>N</term>
        <listitem><para>never</para></listitem>
        </varlistentry>
      </variablelist>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>UPSNAME &#xA0;&#xA0;
&lt;string&gt;</term>
    <listitem>
      <para>This is an eight character string. 
      This is the UPS name that will be stored in the UPS EPROM.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>BATTDATE &#xA0;&#xA0; &lt;string&gt;</term>
    <listitem>
      <para>This is an eight character string that is the last date the 
      batteries were changed.</para>
    </listitem>
  </varlistentry>
</variablelist>
</sect1>
</chapter>

<chapter id='config-examples'><title>Configuration Examples</title>

<sect1><title>A Simple Configuration for a SmartUPS</title>

<para>You have a Smart UPS using the cable supplied by APC. A very simple
configuration file would look like the following:</para>

<programlisting>
## apcupsd.conf v1.1 ##
UPSCABLE smart
UPSTYPE smartups
DEVICE /dev/ttyS0
LOCKFILE /var/lock
UPSCLASS standalone
UPSMODE disable
</programlisting>

<para>Normally you would have many more configuration directives to
completely customize your installation, but this example shows you
the minimum required.</para>

</sect1>
<sect1><title>A Simple USB Configuration</title>

<programlisting>
## apcupsd.conf v1.1 ##
UPSCABLE usb
UPSTYPE usb
DEVICE /dev/usb/hid/hiddev[0-15]
LOCKFILE /var/lock
UPSCLASS standalone
UPSMODE disable
</programlisting>

</sect1>
<sect1><title>A Simple Master Configuration</title>

<para>You have a Smart UPS using the cable supplied by APC and you want
it to act as a master for another computer, which is powered by the
same UPS. A very simple configuration file would look like the
following:</para>

<programlisting>
## apcupsd.conf v1.1 ## 
UPSCABLE smart
UPSTYPE smartups
DEVICE /dev/ttyS0
LOCKFILE /var/lock
UPSCLASS netmaster
UPSMODE net
NETTIME 10
NETPORT 6666
SLAVE slave1.mynetwork.com
SLAVE slave2.mynetwork.com
</programlisting>

<para>Note, the main difference from the stand alone configuration is
that you have specified <emphasis role="bold">UPSCLASS
netmaster</emphasis> and <emphasis role="bold">UPSMODE
net</emphasis>. In addition, you have specified one or more slave
machines.</para>

</sect1>
<sect1><title>A Simple Slave Configuration</title>

<para>You have a Smart UPS using the cable supplied by APC that is
connected to the master machine configured above. This slave
machine has no serial port connection to the UPS, but is powered by
the same UPS as the master. A very simple configuration file would
look like the following:</para>

<programlisting>
## apcupsd.conf v1.1 ## 
UPSCABLE ether
UPSTYPE smartups
LOCKFILE /var/lock
UPSCLASS netslave
UPSMODE net
NETPORT 6666
MASTER master.mynetwork.com
</programlisting>

<para>The main difference from the master configuration is that you
have specified <emphasis role="bold">UPSCABLE ether</emphasis> and
<emphasis role="bold">UPSCLASS netslave</emphasis>.  In addition, you
have specified a single controlling master.</para>

<para>In this configuration, the shutdown will be initiated by the
master. It is also possible to specify BATTERYLEVEL, MINUTES, and
TIMEOUT configuration directives in the Slave machine that will
cause the slave to shutdown before the master. This can often be
useful if the slave is less important than the master and you wish
to reduce battery power consumption so that the master can remain
up longer during a power outage.</para>

</sect1>
<sect1><title>Variation on the Master/Slave Configuration</title>

<para>It is also possible to have a Master/Slave configuration where
the Slave is powered by a different UPS (or any other power source),
but is nevertheless controlled (i.e. shutdown) by the master. The
setup would be identical to the Master/Slave configuration files shown
above. The only difference is where the slave actually receives its
power. In effect, <application>apcupsd</application> does not
know or care where the power really comes from.</para>

</sect1>
<sect1><title>A Sample Slave Configuration Using the Net Driver</title>

<para>As opposed to the master/slave mode demonstrate above, you can
turn any computer into a slave by configuring with the NIS network
driver turned on <option>--enable-net</option>. Running in this
configuration, you can use any computer with
<application>apcupsd</application> running the Network Information
Server (NIS) as the master. The slave simply uses the NIS information
to decide when to shutdown. This is a much simpler mode than the older
master/slave code mentioned above.</para>

<programlisting>
## apcupsd.conf v1.1 ## 
UPSCABLE ether
UPSTYPE net
LOCKFILE /var/lock
DEVICE server-network-address:3551
UPSCLASS standalone
UPSMODE disable
</programlisting>

<para>where on the <emphasis role="bold">DEVICE</emphasis> directive
you replace the <option>server-network-address</option> with the fully
qualified domain name or IP address of a machine running
<application>apcupsd</application> with NIS enabled (and normally, but
not required, connected to a UPS). The :3551 that follows the server
address is the port to use. The default is 3551, but older versions of
apcupsd used port 7000.</para>

<para>Please do not confuse this with a master/slave network
configuration that is described above. This is a master/slave
setup, but much simpler (the master does not know about the
slaves), and any NIS server, even a slave, can act as a server to a
slave that listens to it.</para>

<para>This mode works principally by reading the STATFLAG record that
is sent by the NIS (present in the output of apcaccess). The low 16
bits are the standard APC status flag, and the upper 16 bits
represent the internal state of apcupsd, so the slave can see when
the power fails and know when to shutdown.</para>
</sect1>
</chapter>
<chapter id='statusformat'><title><application>apcupsd</application> Status Logging</title>

<para>There is a good deal of information available about the UPS and
<application>apcupsd</application>'s status. This document describes
the format of that information.  Normally you will get at it via
<application>apcaccess</application>, but there are other ways as
well.</para>

<sect1><title>Status report format</title>

<para>The STATUS output is in ASCII format with a single data value or
piece of information on each line output. Because not all UPSes supply
the same information, the output varies based on the type of UPS that
you are using. In general, if the information is not available for
your UPS, the data portion of the output record will contain an
<emphasis role="bold">N/A</emphasis> indicating that the information
is not available.</para>

<para>Status logging consists of periodically logging ALL available
information concerning the UPS. Since the volume of data is rather
large (over 1000 bytes per status), the STATUS data is not
automatically sent to the system log file, instead, it is written
as a series of data records to a specific file (normally
<filename>/etc/apcupsd/apcupsd.status</filename>).</para>

<para>After each write, the file is rewound so that the size of the
file remains constant. At the current time, this file is 1135
bytes. The format of this file is very similar to the old
<application>apcupsd</application> procfs file. The STATUS file is
kept for backward compatibility and will be eliminated in a future
version of <application>apcupsd</application>. The preferred method
for obtaining this information is from
<application>apcaccess</application> or by using the <link
linkend='cgiprogs'>CGI interface</link>.</para>

<para>To make reading the status data reliable via a named pipe, the
first record written contains a version number, the number of
records that follow the first record, and the total number of bytes
in those subsequent records. An actual example of such a status
file (/etc/apcupsd/apcupsd.status) is:</para>

<para>Consequently, the first record always consists of 24 bytes (23
characters followed by a newline). This record starts with APC and
as indicated in the example above is followed by 28 records
consisting of 675 bytes. The last record begins with END APC and
contains the date and time matching the DATE record.</para>

<para>Documentation of each record needs to be written. In the coming
weeks, I plan to add additional records and possibly change the
names of some of the fields.</para>

<para>When this data is written to a file, it is written as two
records, the first record, and all the other records together. In
reading the file, it can be either be read a record at a time, or
in one big read.</para>

<para>When this data is written to syslog(), it is written a record at
a time. The first record is the first 24 bytes. By having the
number of records and the size in the first record, the complete
status can be reliably reassembled.</para>

</sect1>
<sect1><title>Status Report Example</title>

<para>An example of output from an international SmartUPS 1000
follows:</para>

<programlisting>
DATE     : Wed Sep 27 17:30:23 CEST 2000
HOSTNAME : polymatou.sibbald.com
RELEASE  : 3.7.3-20000925
CABLE    : Custom Cable Smart
MODEL    : SMART-UPS 1000
UPSMODE  : Stand Alone
STARTTIME: Wed Sep 27 10:39:23 CEST 2000
UPSNAME  : UPS_IDEN
STATUS   : ONLINE 
LINEV    : 235.3 Volts
LOADPCT  :   9.3 Percent Load Capacity
BCHARGE  : 100.0 Percent
TIMELEFT : 130.0 Minutes
MBATTCHG : 5 Percent
MINTIMEL : 3 Minutes
MAXTIME  : 0 Seconds
MAXLINEV : 239.2 Volts
MINLINEV : 234.0 Volts
OUTPUTV  : 236.6 Volts
SENSE    : High
DWAKE    : 000 Seconds
DSHUTD   : 020 Seconds
DLOWBATT : 02 Minutes
LOTRANS  : 196.0 Volts
HITRANS  : 253.0 Volts
RETPCT   : 000.0 Percent
ITEMP    : 32.8 C Internal
ALARMDEL : 5 seconds
BATTV    : 27.9 Volts
LINEFREQ : 50.0 Hz
LASTXFER : Line voltage notch or spike
NUMXFERS : 0
XONBATT  : N/A
TONBATT  : 0 seconds
CUMONBATT: 0 seconds
XOFFBATT : N/A
SELFTEST : NO
STESTI   : 336
STATFLAG : 0x08 Status Flag
DIPSW    : 0x00 Dip Switch
REG1     : 0x00 Register 1
REG2     : 0x00 Register 2
REG3     : 0x00 Register 3
MANDATE  : 07/31/99
SERIALNO : QS9931125245
BATTDATE : 07/31/99
NOMOUTV  : 230
NOMBATTV :  24.0
HUMIDITY : N/A
AMBTEMP  : N/A
EXTBATTS : 0
BADBATTS : N/A
FIRMWARE : 60.11.I
APCMODEL : IWI
END APC  : Wed Sep 27 17:30:31 CEST 2000
</programlisting>

</sect1>
<sect1><title>Status Report Fields</title>

<para>The meaning of the above variables are:</para>

<variablelist>
  <varlistentry>
    <term>APC</term>
    <listitem>
      <para>is the header record indicating the STATUS format revision
level, the number of records that follow the APC statement, and the
number of bytes that follow the record.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>DATE</term>
    <listitem>
      <para>is the date and time that the information was last obtained
from the UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>HOSTNAME</term>
    <listitem>
      <para>is the name of the machine that collected the UPS data.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>RELEASE</term>
    <listitem>
      <para>is the <application>apcupsd</application> release number.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>CABLE</term>
    <listitem>
      <para>is the cable as specified in the configuration file.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>MODEL</term>
    <listitem>
      <para>is the UPS model as derived from information from the UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>UPSMODE</term>
    <listitem>
      <para>is the mode in which <application>apcupsd</application> is operating.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>STARTTIME</term>
    <listitem>
      <para>is the time/date that <application>apcupsd</application> was started.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>UPSNAME</term>
    <listitem>
      <para>is the name of the UPS as stored in the EEPROM.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>STATUS</term>
    <listitem>
      <para>is the current status of the UPS (ONLINE, CHARGING,
ONBATT,...)</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>MASTERUPD</term>
    <listitem>
      <para>is the last time the master sent an update to the slave. This
value is present only in slave configurations.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>LINEV</term>
    <listitem>
      <para>is the current line voltage as returned by the UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>LOADPCT</term>
    <listitem>
      <para>is the percentage of load capacity as estimated by the
UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>BCHARGE</term>
    <listitem>
      <para>is the percentage charge on the batteries.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>TIMELEFT</term>
    <listitem>
      <para>is the remaining runtime left on batteries as estimated by the
UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>MBATTCHG</term>
    <listitem>
      <para>if the battery charge percentage (BCHARGE) drops below this
value, <application>apcupsd</application> will shutdown your system.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>MINTIMEL</term>
    <listitem>
      <para><application>apcupsd</application> will shutdown your system if the remaining
runtime equals or is below this point.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>MAXTIME</term>
    <listitem>
      <para><application>apcupsd</application> will shutdown your system if the time on
batteries exceeds this value. A value of zero disables the
feature.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>MAXLINEV</term>
    <listitem>
      <para>is the maximum line voltage since the last STATUS as returned
by the UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>MINLINEV</term>
    <listitem>
      <para>is the minimum line voltage since the last STATUS as returned
by the UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>OUTPUTV</term>
    <listitem>
      <para>is the voltage the UPS is supplying to your equipment.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>SENSE</term>
    <listitem>
      <para>is the sensitivity level of the UPS to line voltage
fluctuations.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>DWAKE</term>
    <listitem>
      <para>is the amount of time the UPS will wait after a power off
condition when the power is restored.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>DSHUTD</term>
    <listitem>
      <para>is the grace delay that the UPS gives after receiving a power
down command from <application>apcupsd</application> before it powers off your
equipment.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>DLOWBATT</term>
    <listitem>
      <para>is the remaining runtime below which the UPS sends the low
battery signal. At this point <application>apcupsd</application> will force an
immediate emergency shutdown.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>LOTRANS</term>
    <listitem>
      <para>is the line voltage below which the UPS will switch to
batteries.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>HITRANS</term>
    <listitem>
      <para>is the line voltage above which the UPS will switch to
batteries.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>RETPCT</term>
    <listitem>
      <para>is the percentage charge that the batteries must have after a
power off condition before the UPS will restore power to your
equipment.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>STATFLAG</term>
    <listitem>
      <para>is a status flag indicating the UPS status. See STATUS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>ITEMP</term>
    <listitem>
      <para>is the internal UPS temperature as supplied by the UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>ALARMDEL</term>
    <listitem>
      <para>is the delay period for the UPS alarm.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>BATTV</term>
    <listitem>
      <para>is the battery voltage as supplied by the UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>LINEFREQ</term>
    <listitem>
      <para>is the line frequency in Hertz as given by the UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>LASTXFER</term>
    <listitem>
      <para>is the reason for the last transfer to batteries.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>NUMXFERS</term>
    <listitem>
      <para>the number of transfers to batteries since <application>apcupsd</application>
startup.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>XONBATT</term>
    <listitem>
      <para>time and date of last transfer to batteries, or N/A.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>TONBATT</term>
    <listitem>
      <para>time in seconds currently on batteries, or 0.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>CUMONBATT</term>
    <listitem>
      <para>total (cumulative) time on batteries in seconds since
<application>apcupsd</application> startup.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>XOFFBATT</term>
    <listitem>
      <para>time and date of last transfer from batteries, or N/A.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>SELFTEST</term>
    <listitem>
      <para>is the results of the last self test, and may have the
following values:
&#xA0;
OK - self test indicates good battery
BT - self test failed due to insufficient battery capacity
NG - self test failed due to overload
NO - No results (i.e. no self test performed in the last 5
minutes).</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>STESTI</term>
    <listitem>
      <para>is the interval in hours between automatic self tests.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>STATFLAG</term>
    <listitem>
      <para>status flag. English version is given by STATUS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>DIPSW</term>
    <listitem>
      <para>is the dip switch settings.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>REG1</term>
    <listitem>
      <para>is the value from the UPS fault register 1.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>REG2</term>
    <listitem>
      <para>is the value from the UPS fault register 2.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>REG3</term>
    <listitem>
      <para>is the value from the UPS fault register 3.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>MANDATE</term>
    <listitem>
      <para>is the date the UPS was manufactured.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>SERIALNO</term>
    <listitem>
      <para>is the UPS serial number.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>BATTDATE</term>
    <listitem>
      <para>is the date that batteries were last replaced.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>NOMOUTV</term>
    <listitem>
      <para>is the output voltage that the UPS will attempt to supply when
on battery power.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>NOMBATTV</term>
    <listitem>
      <para>is the nominal battery voltage.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>HUMIDITY</term>
    <listitem>
      <para>is the humidity as measured by the UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>AMBTEMP</term>
    <listitem>
      <para>is the ambient temperature as measured by the UPS.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>EXTBATTS</term>
    <listitem>
      <para>is the number of external batteries as defined by the user. A
correct number here helps the UPS compute the remaining runtime
more accurately.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>BADBATTS</term>
    <listitem>
      <para>is the number of bad battery packs.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>FIRMWARE</term>
    <listitem>
      <para>is the firmware revision number.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>APCMODEL</term>
    <listitem>
      <para>is the old APC model identification code.</para>

    </listitem>
  </varlistentry>
  <varlistentry>
    <term>END APC</term>
    <listitem>
      <para>is the time and date that the STATUS record was written.</para>

    </listitem>
  </varlistentry>
</variablelist>

</sect1>
<sect1><title>Logging the STATUS Information</title>

<para>If specified in the configuration file, the STATUS data will also
be written to the system log file. Please note, that it would not
normally be wise to write this data to a normal system log file as
there is no mechanism in syslog() to rewind the file and hence the
log file would quickly become enormous. However, in two cases, it
can be very useful to use syslog() to write this information.</para>

<para>The first case is to set up your
<filename>syslog.conf</filename> file so that the data is written to a
named pipe. In this case, normally not more than about 8192 bytes of
data will be kept before it is discarded by the system.</para>

<para>The second case is to setup your syslog.conf file so that the
status data is sent to another machine, which presumably then
writes it to a named pipe. Consequently, with this mechanism,
provides a simple means of networking apcupsd STATUS
information.</para>

<para>Although we mention system logging of STATUS information, we
strongly recommend that you use  <application>apcaccess</application>
or the CGI interface to get this information.</para>

</sect1>
</chapter>


<chapter><title>The Shutown Sequence and its Discontents</title>

<sect1 id='shutdown'><title>Shutdown Sequence</title>

<para>If you experienced so problems with the testing procedures, or
if you are porting <application>apcupsd</application> to another
system, or you are simply curious, you may want to know exactly what
is going on during the shutdown process.</para>

<para>The shutdown sequence is as follows:</para>

<itemizedlist>
  <listitem>
    <para><application>apcupsd</application> detects that there is a
    power problem and it calls <command>/etc/apcupsd/apccontrol
    powerout</command>, which normally sends a message to all users
    informing them of a potential problem.</para>
  </listitem>
  <listitem>
    <para>After approximately 5 seconds in the power problem mode,
    <application>apcupsd</application> calls
    <command>/etc/apcupsd/apccontrol onbattery</command>, which
    normally sends a message to all users informing them that the UPS
    is on batteries.</para>
  </listitem>
  <listitem>
     <para>When one of the conditions listed below occurs,
     <application>apcupsd</application> issues a shutdown command by
     calling <command>/etc/apcupsd/apccontrol doshutdown</command>,
     which should perform a shutdown of your system using the system
     <citerefentry><refentrytitle>shutdown</refentrytitle><manvolnum>8</manvolnum></citerefentry>
     command. You can modify the behavior by editing the
     <filename>/etc/apcupsd/apccontrol</filename> script, but doing so
     will make it more complicated to upgrade to the next
     <application>apcupsd</application> version.</para>

     <para>The conditions that trigger the shutdown can be: running time on
     batteries have expired (TIMEOUT), the battery runtime remaining is
     below the configured value (BATTERYLEVEL), the estimated remaining
     runtime is below the configured value (MINUTES), or the UPS signals
     that the batteries are exhausted.</para>

     <para>A shutdown could also be initiated if 
     <application>apcupsd</application> detects
     that the batteries are no longer functioning correctly. This case,
     though very unusual, can happen at any time even if there is proper
     mains voltage, and <command>/etc/apcupsd/apccontrol emergency</command> is
     called.</para>

     <para>Just before initiating any shutdown through the 
     <application>apccontrol</application>
     script, <application>apcupsd</application> will create the file
     <filename>/etc/apcupsd/powerfail</filename>. This file will be
     used later in the shutdown sequence to recall 
     <application>apcupsd</application> after syncing of the
     disks to initiate a power off of the UPS.</para>

     <para>If the <filename>/etc/nologin</filename> file has not
     already been created, it will normally be created during the
     shutdown sequence to prevent additional users from logging in 
     (see the NOLOGIN configuration directive).</para>

     <para>Even though <application>apcupsd</application> has
     requested the system to perform a shutdown, it continues
     running. If it is a master with slaves, it will inform the slaves
     to do a shutdown. They perform their shutdown by calling
     <command>/etc/apcupsd/apccontrol remotedown</command>.</para>
  </listitem>
  <listitem>
    <para>When the system signals <application>apcupsd</application>
    to do exit, it does so.  This is part of the normal system
    shutdown (at least on Unix and Linux systems) and the exact time
    that <application>apcupsd</application> receives the termination
    signal depends on how the shutdown links (usually in
    <filename>/etc/rc.d</filename>) are set.</para>

    <para>Note that on Windows NT systems,
    <application>apcupsd</application> apparently continues to run as a
    Service even though the machine is &quot;shutdown&quot;.</para>
  </listitem>
  <listitem>
     <para>During the shutdown of the system after
     <application>apcupsd</application> has been forced to exit, one
     of the last things done by the system shutdown is to call the
     halt script, which is usually in
     <filename>/etc/rc.d/halt</filename> or
     <filename>/etc/rc.d/init.d/halt</filename>, or possibly in
     <filename>/sbin/init.d/rc.0</filename> depending on your
     system. If apcupsd was properly installed, this standard halt
     script was modified to include a bit of new logic just before the
     final halt of the system. It first tests if the file
     <filename>/etc/apcupsd/powerfail</filename> exists, and if it
     does, it executes <command>/etc/apcupsd/apccontrol
     killpower</command>. It is this last step that will cause
     <application>apcupsd</application> to be re-executed with the
     <option>--killpower</option> option on the command line. This
     option tells <application>apcupsd</application> to inform the UPS
     to kill the power.</para>

     <para>This final step is important if you want to ensure that your
     system will automatically reboot when the power comes back on. The
     actual code used on the Red Hat version is:</para>

<programlisting>
# See if this is a powerfail situation.                             # ***apcupsd***
if [ -f /etc/apcupsd/powerfail ]; then                              # ***apcupsd***
 echo                                                               # ***apcupsd***
 echo &quot;APCUPSD will now power off the UPS&quot;                          # ***apcupsd***
 echo                                                               # ***apcupsd***
 /etc/apcupsd/apccontrol killpower                                  # ***apcupsd***
 echo                                                               # ***apcupsd***
 echo &quot;Please ensure that the UPS has powered off before rebooting&quot; # ***apcupsd***
 echo &quot;Otherwise, the UPS may cut the power during the reboot!!!&quot;   # ***apcupsd***
 echo                                                               # ***apcupsd***
fi                                                                  # ***apcupsd***
</programlisting>
    </listitem>
</itemizedlist>

<para>The above code must be inserted as late as possible in the halt
script. On many systems, such as Red Hat, all the disk drives were
unmounted, then remounted read-only, thus permitting access to the
<filename>/etc</filename> files and the
<application>apcupsd</application> executable. If your system does not
explicitly remount the disks, you must remount them in read-only mode
in the code that you add. Examples of code fragments that do this can
be found in the <filename>distributions/suse</filename> subdirectory
of the source.</para>

<para>If you are not able to insert the above code in your halt script
because there is no halt script, or because your halt script calls the
<application>init</application> program as some Unix systems do, you
can either just forget about powering off the UPS, which means that
your machine will not automatically reboot after a power failure, or
there is yet another alternative, though not at all as satisfying as
inserting code in the halt script.</para>

<para>Only if you cannot insert the appropriate code in the halt
script, when you start <application>apcupsd</application>, normally
from the <filename>/etc/rc.d/init.d/apcupsd</filename> script, use the
<option>--kill-on-powerfail</option> option. This will cause
<application>apcupsd</application> to program the UPS to shutoff the
power just before it (<application>apcupsd</application>) does the
system shutdown. Please note that this is not the most ideal solution.
Read on to understand why.</para>

<para>A very important consideration is that you must set the EEPROM
in your UPS so that it waits a sufficient time for the system to
halt before it shuts off the UPS power. The current value as well
as the permitted values for your UPS can be determined by
executing:</para>

<programlisting>
apcaccess eeprom
</programlisting>

<para>The output should look something like the following:</para>

<programlisting>
apcaccess eeprom

Valid EPROM values for the SMART-UPS 1000

                       Config        Current  Permitted
Description              Directive     Value    Values
===================================================================
Upper transfer voltage   HITRANSFER    253      253 264 271 280 
Lower transfer voltage   LOTRANSFER    196      196 188 208 204 
Return threshold         RETURNCHARGE  0        00 15 50 90 
Output voltage on batts  OUTPUTVOLTS   230      230 240 220 225 
Sensitivity              SENSITIVITY   H        H M L L 
Low battery warning      LOWBATT       2        02 05 07 10 
Shutdown grace delay     SLEEP         20       020 180 300 600 
Alarm delay              BEEPSTATE     0        0 T L N 
Wakeup delay             WAKEUP        0        000 060 180 300 
Self test interval       SELFTEST      336      336 168 ON  OFF 

</programlisting>

<para>The line of interest for you is the <emphasis
role="bold">Shutdown grace delay</emphasis>, which can be changed
using the <link linkend="SLEEP">SLEEP</link> directive in your <emphasis
role="bold">apcupsd.conf</emphasis> file. The default value is 20
seconds, but generally, you can set it to 180, 300, or 600 seconds
depending on your UPS. See the <link linkend='eeprom'>EEPROM</link> this
manual for further details on how to change this EPROM value.</para>

<para>If you use the <option>--kill-on-powerfail</option> option, you
run the risk of having the computer power cut before the system has
shutdown. Even if the grace period is rather long, if something goes
wrong in the shutdown, well, it is up to you to decide.</para>

<para>If <application>apcupsd</application> has successfully shutdown
your computer and powered off the UPS during a power outage, you can
control whether or not your computer is automatically rebooted when
the power returns.</para>

<para>The UPS contains two internal EPROM values that determine when
it will restore power to your computer after a full power shutdown.
They are the <link linkend="RETURNCHARGE">RETURNCHARGE</link>
percentage and the <link linkend="WAKEUP">WAKEUP</link>
delay. Briefly, the <emphasis role="bold">RETURNCHARGE</emphasis>
specifies what percentage charge the battery must have before the
power is restored. Higher values are recommended in regions where the
power goes up and down frequently. The <emphasis
role="bold">WAKEUP</emphasis> delay is a simple time delay. Most sites
will have both of these at zero, or perhaps the <emphasis
role="bold">RETURNCHARGE</emphasis> set to 15. Please follow the links
to the <emphasis role="bold">Configuration</emphasis> section of this
manual for more information.  See the <link linkend='eeprom'>EEPROM</link> of
this manual for further details on how to change these EPROM
values.</para>

</sect1>
<sect1><title>Shutdown Problems</title>

<para>Obviously if your halt script is not properly modified,
<application>apcupsd</application> will not be able to shut off the
power to the UPS, and if the power returns before the batteries are
exhausted your system will not automatically reboot. In any case, your
machine should have been cleanly shut down. </para>

</sect1>
<sect1><title>Master/Slave Shutdown</title>

<para>In master/slave configurations, however, the master cannot be
100 percent sure that the slaves have all shutdown before it performs
the power off. As a consequence, it is possible that the master will
shut off the power before the slave has finished shutdown. If this is
the case, the best procedure is to put an appropriate sleep command in
the <filename>/etc/apcupsd/apccontrol</filename> file on the master.
For example to give the slaves 30 additional seconds to shutdown, one
would add:</para>

<programlisting>
sleep 30
</programlisting>

<para>just after the line that reads</para>

<programlisting>
doshutdown)
</programlisting>

<para>in the <filename>apccontrol</filename> file (approximately line
79 &mdash; depending on your system version).</para>

<para>Also, on a slave machine, you do not want to use the modified
halt script since it will recall <application>apcupsd</application>,
which will detect that it is a slave (i.e. no connection to the UPS)
and will complain that it cannot do the killpower. This situation is
not harmful just annoying and possibly confusing.</para>

<para>One possible problem during shutdown can be caused by remnants
of old versions. Please be sure to delete or rename all prior versions
(<filename>/usr/local/sbin/apcupsd</filename> or
<filename>/sbin/powersc</filename>).</para>

</sect1>
<sect1><title>Startup</title>

<para>Normally, <application>apcupsd</application> is automatically
started when your system is rebooted. This normally occurs because the
startup script <application>apcupsd</application> is linked into the
appropriate places in <filename>/etc/rc.d</filename>. On most Linux
systems, there is a program called
<citerefentry><refentrytitle>chkconfig</refentrytitle><manvolnum>8</manvolnum></citerefentry>
that will automatically link the startup script.  This program is
invoked by the <command>make install</command> scripts, or it is
explicitly done for those systems that do not have
<citerefentry><refentrytitle>chkconfig</refentrytitle><manvolnum>8</manvolnum></citerefentry>. If
this is not the case, you can either link it in appropriately yourself
or explicitly call it from your rc.local file. The appropriate manual
way to startup <application>apcupsd</application> is by
executing:</para>

<programlisting>
&lt;path&gt;/apcupsd start
</programlisting>

<para>where &lt;path&gt; is normally <filename>/etc/rc.d</filename> or
<filename>/etc/rc.d/init.d</filename> depending on your system (isn't
Unix wonderful? :-)). Using this script is important so that any files
remaining around after a power failure are removed. Likewise, shutting
down <application>apcupsd</application> should be done with the same
script: </para>

<programlisting>
&lt;path&gt;/apcupsd stop
</programlisting>

</sect1>
<sect1><title>Windows Considerations</title>

<para>Please see the end of <link linkend='win32'>Windows
chapter</link> of this manual for conderations pertaining to shutdown
and killpower on Windows.&gt;</para>
</sect1>
</chapter>
<chapter id='upsbible'><title>APC's smart protocol</title>

<para>The APC UPS protocol was originally analyzed by Pavel Korensky
with additions from Andre H. Hendrick beginning in 1995, and we want
to give credit for good, hard work, where credit is due. After having
said that, you will see that Steven Freed built much of the orginal
<application>apcupsd</application> information file. [Comment inserted
by Riccardo Facchetti]</para>

<para>The start of this chapter of the
<application>apcupsd</application> manual in HTML format was pulled
from the <ulink
url="http://www.exploits.org/nut/library/apcsmart.html">Network UPS
Tools (NUT)</ulink> site. It has been an invaluable tool in improving
<application>apcupsd</application>, and I consider it the <emphasis
role="bold">Bible</emphasis> of APC UPS programming. In the course of
using it, I have added information gleaned from
<application>apcupsd</application> and information graciously supplied
by APC. Hopefully, the additions made herein can benefit the original
author and his <ulink url="http://www.exploits.org/nut">programming
project</ulink>, and maybe some day, the
<application>apcupsd</application> project and the <emphasis
role="bold">NUT</emphasis> project can join forces.</para>

<sect1><title>Description</title>

<para>Here's the information on the elusive APC smart signaling protocol
used by their higher end units (Back-UPS Pro, Smart-UPS,
Matrix-UPS, etc). What you see here has been collected from a
variety of sources. Some people analyzed the chatter between
PowerChute and their hardware. Others sent various characters to
the UPS and figured out what the results meant.</para>

</sect1>
<sect1><title>RS-232 differences</title>

<para>Normal 9 pin serial connections have TxD on 3 and RxD on 2. APC's
smart serial ports put TxD on pin 1 and RxD on pin 2. This means
you go nowhere if you use a normal straight through serial cable.
In fact, you might even power down the load if you plug one of
those cables in. This is due to the odd routing of pins - DTR and
RTS from the PC usually wind up driving the on/off line. So, when
you open the port, they go high and *poof* your computer dies.</para>

<para>Originally this evil hack was used to connect the UPS to the PC
when this page was first being built. As you can see, I cheated and
neglected the ground (only 2 wires!) and it still worked. This
method can be used for playing around, but for professional systems
this is obviously not a viable option.</para>

<para>That hack didn't work out so well (damned cats), so it was
retired quite awhile back. The most practical solution was to go
out and BUY the DOS/Win version of PowerChute just for the black
(smart) cable. I recommend doing the same thing if you actually
care about this thing working properly. Of course, if you have one
of the newer packages that came with PowerChute, you already have
the cable you need.</para>

</sect1>
<sect1><title>Diagram for cable hackers</title>

<para>If you are handy with cable creation tools, check out the <ulink
url="http://www.exploits.org/nut/library/940-0024C.jpg">940-0024C
clone diagram</ulink>. That's the black &quot;smart&quot; cable
normally provided with APC models sold after 1996. The loopback pins
on that diagram are used to keep PowerChute happy by allowing cable
detection. If you use the <ulink
url="http://www.exploits.org/nut/">NUT</ulink> apcsmart driver, those
pins don't matter.</para>

<para>Many thanks to Steve Draper for providing this scan.</para>

<para>For additional information on cables, see the section on <link
linkend="cables">custom cables</link> in this manual.</para>

</sect1>
<sect1><title>The Smart Protocol</title>

<para>Despite the lack of official information from APC, this table has
been constructed. It's standard RS-232 serial communications at
2400 bps/8N1. Don't rush the UPS while transmitting or it may stop
talking to you. This isn't a problem with the normal single
character queries, but it really does matter for multi-char things
like &quot;@000&quot;. Sprinkle a few calls to usleep() in your code and
everything will work a lot better.</para>

<para>The following table describes the single character <emphasis
role="bold">Code</emphasis> or command that you can send to the UPS,
its meaning, and what sort of response the UPS will
provide. Typically, the response shown below is followed by a newline
(\n in C) and a carriage return (\r in C). If you send the UPS a
command that it does not recognize or that is not available on your
UPS, it will normally respond by &quot;NA&quot; for not available,
otherwise the response is given in the &quot;Typical results&quot;
column. &gt;</para>

<informaltable>
  <tgroup cols="5">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <colspec colnum="3" colname="col3"/>
    <colspec colnum="4" colname="col4"/>
    <colspec colnum="5" colname="col5"/>
    <thead>
      <row>
        <entry>Code</entry>
        <entry>Meaning</entry>
        <entry>Typical results</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>^A</entry>
        <entry>Model string</entry>
        <entry>SMART-UPS 700</entry>
      </row>
      <row>
        <entry>^N</entry>
        <entry>Turn on UPS (send twice, with &gt; 1.5s delay between chars)
               Only on 3rd gen SmartUPS and Black Back-UPS Pros</entry>
        <entry>n/a</entry>
      </row>
      <row>
        <entry>^Z</entry>
        <entry>Permitted EEPROM Values</entry>
        <entry>A large string (254 chars) that gives the EEPROM permitted
               values for your model. For details see below.</entry>
      </row>
      <row>
        <entry>A</entry>
        <entry>Front panel test</entry>
        <entry>Light show + &quot;OK&quot; (and 2s beep)</entry>
      </row>
      <row>
        <entry>B</entry>
        <entry>Battery voltage</entry>
        <entry>Ranges - typical &quot;27.87&quot;</entry>
      </row>
      <row>
        <entry>C</entry>
        <entry>Internal temperature (degrees C)</entry>
        <entry>Ranges - typical &quot;036.0&quot;</entry>
      </row>
      <row>
        <entry>D</entry>
        <entry>Runtime calibration - runs until battery is below 25% (35% for
               Matrix) This updates the 'j' values - only works at 100% battery
               charge. Can be aborted with a second &quot;D&quot;</entry>
        <entry>! when on battery, $ on line</entry>
      </row>
      <row>
        <entry>E</entry>
        <entry>Automatic self test intervals</entry>
        <entry>Default = 336 (336 hours = 14 days) (336=14 days, 168=7 days,
               ON=power on, OFF=never)</entry>
      </row>
      <row>
        <entry>F</entry>
        <entry>Line frequency, Hz</entry>
        <entry>60.00 (50.0 in Europe)</entry>
      </row>
      <row>
        <entry>G</entry>
        <entry>Cause of transfer</entry>
        <entry>R = unacceptable utility voltage rate of change,
H = high utility voltage,
L = low utility voltage,
T = line voltage notch or spike,
O = no transfers yet (since turnon),
S = transfer due to serial port U command or activation of UPS test
from front panel,
NA = transfer reason still not available (read again).</entry>
      </row>
      <row>
        <entry>K--K</entry>
        <entry>Shutdown with grace period (set with 'p') - need &gt; 1.5s
between first and second K</entry>
        <entry>Matrix/3rd gen SmartUPS/Black Back-UPS Pros: &quot;OK&quot;, all others:
&quot;*&quot;</entry>
      </row>
      <row>
        <entry>L</entry>
        <entry>Input line voltage</entry>
        <entry>Ranges - typical &quot;118.3&quot; or &quot;228.8&quot; in Europe</entry>
      </row>
      <row>
        <entry>M</entry>
        <entry>Maximum line voltage received since last M query</entry>
        <entry>Ranges - typical &quot;118.9&quot; or &quot;230.1&quot; in Europe</entry>
      </row>
      <row>
        <entry>N</entry>
        <entry>Minimum line voltage received since last N query</entry>
        <entry>Ranges - typical &quot;118.9&quot; or &quot;226.2&quot; in Europe</entry>
      </row>
      <row>
        <entry>O</entry>
        <entry>Output voltage</entry>
        <entry>Ranges - typical &quot;118.3&quot; or &quot;228.8&quot; in Europe</entry>
      </row>
      <row>
        <entry>P</entry>
        <entry>Power load %</entry>
        <entry>Ranges - typical &quot;011.4&quot; depends on what you have plugged
in.</entry>
      </row>
      <row>
        <entry>Q</entry>
        <entry>Status flags</entry>
        <entry>Bitmapped, see below</entry>
      </row>
      <row>
        <entry>R</entry>
        <entry>Turn dumb
Only on 3rd gen SmartUPS, SmartUPS v/s, BackUPS Pro</entry>
        <entry>&quot;BYE&quot;</entry>
      </row>
      <row>
        <entry>S</entry>
        <entry>Soft shutdown after 'p' delay, return online when power
returns
Only works when UPS is on battery</entry>
        <entry>OK</entry>
      </row>
      <row>
        <entry>U</entry>
        <entry>Simulate power failure</entry>
        <entry>!! when switching to battery, then $ when back on line</entry>
      </row>
      <row>
        <entry>V</entry>
        <entry>Old firmware revision</entry>
        <entry>&quot;GWD&quot; or &quot;IWI&quot; The last character indicates the locale
(Domestic, International).</entry>
      </row>
      <row>
        <entry>W</entry>
        <entry>Self test (battery), results stored in &quot;X&quot;</entry>
        <entry>&quot;OK&quot;</entry>
      </row>
      <row>
        <entry>X</entry>
        <entry>Results of last self test</entry>
        <entry>&quot;OK&quot; - good battery, &quot;BT&quot; - failed due to insufficient
capacity, &quot;NG&quot; - failed due to overload, &quot;NO&quot; - no results
available (no test performed in last 5 minutes)</entry>
      </row>
      <row>
        <entry>Y</entry>
        <entry>Enter smart mode</entry>
        <entry>&quot;SM&quot;</entry>
      </row>
      <row>
        <entry>Z--Z</entry>
        <entry>Shutdown immediately (no delay) - need &gt; 1.5s between first
and second Z</entry>
        <entry>N/A</entry>
      </row>
      <row>
        <entry>a</entry>
        <entry>Show protocol version.alert messages.valid commands (delimited
by periods)</entry>
        <entry>
&quot;3.!$%+?=#|.^A^N^Z+-789&lt;@ABCDEFGKLMNOPQRSUVWXYZ'abcefgjklmnopqrsuvzy~^?&quot;
- Link-Level.alert-messages.commands</entry>
      </row>
      <row>
        <entry>b</entry>
        <entry>Firmware revision</entry>
        <entry>&quot;50.9.D&quot; - 50 = SKU (variable length), 9 = firmware revision, D
= country code (D=USA, I=International, A=Asia, J=Japan,
M=Canada)</entry>
      </row>
      <row>
        <entry>c</entry>
        <entry>UPS local id</entry>
        <entry>UPS_IDEN (you can program any 8 characters here)</entry>
      </row>
      <row>
        <entry>e</entry>
        <entry>Return threshold</entry>
        <entry>% battery charge threshold for return (00=00%, 01=15%, 02=25%,
03=90%)</entry>
      </row>
      <row>
        <entry>f</entry>
        <entry>Battery level %</entry>
        <entry>Ranges - typical &quot;100.0&quot; when fully charged as should normally
be the case</entry>
      </row>
      <row>
        <entry>g</entry>
        <entry>Nominal battery voltage (not actual voltage - see B)</entry>
        <entry>&quot;012&quot; or &quot;024&quot; or &quot;048&quot;.</entry>
      </row>
      <row>
        <entry>h</entry>
        <entry>Measure-UPS: ambient humidity (%)</entry>
        <entry>&quot;nnn.n&quot; - percentage</entry>
      </row>
      <row>
        <entry>i</entry>
        <entry>Measure-UPS: dry contacts</entry>
        <entry>10 = contact 1, 20 = 2, 40 = 3, 80 = 4</entry>
      </row>
      <row>
        <entry>j</entry>
        <entry>Estimated runtime at current load (minutes)</entry>
        <entry>&quot;0112:&quot; (note, it is terminated with a colon)</entry>
      </row>
      <row>
        <entry>k</entry>
        <entry>Alarm delay</entry>
        <entry>0(zero) = 5 second delay after fail, T = 30 second delay, L =
alarm at low battery only, N = no alarm</entry>
      </row>
      <row>
        <entry>l</entry>
        <entry>Low transfer voltage</entry>
        <entry>Default &quot;103&quot; or &quot;208&quot; in Europe</entry>
      </row>
      <row>
        <entry>m</entry>
        <entry>Manufacturing date</entry>
        <entry>Unique within groups of UPSes (production runs)</entry>
      </row>
      <row>
        <entry>n</entry>
        <entry>Serial number</entry>
        <entry>Unique for each UPS</entry>
      </row>
      <row>
        <entry>o</entry>
        <entry>Nominal Output Voltage</entry>
        <entry>The Nominal Output Voltage when running on batteries. Default
&quot;115&quot; or &quot;230&quot; in Europe.</entry>
      </row>
      <row>
        <entry>p</entry>
        <entry>Shutdown grace delay, seconds</entry>
        <entry>Default &quot;020&quot; (020/180/300/600)</entry>
      </row>
      <row>
        <entry>q</entry>
        <entry>Low battery warning, minutes</entry>
        <entry>Default &quot;02&quot;</entry>
      </row>
      <row>
        <entry>r</entry>
        <entry>Wakeup delay (time) - seconds</entry>
        <entry>Default &quot;000&quot; (000/060/180/300)</entry>
      </row>
      <row>
        <entry>s</entry>
        <entry>Sensitivity</entry>
        <entry>&quot;H&quot; - highest, &quot;M&quot; - medium, &quot;L&quot; - lowest, &quot;A&quot; - autoadjust
(Matrix only)</entry>
      </row>
      <row>
        <entry>u</entry>
        <entry>Upper transfer voltage</entry>
        <entry>Default &quot;132&quot; or &quot;253&quot; in Europe</entry>
      </row>
      <row>
        <entry>t</entry>
        <entry>Measure-UPS: ambient temperature (degrees C)</entry>
        <entry>&quot;nn.nn&quot;</entry>
      </row>
      <row>
        <entry>x</entry>
        <entry>Last battery change</entry>
        <entry>Eight characters. Varies typically dd/mm/yy - 31/12/99</entry>
      </row>
      <row>
        <entry>y</entry>
        <entry>Copyright notice</entry>
        <entry>&quot;(C) APCC&quot; - only works if firmware letter (from &quot;V&quot;) is later
than O</entry>
      </row>
      <row>
        <entry>z</entry>
        <entry>Reset the EEPROM to factory settings (but not ident or batt
replacement date)
Not on SmartUPS v/s or BackUPS Pro</entry>
        <entry>&quot;CLEAR&quot;</entry>
      </row>
      <row>
        <entry>+</entry>
        <entry>Capability cycle</entry>
        <entry>Cycle forward through possible values (&quot;|&quot; from UPS afterward
to confirm change). Do not use this unless you know how to program
your UPS EEPROM or you may damage your UPS.</entry>
      </row>
      <row>
        <entry>-</entry>
        <entry>Capability cycle</entry>
        <entry>Cycle backward through possible values (&quot;|&quot; from UPS afterward
to confirm change)Do not use this unless you know how to program
your UPS EEPROM or you may damage your UPS.</entry>
      </row>
      <row>
        <entry>@nnn</entry>
        <entry>Shutdown (after delay 'p') with delayed wakeup of nnn tenths of
an hour (after 'r' time)</entry>
        <entry>Matrix/3rd gen UPS: &quot;OK&quot;, others &quot;*&quot;</entry>
      </row>
      <row>
        <entry>0x7f (DEL key)</entry>
        <entry>Abort shutdown - use to abort @, S, K--K</entry>
        <entry>&quot;OK&quot;</entry>
      </row>
      <row>
        <entry>~</entry>
        <entry>Register #1</entry>
        <entry>See below</entry>
      </row>
      <row>
        <entry>'</entry>
        <entry>Register #2</entry>
        <entry>See below</entry>
      </row>
      <row>
        <entry>0</entry>
        <entry>Battery constant</entry>
        <entry>Set to A0 on SmartUPS 1000 with new battery</entry>
      </row>
      <row>
        <entry>4</entry>
        <entry>???</entry>
        <entry>Prints 35 on SmartUPS 1000</entry>
      </row>
      <row>
        <entry>5</entry>
        <entry>???</entry>
        <entry>Prints EF on SmartUPS 1000</entry>
      </row>
      <row>
        <entry>6</entry>
        <entry>???</entry>
        <entry>Prints F9 on SmartUPS 1000</entry>
      </row>
      <row>
        <entry>7</entry>
        <entry>Dip switch positions (if applicable)</entry>
        <entry>See below</entry>
      </row>
      <row>
        <entry>8</entry>
        <entry>Register #3</entry>
        <entry>See below</entry>
      </row>
      <row>
        <entry>9</entry>
        <entry>Line quality</entry>
        <entry>&quot;FF&quot; acceptable, &quot;00&quot; unacceptable</entry>
      </row>
      <row>
        <entry>&gt;</entry>
        <entry>Number of external battery packs attached</entry>
        <entry>SmartCell models: &quot;nnn&quot; where nnn is how many external packs
are connected
Non-SmartCell units: whatever has been set with &gt;+ and &gt;- by
the user</entry>
      </row>
      <row>
        <entry namest="col1" nameend="col3">Matrix UPS (and possibly Symmetra) specific
commands</entry>
      </row>
      <row>
        <entry>^</entry>
        <entry>Run in bypass mode</entry>
        <entry>If online, &quot;BYP&quot; is received as bypass mode starts
If already in bypass, &quot;INV&quot; is received and UPS goes online
&quot;ERR&quot; received if UPS is unable to transfer</entry>
      </row>
      <row>
        <entry>&lt;</entry>
        <entry>Number of bad battery packs</entry>
        <entry>&quot;nnn&quot; - count of bad packs connected to the UPS</entry>
      </row>
      <row>
        <entry>/</entry>
        <entry>Load current</entry>
        <entry>&quot;nn.nn&quot; - true RMS load current drawn by UPS</entry>
      </row>
      <row>
        <entry>\</entry>
        <entry>Apparent load power</entry>
        <entry>&quot;nnn.nn&quot; - output load as percentage of full rated load in
VA.</entry>
      </row>
      <row>
        <entry>^V</entry>
        <entry>Output voltage selection (editable)</entry>
        <entry>&quot;A&quot; - automatic according to input tap, &quot;M&quot; - 208 VAC, &quot;I&quot; -
240 VAC</entry>
      </row>
      <row>
        <entry>^L</entry>
        <entry>Front panel language</entry>
        <entry>&quot;E&quot; - English, &quot;F&quot; - French, &quot;G&quot; - German, &quot;S&quot; - Spanish, &quot;1&quot;
&quot;2&quot; &quot;3&quot; &quot;4&quot; - ?</entry>
      </row>
      <row>
        <entry>w</entry>
        <entry>Run time conservation</entry>
        <entry>&quot;NO&quot; (disabled) or &quot;02&quot; &quot;05&quot; &quot;08&quot; - minutes of runtime to leave
in battery (UPS shuts down &quot;early&quot;)</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>
</sect1>
<sect1><title>Dip switch info</title>
<informaltable>
  <tgroup cols="3">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <colspec colnum="3" colname="col3"/>
    <thead>
      <row>
        <entry>Bit</entry>
        <entry>Switch</entry>
        <entry>Option when bit=1</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>0</entry>
        <entry>4</entry>
        <entry>Low battery alarm changed from 2 to 5 mins. Autostartup
disabled on SU370ci and 400</entry>
      </row>
      <row>
        <entry>1</entry>
        <entry>3</entry>
        <entry>Audible alarm delayed 30 seconds</entry>
      </row>
      <row>
        <entry>2</entry>
        <entry>2</entry>
        <entry>Output transfer set to 115 VAC (from 120 VAC) or to 240 VAC
(from 230 VAC)</entry>
      </row>
      <row>
        <entry>3</entry>
        <entry>1</entry>
        <entry>UPS desensitized - input voltage range expanded</entry>
      </row>
      <row>
        <entry>4-7</entry>
        <entry>-</entry>
        <entry>Unused at this time</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>
</sect1>
<sect1><title>Status bits</title>

<para>This is probably the most important register of the UPS, which
indicates the overall UPS status. Some common things you'll see:</para>
<itemizedlist>
  <listitem>
    <para>08 = On line, battery OK</para>
  </listitem>
  <listitem>
    <para>10 = On battery, battery OK</para>
  </listitem>
  <listitem>
    <para>50 = On battery, battery low</para>
  </listitem>
  <listitem>
    <para>SM = Status bit is still not available (retry reading)</para>
  </listitem>
</itemizedlist>
<informaltable>
  <tgroup cols="3">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <colspec colnum="3" colname="col3"/>
    <thead>
      <row>
        <entry>Bit</entry>
        <entry>Hex Bit</entry>
        <entry>Meaning</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>0</entry>
        <entry>0x01</entry>
        <entry>1 = Runtime calibration occurring
Not reported by Smart UPS v/s and BackUPS Pro</entry>
      </row>
      <row>
        <entry>1</entry>
        <entry>0x02</entry>
        <entry>1 = SmartTrim
Not reported by 1st and 2nd generation SmartUPS models</entry>
      </row>
      <row>
        <entry>2</entry>
        <entry>0x04</entry>
        <entry>1 = SmartBoost</entry>
      </row>
      <row>
        <entry>3</entry>
        <entry>0x08</entry>
        <entry>1 = On line (this is the normal condition)</entry>
      </row>
      <row>
        <entry>4</entry>
        <entry>0x10</entry>
        <entry>1 = On battery</entry>
      </row>
      <row>
        <entry>5</entry>
        <entry>0x20</entry>
        <entry>1 = Overloaded output</entry>
      </row>
      <row>
        <entry>6</entry>
        <entry>0x40</entry>
        <entry>1 = Battery low</entry>
      </row>
      <row>
        <entry>7</entry>
        <entry>0x80</entry>
        <entry>1 = Replace battery</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>
</sect1>
<sect1><title>Alert messages</title>

<para>These single character messages are sent by the UPS any time there
is an Alert condition. All other responses indicated above are sent
by the UPS only in response to a query or action command.</para>
<informaltable>
  <tgroup cols="2">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <thead>
      <row>
        <entry>Character</entry>
        <entry>Description</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>!</entry>
        <entry>Line Fail - sent when the UPS goes on-battery, repeated every
30 seconds until low battery condition reached. Sometimes occurs
more than once in the first 30 seconds.</entry>
      </row>
      <row>
        <entry>$</entry>
        <entry>Return from line fail - UPS back on line power, only sent if a
! has been sent.</entry>
      </row>
      <row>
        <entry>%</entry>
        <entry>Low battery - Sent to indicate low battery, but not on SmartUPS
v/s or BackUPS Pro models</entry>
      </row>
      <row>
        <entry>+</entry>
        <entry>Return from low battery - Sent when the battery has been
recharged to some level only if a % has been sent previously</entry>
      </row>
      <row>
        <entry>?</entry>
        <entry>Abnormal condition - sent for conditions such as &quot;shutdown due
to overload&quot; or &quot;shutdown due to low battery capacity&quot;. Also occurs
within 10 minutes of turnon.</entry>
      </row>
      <row>
        <entry>=</entry>
        <entry>Return from abnormal condition - Sent when the UPS returns from
an abnormal condition where ? was sent, but not a turn-on. Not
implemented on SmartUPS v/s or BackUPS Pro models.</entry>
      </row>
      <row>
        <entry>*</entry>
        <entry>About to turn off - Sent when the UPS is about to switch off
the load. No commands are processed after this character is sent.
Not implemented on SmartUPS v/s, BackUPS Pro, or 3rd generation
SmartUPS models.</entry>
      </row>
      <row>
        <entry>#</entry>
        <entry>Replace battery - Sent when the UPS detects that the battery
needs to be replaced. Sent every 5 hours until a new battery test
is run or the UPS is shut off. Not implemented on SmartUPS v/s or
BackUPS Pro models.</entry>
      </row>
      <row>
        <entry>&amp;</entry>
        <entry>Check alarm register for fault (Measure-UPS) - sent to signal
that temp or humidity out of set limits. Also sent when one of the
contact closures changes states. Sent every 2 minutes, stops when
the alarm conditions are reset. Only sent for alarms enabled with
I. Cause of alarm may be determined with J. Not on SmartUPS v/s or
BackUPS Pro.</entry>
      </row>
      <row>
        <entry>|</entry>
        <entry>Variable change in EEPROM - Sent whenever any EEPROM variable
is changed. Only supported on Matrix UPS and 3rd generation
SmartUPS models.</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>
</sect1>
<sect1><title>Register 1</title>

<para>All bits are valid on the Matrix UPS. SmartUPS models only support
bits 6 and 7. Other models do not respond.</para>
<informaltable>
  <tgroup cols="3">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <colspec colnum="3" colname="col3"/>
    <thead>
      <row>
        <entry>Bit</entry>
        <entry>Hex Bit</entry>
        <entry>Meaning</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>0</entry>
        <entry>0x01</entry>
        <entry>In wakeup mode (typically lasts &lt; 2s)</entry>
      </row>
      <row>
        <entry>1</entry>
        <entry>0x02</entry>
        <entry>In bypass mode due to internal fault - see register 2 or 3</entry>
      </row>
      <row>
        <entry>2</entry>
        <entry>0x04</entry>
        <entry>Going to bypass mode due to command</entry>
      </row>
      <row>
        <entry>3</entry>
        <entry>0x08</entry>
        <entry>In bypass mode due to command</entry>
      </row>
      <row>
        <entry>4</entry>
        <entry>0x10</entry>
        <entry>Returning from bypass mode</entry>
      </row>
      <row>
        <entry>5</entry>
        <entry>0x20</entry>
        <entry>In bypass mode due to manual bypass control</entry>
      </row>
      <row>
        <entry>6</entry>
        <entry>0x40</entry>
        <entry>Ready to power load on user command</entry>
      </row>
      <row>
        <entry>7</entry>
        <entry>0x80</entry>
        <entry>Ready to power load on user command or return of line
power</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>
</sect1>
<sect1><title>Register 2</title>

<para>Matrix UPS models report bits 0-5. SmartUPS models only support
bits 4 and 6. SmartUPS v/s and BackUPS Pro report bits 4, 6, 7.
Unused bits are set to 0. Other models do not respond.</para>
<informaltable>
  <tgroup cols="2">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <thead>
      <row>
        <entry>Bit</entry>
        <entry>Meaning</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>0</entry>
        <entry>Fan failure in electronics, UPS in bypass</entry>
      </row>
      <row>
        <entry>1</entry>
        <entry>Fan failure in isolation unit</entry>
      </row>
      <row>
        <entry>2</entry>
        <entry>Bypass supply failure</entry>
      </row>
      <row>
        <entry>3</entry>
        <entry>Output voltage select failure, UPS in bypass</entry>
      </row>
      <row>
        <entry>4</entry>
        <entry>DC imbalance, UPS in bypass</entry>
      </row>
      <row>
        <entry>5</entry>
        <entry>Command sent to stop bypass with no battery connected - UPS
still in bypass</entry>
      </row>
      <row>
        <entry>6</entry>
        <entry>Relay fault in SmartTrim or SmartBoost</entry>
      </row>
      <row>
        <entry>7</entry>
        <entry>Bad output voltage</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>
</sect1>
<sect1><title>Register 3</title>

<para>All bits are valid on the Matrix UPS and 3rd generation SmartUPS
models. SmartUPS v/s and BackUPS Pro models report bits 0-5. All
others report 0-4. State change of bits 1,2,5,6,7 are reported
asynchronously with ? and = messages.</para>
<informaltable>
  <tgroup cols="2">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <thead>
      <row>
        <entry>Bit</entry>
        <entry>Meaning</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>0</entry>
        <entry>Output unpowered due to shutdown by low battery</entry>
      </row>
      <row>
        <entry>1</entry>
        <entry>Unable to transfer to battery due to overload</entry>
      </row>
      <row>
        <entry>2</entry>
        <entry>Main relay malfunction - UPS turned off</entry>
      </row>
      <row>
        <entry>3</entry>
        <entry>In sleep mode from @ (maybe others)</entry>
      </row>
      <row>
        <entry>4</entry>
        <entry>In shutdown mode from S</entry>
      </row>
      <row>
        <entry>5</entry>
        <entry>Battery charger failure</entry>
      </row>
      <row>
        <entry>6</entry>
        <entry>Bypass relay malfunction</entry>
      </row>
      <row>
        <entry>7</entry>
        <entry>Normal operating temperature exceeded</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>

</sect1>
<sect1><title>Interpretation of the Old Firmware Revision</title>

<para>The Old Firmware Revision is obtained with the &quot;V&quot;
command, which gives a typical response such as &quot;GWD&quot; or
&quot;IWI&quot;, and can be interpreted as follows:</para>

<programlisting>
Old Firmware revision and model ID String for SmartUPS &amp; MatrixUPS

This is a three character string XYZ

   where X == Smart-UPS or Matrix-UPS ID Code.
     range 0-9 and A-P
       1 == unknown
       0 == Matrix 3000
       5 == Matrix 5000
     the rest are Smart-UPS and Smart-UPS-XL
       2 == 250       3 == 400       4 == 400
       6 == 600       7 == 900       8 == 1250
       9 == 2000      A == 1400      B == 1000
       C == 650       D == 420       E == 280
       F == 450       G == 700       H == 700XL
       I == 1000      J == 1000XL    K == 1400
       L == 1400XL    M == 2200      N == 2200XL
       O == 3000      P == 5000

   where Y == Possible Level of Smart Features, unknown???
       G == Stand Alone
       T == Stand Alone
               V == ???
       W == Rack Mount

   where Z == National Model Use Only Codes
       D == Domestic        115 Volts
       I == International   230 Volts
       A == Asia ??         100 Volts
       J == Japan ??        100 Volts
</programlisting>
</sect1>
<sect1><title>Interpretation of the New Firmware Revision</title>
<programlisting>
New Firmware revison and model ID String in NN.M.L is the format

    where NN == UPS ID Code.
        12 == Back-UPS Pro 650
        13 == Back-UPS Pro 1000
        52 == Smart-UPS 700
        60 == SmartUPS 1000
        72 == Smart-UPS 1400

        where NN now Nn has possible meanings.
            N  == Class of UPS
            1n == Back-UPS Pro
            5n == Smart-UPS
            7n == Smart-UPS NET

             n == Level of intelligence
            N1 == Simple Signal, if detectable WAG(*)
            N2 == Full Set of Smart Signals
            N3 == Micro Subset of Smart Signals

    where M == Possible Level of Smart Features, unknown???
        1 == Stand Alone
        8 == Rack Mount
        9 == Rack Mount

    where L == National Model Use Only Codes
        D == Domestic        115 Volts
        I == International   230 Volts
        A == Asia ??         100 Volts
        J == Japan ??        100 Volts
        M == North America   208 Volts (Servers)
</programlisting>

</sect1>
<sect1><title>EEPROM Values</title>

<para>Upon sending a ^Z, your UPS will probably spit back approximately
254 characters something like the following (truncated here for the
example):</para>

<para>#uD43132135138129uM43229234239224uA43110112114108 ....</para>

<para>It looks bizarre and ugly, but is easily parsed. The # is some
kind of marker/ident character. Skip it. The rest fits this
form:</para>

<itemizedlist>
  <listitem>
    <para>Command character - use this to select the value</para>
  </listitem>
  <listitem>
    <para>Locale - use 'b' to find out what yours is (the last
          character), '4' applies to all</para>
  </listitem>
  <listitem>
    <para>Number of choices - '4' means there are 4 possibilities
    coming up</para>
  </listitem>
  <listitem>
    <para>Choice length - '3' means they are all 3 chars long</para>
  </listitem>
</itemizedlist>

<para>Matrix-UPS models have ## between each grouping for some
reason.</para>

<para>Here is an example broken out to be more readable:</para>
<programlisting>
 CMD DFO RSP FSZ FVL
 u   D   4   3   127 130 133 136
 u   M   4   3   229 234 239 224
 u   A   4   3   108 110 112 114
 u   I   4   3   253 257 261 265
 l   D   4   3   106 103 100 097
 l   M   4   3   177 172 168 182
 l   A   4   3   092 090 088 086
 l   I   4   3   208 204 200 196
 e   4   4   2   00   15  50  90
 o   D   1   3   115
 o   J   1   3   100
 o   I   1   3   230 240 220 225
 o   M   1   3   208
 s   4   4   1     H   M   L   L
 q   4   4   2    02  05  07  10
 p   4   4   3   020 180 300 600
 k   4   4   1     0   T   L   N
 r   4   4   3   000 060 180 300
 E   4   4   3   336 168  ON OFF

 CMD == UPSlink Command.
       u = upper transfer voltage
       l = lower transfer voltage
       e = return threshold
       o = output voltage
       s = sensitivity
       p = shutdown grace delay
       q = low battery warning
       k = alarm delay
       r = wakeup delay
       E = self test interval

 DFO == (4)-all-countries (D)omestic (I)nternational (A)sia (J)apan
        (M) North America - servers.
 RSP == Total number possible answers returned by a given CMD.
 FSZ == Max. number of field positions to be filled.
 FVL == Values that are returned and legal.

</programlisting>

</sect1>
<sect1><title>Programming the UPS EEPROM</title>

<para>There are at this time a maximum of 12 different values that can be
programmed into the UPS EEPROM. They are:</para>

<informaltable>
  <tgroup cols="3">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <colspec colnum="3" colname="col3"/>
    <thead>
      <row>
        <entry>Item</entry>
        <entry>Command</entry>
        <entry>Meaning</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>1.</entry>
        <entry>c</entry>
        <entry>The UPS Id or name</entry>
      </row>
      <row>
        <entry>2.</entry>
        <entry>x</entry>
        <entry>The last date the batteries were replaced</entry>
      </row>
      <row>
        <entry>3.</entry>
        <entry>u</entry>
        <entry>The Upper Transfer Voltage</entry>
      </row>
      <row>
        <entry>4.</entry>
        <entry>l</entry>
        <entry>The Lower Transfer Voltage</entry>
      </row>
      <row>
        <entry>5.</entry>
        <entry>e</entry>
        <entry>The Return Battery Charge Percentage</entry>
      </row>
      <row>
        <entry>6.</entry>
        <entry>o</entry>
        <entry>The Output Voltage when on Batteries</entry>
      </row>
      <row>
        <entry>7.</entry>
        <entry>s</entry>
        <entry>The Sensitivity to Line Quality</entry>
      </row>
      <row>
        <entry>8.</entry>
        <entry>p</entry>
        <entry>The Shutdown Grace Delay</entry>
      </row>
      <row>
        <entry>9.</entry>
        <entry>q</entry>
        <entry>The Low Battery Warning Delay</entry>
      </row>
      <row>
        <entry>10.</entry>
        <entry>k</entry>
        <entry>The Alarm Delay</entry>
      </row>
      <row>
        <entry>11.</entry>
        <entry>r</entry>
        <entry>The Wakeup Delay</entry>
      </row>
      <row>
        <entry>12.</entry>
        <entry>E</entry>
        <entry>The Automatic Self Test Interval</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>

<para>The first two cases (Ident and Batt date) are somewhat special
in that you tell the UPS you want to change the value, then you
supply 8 characters that are saved in the EEPROM. The last ten item
are programmed by telling the UPS that you want it to cycle to the
next permitted value.</para>

<para>In each case, you indicate to the UPS that you want to change
the EEPROM by first sending the appropriate query command (e.g. &quot;c&quot;
for the UPS ID or &quot;u&quot; for the Upper Transfer voltage. This command
is then immediately followed by the cycle EEPROM command or &quot;-&quot;. In
the case of the UPS Id or the battery date, you follow the cycle
command by the eight characters that you want to put in the EEPROM.
In the case of the other ten items, there is nothing more to
enter.</para>

<para>The UPS will respond by &quot;OK&quot; and approximately 5 seconds later
by a vertical bar (|) to indicate that the EEPROM was changed.</para>

</sect1>
<sect1><title>Acknowledgements</title>

<para>The apcupsd has a rather long and tormented history. Many thanks to
the guys that, with time, contributed to the general public
knowledge.</para>

<para>Pavel Korensky &lt;pavelk at dator3.anet.cz&gt;,
Andre M. Hedrick &lt;hedrick at suse.de&gt;,
Christopher J. Reimer &lt;reimer at doe.carleton.ca&gt;,
Kevin D. Smolkowski &lt;kevins at trigger.oslc.org&gt;,
Werner Panocha &lt;wpanocha at t-online.de&gt;,
Steven Freed, <ulink url="http://www.exploits.org/~rkroll/contact.html">Russell
Kroll</ulink>.</para>

<para>additions by:
<ulink url="http://www.apcupsd.com">Kern Sibbald
&lt;apcupsd-users at lists.sourceforge.net&gt;</ulink></para>
</sect1>
</chapter>
</part>

<appendix><title>Credits</title>
<mediaobject>
  <imageobject>
    <imagedata fileref="thanks.png" depth="86" width="369"/>
  </imageobject>
</mediaobject>

<para>The success of <application>apcupsd</application> is due to the many
people that helped in development, testing and in many other
ways.</para>

<para>Thank all the developers that worked hard to make
APCUPSD&#xA0;one of the best piece of software for
UPS&#xA0;management.</para>

<sect1><title>Contributors</title>

<variablelist>
<varlistentry>
<term>Project Starter and Former Code Maintainer:</term>
<listitem>
    <para>Andre Hedrick (andre at linux-ide.org)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Current Code Maintainer and Project Manager:</term>
<listitem>
    <para>Riccardo Facchetti (riccardo at master.oasi.gpa.it)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Serial Communications:</term>
<listitem>
    <para>Andre Hedrick (andre at linux-ide.org)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>2.0 User's Manual:</term>
<listitem>
    <para>Eric S. Raymond (esr at thyrsus.com)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Alpha Port:</term>
<listitem>
    <para>Kern Sibbald (kern at sibbald dot com)</para>
    <para>Jo&#xE3;o Rochate (jrochate at ualg.pt) testing and machine
    loan</para>
</listitem>
</varlistentry>
<varlistentry> 
<term>Caldera:</term>
<listitem>
    <para>John Pinner (john at clocksoft.com)</para>
</listitem>
</varlistentry>
<varlistentry> 
<term>HP-UX Port</term>
<listitem>
    <para>Carl Erhorn (Carl_Erhorn at hyperion.com)</para>
    <para>Robert K Nelson (rnelson at airflowsciences.com)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>SOLARIS Port:</term>
<listitem>
    <para>Carl Erhorn (Carl_Erhorn at hyperion.com)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>OpenBSD Port:</term>
<listitem>
    <para>Devin Reade (gdr at gno.org)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>NetBSD Port:</term>
<listitem>
    <para>Neil Darlow (neil at darlow.co.uk)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Win32 Port:</term>
<listitem>
    <para>Kern Sibbald (kern at sibbald dot com)</para>
    <para>Paul Z. Stagner (paul.stagner at charterco.com) testing</para>
</listitem>
</varlistentry>
<varlistentry>
<term>WEB Interfaces:</term>
<listitem>
    <para>Kern Sibbald (kern at sibbald dot com)</para>
    <para>Joseph Acosta (joeja at mindspring.com)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Apcupsd Support and Knowledge Base:</term>
<listitem>
    <para>Brian Schau (Brian.Schau at compaq.com)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Hard Core Coders:</term>
<listitem>
    <para>Riccardo Facchetti (riccardo at master.oasi.gpa.it)</para>
    <para>Kern Sibbald (kern at sibbald dot com)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Part Time Coders:</term>
<listitem>
    <para>Jonathan H N Chin (jc254 at newton.cam.ac.uk)</para>
    <para>Andre Hedrick (andre at linux-ide.org)</para>
    <para>Brian Schau (Brian.Schau at compaq.com)</para>
    <para>Carl Erhorn (Carl_Erhorn at hyperion.com)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Distribution Maintainers:</term>
<listitem>
    <para>Alpha: Kern Sibbald (kern at sibbald dot com) temp</para>
    <para>Debian: Leon Breedt (ljb at debian.org)</para>
    <para>FreeBSD/BSDi: Jeff Palmer (scorpio at drkshdw.org)</para>
    <para>NetBSD: Neil Darlow (neil at darlow.co.uk)</para>
    <para>HP-UX: Carl Erhorn (Carl_Erhorn at hyperion.com),
          Robert K Nelson (rnelson at airflowsciences.com)</para>
    <para>OpenBSD: Devin Reade (gdr at gno.org)</para>
    <para>RedHat: Kern Sibbald (kern at sibbald dot com)</para>
    <para>Slackware: Devin Reade (gdr at gno.org)</para>
    <para>Sparc Solaris: Carl Erhorn (Carl_Erhorn at hyperion.com)</para>
    <para>SuSE: Riccardo Facchetti (riccardo at master.oasi.gpa.it)</para>
    <para>Win32: Kern Sibbald (kern at sibbald dot com)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Project Discussions:</term>
<listitem>
    <para><ulink url="wb_mailto:apcupsd-users@lists.sourceforge.net">APCUPSD
    Mailing List</ulink></para>
</listitem>
</varlistentry>
</variablelist>

<para>Thanks to American Power Conversion (APC) who helped in giving
technical information on their UPSes.</para>

<para>A special thanks to APC who gave me (Riccardo) a Smart
UPS&#xA0;1400 INET when my old Back UPS v/s 650's battery died.  Thank
you guys, your help has been invaluable.</para>

<para>Thanks to all the users that send bug reports and
suggestions:&#xA0;we need your help.</para>

<para>Thanks to every one I&#xA0;forgot here. If you feel I&#xA0;have
forgot your name, please don't hesitate to tell me.</para>

<para>Miquel van Smoorenburg, The Doctor What, Pavel Korensky,
and Russell Kroll &lt;rkroll at exploits.org&gt; for the CGI
programs.
Jonathan Benson &lt;jbenson at technologist.com&gt; for adapting
the upsstatus.cgi program to work with <application>apcupsd</application>
</para>
 
<para>The gd 1.2 Image Library used in our CGI programs is copyright
1994, 1995, Quest Protein Database Center, Cold Spring Harbor Labs.
Permission granted to copy and distribute this work provided that
this notice remains intact. Credit for the library must be given to
the Quest Protein Database Center, Cold Spring Harbor Labs, in all
derived works. This does not affect your ownership of the derived
work itself, and the intent is to assure proper credit for Quest,
not to interfere with your use of gd.</para>

<para>gd 1.2 was written by Thomas Boutell and is currently
distributed by boutell.com, Inc.</para>

<para>Parts of the VNC project by ATT (cool code) were used as
templates for our Win32 code, see: <ulink
url="http://www.uk.research.att.com/vnc">http://www.uk.research.att.com/vnc</ulink></para>

</sect1>
<sect1><title>Disclaimer: NO WARRANTY</title>

<para>BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS
AND/OR OTHER PARTIES PROVIDE THE PROGRAM &quot;AS IS&quot; WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND
PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE
DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR
OR CORRECTION.</para>

  <para>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY
OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</para>

</sect1>
</appendix>


</book>
