%!PS-Adobe-3.0 EPSF-3.0
%%Creator: (ImageMagick)
%%Title: (hires/onbatt.eps)
%%CreationDate: (Tue Mar 22 07:59:26 2005)
%%BoundingBox: 0 0 10 10
%%HiResBoundingBox: 0 0 10.2857 10
%%DocumentData: Clean7Bit
%%LanguageLevel: 1
%%Pages: 1
%%EndComments

%%BeginDefaults
%%EndDefaults

%%BeginProlog
%
% Display a color image.  The image is displayed in color on
% Postscript viewers or printers that support color, otherwise
% it is displayed as grayscale.
%
/DirectClassPacket
{
  %
  % Get a DirectClass packet.
  %
  % Parameters:
  %   red.
  %   green.
  %   blue.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  compression 0 eq
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/DirectClassImage
{
  %
  % Display a DirectClass image.
  %
  systemdict /colorimage known
  {
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { DirectClassPacket } false 3 colorimage
  }
  {
    %
    % No colorimage operator;  convert to grayscale.
    %
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { GrayDirectClassPacket } image
  } ifelse
} bind def

/GrayDirectClassPacket
{
  %
  % Get a DirectClass packet;  convert to grayscale.
  %
  % Parameters:
  %   red
  %   green
  %   blue
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 eq
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/GrayPseudoClassPacket
{
  %
  % Get a PseudoClass packet;  convert to grayscale.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 eq
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassPacket
{
  %
  % Get a PseudoClass packet.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  compression 0 eq
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassImage
{
  %
  % Display a PseudoClass image.
  %
  % Parameters:
  %   class: 0-PseudoClass or 1-Grayscale.
  %
  currentfile buffer readline pop
  token pop /class exch def pop
  class 0 gt
  {
    currentfile buffer readline pop
    token pop /depth exch def pop
    /grays columns 8 add depth sub depth mul 8 idiv string def
    columns rows depth
    [
      columns 0 0
      rows neg 0 rows
    ]
    { currentfile grays readhexstring pop } image
  }
  {
    %
    % Parameters:
    %   colors: number of colors in the colormap.
    %   colormap: red, green, blue color packets.
    %
    currentfile buffer readline pop
    token pop /colors exch def pop
    /colors colors 3 mul def
    /colormap colors string def
    currentfile colormap readhexstring pop pop
    systemdict /colorimage known
    {
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { PseudoClassPacket } false 3 colorimage
    }
    {
      %
      % No colorimage operator;  convert to grayscale.
      %
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { GrayPseudoClassPacket } image
    } ifelse
  } ifelse
} bind def

/DisplayImage
{
  %
  % Display a DirectClass or PseudoClass image.
  %
  % Parameters:
  %   x & y translation.
  %   x & y scale.
  %   label pointsize.
  %   image label.
  %   image columns & rows.
  %   class: 0-DirectClass or 1-PseudoClass.
  %   compression: 0-none or 1-RunlengthEncoded.
  %   hex color packets.
  %
  gsave
  /buffer 512 string def
  /byte 1 string def
  /color_packet 3 string def
  /pixels 768 string def

  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  x y translate
  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  currentfile buffer readline pop
  token pop /pointsize exch def pop
  /Times-Roman findfont pointsize scalefont setfont
  x y scale
  currentfile buffer readline pop
  token pop /columns exch def
  token pop /rows exch def pop
  currentfile buffer readline pop
  token pop /class exch def pop
  currentfile buffer readline pop
  token pop /compression exch def pop
  class 0 gt { PseudoClassImage } { DirectClassImage } ifelse
  grestore
} bind def
%%EndProlog
%%Page:  1 1
%%PageBoundingBox: 0 0 10 10
userdict begin
DisplayImage
0 0
10.2857 10.2857
12.000000
20 20
0
0
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8D8DA7C7C8176767F72727BBABABF
FFFFFFFFFFFFFFFFFFFFFFFFBDBDBF75757B76767F787881D7D7DAFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFDFDFE086867E2323023D3D003F3F00797958CDCDCFFEFEFEFEFEFECFCFCF
65655823230041410043430291917EDEDEE0FFFFFFFFFFFFFFFFFFFFFFFF7C7C811D1D00
8B8B00EEEE00FFFF0077770044444CFCFCFCFCFCFC48484C333300A6A600FBFB00F9F900
434300787881FFFFFFFFFFFFFEFEFEFFFFFF79797D1A1A008B8B00EEEE00FFFF00757500
414148F8F8F8F8F8F8454548323200A6A600FBFB00F9F90041410074747DFFFFFFFEFEFE
FCFCFC8282821D1D1E0606002323003F3F004646001F1F00111113434343434343121213
0C0C002A2A004343004343001111001C1C1E828282FCFCFCFBFBFB4A4A4A272727616162
5B5B5F5757605B5B646060655F5F5E5757575757575D5D5D5E5E605A5A60575760575760
6060622727274A4A4AFBFBFBFBFBFB4747475A5A5ACBCBCBC5C5C5C5C5C59D9D9D9E9E9E
B9B9B9C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5CBCBCB5A5A5A474747FBFBFB
FBFBFB474747575757C5C5C5C1C1C1BEBEBE353535393939979797BFBFBFC0C0C0C0C0C0
C0C0C0C0C0C0C0C0C0C0C0C0C5C5C5575757474747FBFBFBFBFBFB474747575757C5C5C5
BEBEBEBABABA333333363636949494BCBCBCBFBFBFBEBEBEBDBDBDBDBDBDBDBDBDBDBDBD
C5C5C5575757474747FBFBFBFBFBFB4747475C5C5C9C9C9C3333333030300D0D0D0E0E0E
242424424242ADADAD5F5F5F2E2E2E3333333333333535359D9D9D5C5C5C474747FBFBFB
FBFBFB4747475A5A5AA8A8A85A5A5A575757181818191919434343656565B2B2B2606060
3232323737373636363838389E9E9E5B5B5B474747FBFBFBFBFBFB474747565656C7C7C7
C6C6C6C3C3C33535353838389A9A9AC4C4C4C0C0C0A2A2A2949494969696969696969696
B9B9B9585858474747FBFBFBFBFBFB474747575757C6C6C6C1C1C1BEBEBE444444474747
9B9B9BBFBFBFC0C0C0BFBFBFBFBFBFBFBFBFBFBFBFBFBFBFC6C6C6575757474747FBFBFB
FBFBFB474747555555C3C3C3BDBDBDBDBDBDADADADADADADB8B8B8BDBDBDBDBDBDBDBDBD
BDBDBDBDBDBDBDBDBDBDBDBDC3C3C3555555474747FBFBFBFBFBFB4B4B4B0F0F0F313131
2F2F2F3030303232323232323030302F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F
3131310F0F0F4B4B4BFBFBFBFDFDFDA6A6A6777777787878787878787878787878787878
787878787878787878787878787878787878787878787878787878777777A6A6A6FDFDFD
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF
end
%%PageTrailer
%%Trailer
%%EOF
