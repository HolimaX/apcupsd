<
  Rename "Checking Out Your USB Subsystem" to "Checking Out Your USB Subsystem
  (Linux)" and add the text below to a new section entitled "Checking Out Your
  USB Subsystem (BSD)"
>

KNOWN ISSUES

The BSD USB driver for apcupsd is BETA software and has some known issues.

- FreeBSD lockups: Some users have experienced lockups (apcupsd stops
  responding) on FreeBSD systems. In at least one case this problem was worked
  around by disabling pthreads (--disable-pthreads flag to configure). The 
  problem seems to be caused by a FreeBSD kernel bug.
  
- FreeBSD kernel panics if USB cable is unplugged while apcupsd is running. 
  This is another kernel bug and is most easily worked around by not hot-
  unplugging the UPS while apcupsd is running.


PLATFORMS & VERSIONS

The new (beta) FreeBSD USB driver supports FreeBSD, OpenBSD and NetBSD. (Thanks
go to the *BSD developers who kept a nearly identical interface across all
three platforms.)

The driver has been tested with the following platform versions:

FreeBSD-5.3	(Primary development platform)
FreeBSD-4.11
NetBSD-2.0
NetBSD-1.6.2
OpenBSD-3.6

FreeBSD-5.3 has had the most testing since it is the primary platform on which
the driver is developed. The other platforms and versions have had somewhat 
less testing. The only architecture tested so far (on any platform) is i386, 
althought there is no reason to think it will not work on other archs. If you
run the driver on a new platform version or architecture, please report your
experience to the apcupsd-users mailing list.


KERNEL CONFIGURATION

You will need to rebuild your kernel in order to disable the uhid driver. uhid
is not sufficient for apcupsd at this time and we need to prevent it from
grabbing the UPS device. You should disable the following devices in your
kernel config file (comment them out):

FreeBSD (you WILL NOT lose use of USB keyboard and mouse):
    uhid

NetBSD (you WILL lose use of USB keyboard and mouse):
    uhidev, ums, wsmouse, ukbd, wskbd, uhid

OpenBSD (you WILL lose use of USB keyboard and mouse):
    uhidev, ums, wsmouse, ukbd, wskbd, uhid

For detailed information on rebuilding your kernel, consult these references:

FreeBSD:
http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/kernelconfig.html

NetBSD:
http://www.netbsd.org/guide/en/chap-kernel.html

OpenBSD:
http://www.openbsd.org/faq/faq5.html#Building


CHECKING UPS IS RECOGNIZED BY THE KERNEL

After building a properly configured kernel, reboot into that kernel and plug in
your UPS USB cable. You should see a dmesg log message like the following:

ugen0: American Power Conversion Back-UPS RS 1500 FW:8.g6 .D USB FW:g6, rev 1.10/1.06, addr 2

Note that the "ugen" driver is called out. If you see "uhid" instead, it 
probably means you did not properly disable the uhid driver when you compiled 
your kernel or perhaps you're not running the new kernel.

You can also check with 'usbdevs -d' to get a list of USB devices recognized by
the system as well as the drivers they are associated with. For example:

# usbdevs -d
addr 1: UHCI root hub, VIA
  uhub0
 addr 2: Back-UPS RS 1500 FW:8.g6 .D USB FW:g6, American Power Conversion
   ugen0


MAKING DEVICE NODES

Apcupsd communicates with the UPS through the USB generic device, ugen.
You may or may not need to manually make ugen device nodes in /dev, depending
on what OS you are using.

FreeBSD: No manual intervention needed. FreeBSD automatically creates the ugen
nodes on demand.

NetBSD: By default, NetBSD only creates nodes for the first ugen device, ugen0.
Check 'usbdevs -d' to see which device your UPS was bound to and then create
the appropriate nodes by running 'cd /dev ; ./MAKEDEV ugenN', where ugenN is
the ugen device name shown by usbdevs. It is probably a good idea to create
several sets of ugen nodes in case you add more USB devices.

OpenBSD: Similar to NetBSD, OpenBSD creates nodes for ugen0 and ugen1. Check
'usbdevs -d' to see which device your UPS was bound to and then create the
appropriate nodes by running 'cd /dev ; ./MAKEDEV ugenN', where ugenN is the
ugen device name shown by usbdevs. It is probably a good idea to create several
sets of ugen nodes in case you add more USB devices.


APCUPSD CONFIGURATION

Apcupsd must be built with USB support, which is accomplished via the
--enable-usb switch to configure.

Your apcupsd.conf file needs the following hardware-related settings:

UPSCABLE usb
UPSTYPE usb
DEVICE

The DEVICE setting is blank on purpose; apcupsd will automatically locate your
UPS.

The  delay-, timeout-, and NIS-related settings should be configured as per
your usual preference.
