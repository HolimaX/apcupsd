<?xml version="1.0" encoding="US-ASCII"?><!DOCTYPE texinfo PUBLIC "-//GNU//DTD TexinfoML V4.7//EN" "http://www.gnu.org/software/texinfo/dtd/4.7/texinfo.dtd">
<texinfo xml:lang="en">
  <setfilename>manual.xml</setfilename>
  <settitle>apcupsd User's Manual</settitle>
<!-- %***end of header -->
  <setvalue name="VERSION">3.10.17</setvalue>
  <setvalue name="UPDATED">14 March 2005</setvalue></para>

  <unnumbered>
    <title></title>
    <sp lines="2"></sp>
    <center>
      <image width="" height="" name="apcupsd" extension=""><alttext></alttext></image>
    </center>
    <sp lines="2"></sp>
    <center>
      <titlefont>Apcupsd User's Manual</titlefont>
    </center>
    <sp lines="2"></sp>
    <center>
      <para>Apcupsd Version 3.10.17</para>
    </center>
    <center>
      <para>A UPS Control Program</para>
    </center>
    <sp lines="2"></sp>
    <center>
      <para>Kern Sibbald</para>
    </center>
    <sp lines="2"></sp>
    <para>Apcupsd is a UPS control system that permits orderly shutdown of your computer in the event of a power failure.</para>
    <sp lines="2"></sp>
    <para>This document was last updated 14 March 2005</para>
    <para>Copyright &copyright; 1999-2005 Kern Sibbald</para>
    <quotation>
      <para>Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the name Apcupsd, the copyright notice, and this notice are preserved.</para>
    </quotation>
    <para>Apcupsd source code is released under the GNU General Public License version 2. Please see the file COPYING in the main source directory.</para>
    <para>For more information on the project, please visit the main web site at <uref><urefurl>http://www.apcupsd.com</urefurl><urefdesc>http://www.apcupsd.com</urefdesc></uref>.</para>
    <titlepage>
    </titlepage>
    <contents></contents>
    <node>
      <nodename>Top</nodename>
      <nodenext>Release Notes</nodenext>
    </unnumbered>

    <unnumbered>
      <title>Apcupsd User's Manual</title>
      <menu>
        <menuentry>
          <menunode>Release Notes</menunode>
          <menutitle>Release Notes</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>How To Use This Manual</menunode>
          <menutitle>How To Use This Manual</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Basic User's Guide</menunode>
          <menutitle>Basic User's Guide</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Planning Your Installation</menunode>
          <menutitle>Planning Your Installation</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Building and Installing apcupsd</menunode>
          <menutitle>Building and Installing apcupsd</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>After Installation</menunode>
          <menutitle>After Installation</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Configuration Examples</menunode>
          <menutitle>Configuration Examples</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Testing Apcupsd</menunode>
          <menutitle>Testing Apcupsd</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Troubleshooting Your Installation</menunode>
          <menutitle>Troubleshooting Your Installation</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Monitoring and Tuning your UPS</menunode>
          <menutitle>Monitoring and Tuning your UPS</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Maintaining Your UPS</menunode>
          <menutitle>Maintaining Your UPS</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Frequently-Asked Questions</menunode>
          <menutitle>Frequently-Asked Questions</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Apcupsd Bugs</menunode>
          <menutitle>Apcupsd Bugs</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Advanced topics</menunode>
          <menutitle>Advanced topics</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Customizing Event Handling</menunode>
          <menutitle>Customizing Event Handling</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Master/Slave Configurations</menunode>
          <menutitle>Master/Slave Configurations</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Controlling Multiple UPSes on one Machine</menunode>
          <menutitle>Controlling Multiple UPSes on one Machine</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Support for SNMP UPSes</menunode>
          <menutitle>Support for SNMP UPSes</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Alternate Ways To Run The Network Information Server</menunode>
          <menutitle>Alternate Ways To Run The Network Information Server</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>apcupsd System Logging</menunode>
          <menutitle>apcupsd System Logging</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Installation on Windows</menunode>
          <menutitle>Installation on Windows</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>The Windows Version of apcupsd</menunode>
          <menutitle>The Windows Version of apcupsd</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Installation on Serial-Line UPSes</menunode>
          <menutitle>Installation on Serial-Line UPSes</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Overview of Serial-Interface UPSes</menunode>
          <menutitle>Overview of Serial-Interface UPSes</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Connecting a Serial-Line UPS to a USB Port</menunode>
          <menutitle>Connecting a Serial-Line UPS to a USB Port</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Connecting a APC USB UPS to either a PC USB or Serial Port</menunode>
          <menutitle>Connecting a APC USB UPS to either a PC USB or Serial Port</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Cables</menunode>
          <menutitle>Cables</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Testing Serial-Line UPSes</menunode>
          <menutitle>Testing Serial-Line UPSes</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Troubleshooting Serial Line communications</menunode>
          <menutitle>Troubleshooting Serial Line communications</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Recalibrating the UPS Runtime</menunode>
          <menutitle>Recalibrating the UPS Runtime</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>DATA Logging</menunode>
          <menutitle>DATA Logging</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Technical Reference</menunode>
          <menutitle>Technical Reference</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Configuration Directive Reference</menunode>
          <menutitle>Configuration Directive Reference</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>apcupsd Status Logging</menunode>
          <menutitle>apcupsd Status Logging</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>The Shutown Sequence and its Discontents</menunode>
          <menutitle>The Shutown Sequence and its Discontents</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>APC smart protocol</menunode>
          <menutitle>APC smart protocol</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Apcupsd -- RPM Packaging FAQ</menunode>
          <menutitle>Apcupsd &ndash; RPM Packaging FAQ</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Credits &lt;1></menunode>
          <menutitle>Credits</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Kernel Config</menunode>
          <menutitle>Kernel Config</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Index</menunode>
          <menutitle>Index</menutitle>
          <menucomment>
            <detailmenu>
              <para>Release Notes</para>
</menucomment>
          </menuentry>
          <menuentry>
            <menunode>New Features</menunode>
            <menutitle>New Features</menutitle>
            <menucomment>Planning Your Installation</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Quick Start for Beginners</menunode>
            <menutitle>Quick Start for Beginners</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Supported Operating Systems; UPSes and Cables</menunode>
            <menutitle>Supported Operating Systems, UPSes and Cables</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Choosing a Configuration Type</menunode>
            <menutitle>Choosing a Configuration Type</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Apcupsd Known USB Issues</menunode>
            <menutitle>Apcupsd Known USB Issues</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Checking Out Your USB Subsystem</menunode>
            <menutitle>Checking Out Your USB Subsystem</menutitle>
            <menucomment>Building and Installing apcupsd</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Installation from Binary Packages</menunode>
            <menutitle>Installation from Binary Packages</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Installation from Source</menunode>
            <menutitle>Installation from Source</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Verifying a Source Installation</menunode>
            <menutitle>Verifying a Source Installation</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Configure Options</menunode>
            <menutitle>Configure Options</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Recommended Options for most Systems</menunode>
            <menutitle>Recommended Options for most Systems</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Compilers and Options</menunode>
            <menutitle>Compilers and Options</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Operating System Specifics</menunode>
            <menutitle>Operating System Specifics</menutitle>
            <menucomment>After Installation</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Checking Your Configuration File</menunode>
            <menutitle>Checking Your Configuration File</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Arranging for Reboot on Power-Up</menunode>
            <menutitle>Arranging for Reboot on Power-Up</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Making sure apcupsd Is Running</menunode>
            <menutitle>Making sure apcupsd Is Running</menutitle>
            <menucomment>Configuration Examples</menucomment>
          </menuentry>
          <menuentry>
            <menunode>A Simple USB Configuration</menunode>
            <menutitle>A Simple USB Configuration</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>A Simple Configuration for a SmartUPS</menunode>
            <menutitle>A Simple Configuration for a SmartUPS</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>A Simple Configuration for a Simple Signaling or Dumb</menunode>
            <menutitle>A Simple Configuration for a Simple Signaling or Dumb</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>A Simple Master Configuration</menunode>
            <menutitle>A Simple Master Configuration</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>A Simple Slave Configuration</menunode>
            <menutitle>A Simple Slave Configuration</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Variation on the Master/Slave Configuration</menunode>
            <menutitle>Variation on the Master/Slave Configuration</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>A Sample NIS Slave Configuration Using the Net Driver</menunode>
            <menutitle>A Sample NIS Slave Configuration Using the Net Driver</menutitle>
            <menucomment>Testing Apcupsd</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Process-Status Test</menunode>
            <menutitle>Process-Status Test</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Logging Test</menunode>
            <menutitle>Logging Test</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>apcaccess Test</menunode>
            <menutitle>apcaccess Test</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Communications Test</menunode>
            <menutitle>Communications Test</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Simulated Power Fail Test</menunode>
            <menutitle>Simulated Power Fail Test</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>System Shutdown Test</menunode>
            <menutitle>System Shutdown Test</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Full Power Down Test</menunode>
            <menutitle>Full Power Down Test</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Shutdown Sequence</menunode>
            <menutitle>Shutdown Sequence</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>apctest</menunode>
            <menutitle>apctest</menutitle>
            <menucomment>Troubleshooting Your Installation</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Known Problems with USB UPSes</menunode>
            <menutitle>Known Problems with USB UPSes</menutitle>
            <menucomment>Monitoring and Tuning your UPS</menucomment>
          </menuentry>
          <menuentry>
            <menunode>apcaccess</menunode>
            <menutitle>apcaccess</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Apcupsd Notification and Events</menunode>
            <menutitle>Apcupsd Notification and Events</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>hid-ups and USB Specific Information</menunode>
            <menutitle>hid-ups and USB Specific Information</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>apcupsd Network Monitoring [CGI] Programs</menunode>
            <menutitle>apcupsd Network Monitoring (CGI) Programs</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Setting up and Testing the CGI Programs</menunode>
            <menutitle>Setting up and Testing the CGI Programs</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Configuring Your EEPROM</menunode>
            <menutitle>Configuring Your EEPROM</menutitle>
            <menucomment>Maintaining Your UPS</menucomment>
          </menuentry>
          <menuentry>
            <menunode>What Various People Have to Say about Batteries</menunode>
            <menutitle>What Various People Have to Say about Batteries</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Where Carl Suggests You Get Batteries</menunode>
            <menutitle>Where Carl Suggests You Get Batteries</menutitle>
            <menucomment>Customizing Event Handling</menucomment>
          </menuentry>
          <menuentry>
            <menunode>apccontrol Command Line Options</menunode>
            <menutitle>apccontrol Command Line Options</menutitle>
            <menucomment>Master/Slave Configurations</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Configuration Directives</menunode>
            <menutitle>Configuration Directives</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Master/Slave Problems</menunode>
            <menutitle>Master/Slave Problems</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Network Problems with Master/Slave or Server/Slave Configurations</menunode>
            <menutitle>Network Problems with Master/Slave or Server/Slave Configurations</menutitle>
            <menucomment>Controlling Multiple UPSes on one Machine</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Configuration</menunode>
            <menutitle>Configuration</menutitle>
            <menucomment>Support for SNMP UPSes</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Connecting an SNMP UPS</menunode>
            <menutitle>Connecting an SNMP UPS</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Building and Installing apcupsd &lt;1></menunode>
            <menutitle>Building and Installing apcupsd</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>SNMP Specific Information</menunode>
            <menutitle>SNMP Specific Information</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Known Problems</menunode>
            <menutitle>Known Problems</menutitle>
            <menucomment>Alternate Ways To Run The Network Information Server</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Running the server as a child of apcupsd</menunode>
            <menutitle>Running the server as a child of apcupsd</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Running apcnisd from INETD</menunode>
            <menutitle>Running apcnisd from INETD</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Running apcnisd Standalome</menunode>
            <menutitle>Running apcnisd Standalome</menutitle>
            <menucomment>apcupsd System Logging</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Logging Types</menunode>
            <menutitle>Logging Types</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Implementation Details</menunode>
            <menutitle>Implementation Details</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Developers Notes</menunode>
            <menutitle>Developers Notes</menutitle>
            <menucomment>The Windows Version of apcupsd</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Installation</menunode>
            <menutitle>Installation</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Installation Directory</menunode>
            <menutitle>Installation Directory</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Testing</menunode>
            <menutitle>Testing</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Upgrading</menunode>
            <menutitle>Upgrading</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Post Installation</menunode>
            <menutitle>Post Installation</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Problem Areas</menunode>
            <menutitle>Problem Areas</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Utility Functions</menunode>
            <menutitle>Utility Functions</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Disclaimer</menunode>
            <menutitle>Disclaimer</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Email Notification of Events</menunode>
            <menutitle>Email Notification of Events</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Killpower under Windows</menunode>
            <menutitle>Killpower under Windows</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Power Down During Shutdown</menunode>
            <menutitle>Power Down During Shutdown</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Command Line Options Specific to the Windows Version</menunode>
            <menutitle>Command Line Options Specific to the Windows Version</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Building the Win32 Version from the Source</menunode>
            <menutitle>Building the Win32 Version from the Source</menutitle>
            <menucomment>Cables</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Smart-Custom Cable for SmartUPSes</menunode>
            <menutitle>Smart-Custom Cable for SmartUPSes</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Smart Signalling Cable for BackUPS CS Models</menunode>
            <menutitle>Smart Signalling Cable for BackUPS CS Models</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Voltage-Signalling Cable for "dumb" UPSes</menunode>
            <menutitle>Voltage-Signalling Cable for "dumb" UPSes</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Other APC Cables that apcupsd Supports</menunode>
            <menutitle>Other APC Cables that apcupsd Supports</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Voltage Signalling Features Supported by Apcupsd for Various Cables</menunode>
            <menutitle>Voltage Signalling Features Supported by Apcupsd for Various Cables</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Voltage Signalling</menunode>
            <menutitle>Voltage Signalling</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>The Back-UPS Office 500 signals</menunode>
            <menutitle>The Back-UPS Office 500 signals</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Analyses of APC Cables</menunode>
            <menutitle>Analyses of APC Cables</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Win32 Implementation Restrictions for Simple UPSes</menunode>
            <menutitle>Win32 Implementation Restrictions for Simple UPSes</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Internal Apcupsd Actions for Simple Cables</menunode>
            <menutitle>Internal Apcupsd Actions for Simple Cables</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>RS232 Wiring and Signal Conventions</menunode>
            <menutitle>RS232 Wiring and Signal Conventions</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Pin Assignment for the Serial Port [RS-232C]; 25-pin and 9-pin; Female End</menunode>
            <menutitle>Pin Assignment for the Serial Port (RS-232C), 25-pin and 9-pin, Female End</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Ioctl to RS232 Correspondence</menunode>
            <menutitle>Ioctl to RS232 Correspondence</menutitle>
            <menucomment>Testing Serial-Line UPSes</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Establishing Serial Port Connection</menunode>
            <menutitle>Establishing Serial Port Connection</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Using apctest on Serial-Line UPSses</menunode>
            <menutitle>Using apctest on Serial-Line UPSses</menutitle>
            <menucomment>Troubleshooting Serial Line communications</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Determining Which Voltage-Signaling Cable You Have</menunode>
            <menutitle>Determining Which Voltage-Signaling Cable You Have</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Once you have established serial communications</menunode>
            <menutitle>Once you have established serial communications</menutitle>
            <menucomment>Recalibrating the UPS Runtime</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Status Logging On Serial-Line UPSes</menunode>
            <menutitle>Status Logging On Serial-Line UPSes</menutitle>
            <menucomment>Configuration Directive Reference</menucomment>
          </menuentry>
          <menuentry>
            <menunode>General Configuration Directives</menunode>
            <menutitle>General Configuration Directives</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Configuration Directives Used by the Network Information Server</menunode>
            <menutitle>Configuration Directives Used by the Network Information Server</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Configuration Directives used during Power Failures</menunode>
            <menutitle>Configuration Directives used during Power Failures</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Configuration Directives used to Control System Logging</menunode>
            <menutitle>Configuration Directives used to Control System Logging</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Configuration Directives for Sharing a UPS</menunode>
            <menutitle>Configuration Directives for Sharing a UPS</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Configuration Directives Used to Set the UPS EPROM</menunode>
            <menutitle>Configuration Directives Used to Set the UPS EPROM</menutitle>
            <menucomment>apcupsd Status Logging</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Status report format</menunode>
            <menutitle>Status report format</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Status Report Example</menunode>
            <menutitle>Status Report Example</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Status Report Fields</menunode>
            <menutitle>Status Report Fields</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Logging the STATUS Information</menunode>
            <menutitle>Logging the STATUS Information</menutitle>
            <menucomment>The Shutown Sequence and its Discontents</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Shutdown Sequence &lt;1></menunode>
            <menutitle>Shutdown Sequence</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Shutdown Problems</menunode>
            <menutitle>Shutdown Problems</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Master/Slave Shutdown &lt;1></menunode>
            <menutitle>Master/Slave Shutdown</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Startup</menunode>
            <menutitle>Startup</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Windows Considerations</menunode>
            <menutitle>Windows Considerations</menutitle>
            <menucomment>APC smart protocol</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Description</menunode>
            <menutitle>Description</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>RS-232 differences</menunode>
            <menutitle>RS-232 differences</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Diagram for cable hackers</menunode>
            <menutitle>Diagram for cable hackers</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>The Smart Protocol</menunode>
            <menutitle>The Smart Protocol</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Dip switch info</menunode>
            <menutitle>Dip switch info</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Status bits</menunode>
            <menutitle>Status bits</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Alert messages</menunode>
            <menutitle>Alert messages</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Register 1</menunode>
            <menutitle>Register 1</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Register 2</menunode>
            <menutitle>Register 2</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Register 3</menunode>
            <menutitle>Register 3</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Interpretation of the Old Firmware Revision</menunode>
            <menutitle>Interpretation of the Old Firmware Revision</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Interpretation of the New Firmware Revision</menunode>
            <menutitle>Interpretation of the New Firmware Revision</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>EEPROM Values</menunode>
            <menutitle>EEPROM Values</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Programming the UPS EEPROM</menunode>
            <menutitle>Programming the UPS EEPROM</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Acknowledgements</menunode>
            <menutitle>Acknowledgements</menutitle>
            <menucomment>Apcupsd &ndash; RPM Packaging FAQ</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Answers</menunode>
            <menutitle>Answers</menutitle>
            <menucomment>Credits</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Contributors</menunode>
            <menutitle>Contributors</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Disclaimer; NO WARRANTY</menunode>
            <menutitle>Disclaimer; NO WARRANTY</menutitle>
            <menucomment>
            </detailmenu>
</menucomment>
        </menuentry>
      </menu>
    </unnumbered>
  </node>
  <node>
    <nodename>Release Notes</nodename>
    <nodenext>How To Use This Manual</nodenext>
    <nodeprev>Top</nodeprev>
    <nodeup>Top</nodeup>
    <unnumbered>
      <title>Release Notes</title>
      <para><indexterm index="cp">Release Notes</indexterm> This release contains a good number of cleanups and bug fixes to prior 3.10.x versions, and is intended to be the official release. See the ChangeLog below for more details.</para>
      <menu>
        <menuentry>
          <menunode>New Features</menunode>
          <menutitle>New Features</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </unnumbered>
  </node>
  <node>
    <nodename>New Features</nodename>
    <nodeup>Release Notes</nodeup>
    <section>
      <title>New Features</title>
      <para><indexterm index="cp">New Features</indexterm></para>
      <example xml:space="preserve">- Implement USB on all *BSD systems. Note, the kernel
  drivers on most of these systems are still fragile.
  There are known problems, for example, on FreeBSD.
- Fix killpower on USB UPSes to properly turn off UPS.
- More killpower fixes for BackUPS Pros.
- Fix killpower sequence for serial UPSes.</example>
      <para>Change Log for current version</para>
      <example xml:space="preserve">----&gt; Release 3.10.17 xxMar05
- Update default apcupsd.conf to recommend a blank DEVICE setting for USB
  driver.
- Add /dev/hiddev? to Linux USB driver device node search path.
- Add Mac OS X startup script
- Add new *BSD USB driver to support USB UPSes on FreeBSD, OpenBSD, and NetBSD.
  THIS DRIVER IS BETA SOFTWARE AND HAS A KNOWN LOCKUP ISSUE ON FREEBSD. Please
  keep this in mind when deciding whether or not to deploy it. PLEASE READ THE
  "CHECKING OUT YOUR USB SUBSYSTEM (BSD)" SECTION OF THE MANUAL as it contains
  crucial details on how to configure your system for the new driver.
- Add BackUPS Pro shutdown code to USB driver
- Prefer BackUPS style shutdown over SmartUPS in USB driver to resolve shutdown
  issues on BackUPS CS models
- Restructure USB driver to share common code
- Fix slave mode segfault bug introduced by --killpower fixes in 3.10.16.
- Commit kernstodo
- Added an anonymous patch to powerflute.c and to the slack-apcupsd.in file.
- Add Whitebox to detected systems.
- Minor tweak to RedHat spec.in
- Apply Carl Lindbergs patch
  for apcaction.c to fix the network management card
  shutdown.
- Fix typo in targets.mak that prevents uninstall from working.
- Change name of thread_terminate to apc_thread_terminate to avoid
  conflict on AIX.
- Put configure found SHUTDOWN in apccontrol.in
- Figured out how to scale the pdf images, so re-did them.
- Some minor updates to the manual, particularly the title
  page.
</example>
      <para>Change Log for older versions</para>
      <example xml:space="preserve">----&gt; Release 3.10.16 04Nov04
- Adam has fixed the killpower problem for USB so that the
  USB now properly turns off the power. Nice job!
- Converted manual from docbook to texinfo format. There is some
  cleanup to be done, but we get an index!
- Thanks to Adam for converting the .png images to .pdf
- Apply patch to fix aastr... supplied by Manfred Schwarb.
- Changed Solaris to use mailx by default at the suggestion of
  Neil Brookins.
- Added Adam's snoopdecode.c to examples that allows viewing
  USB events.
- A number of typos fixed in apccontrol files.
- Adam fixed a race condition in killpower with --kill-on-powerfail.
- --kill-on-powerfail disallowed for dumb UPSes since the
  kill power will always occur before the system has been halted.
- Lots of doc updates.
- Add proper platform code so that configure will create
  the 4 platform specific apccontrol files (some were missing).
- Apply fix from user to correct one of the shutdown
  sequences for the Smart UPS. During the conversion to drivers
  this was apparently mangled.
- Added code to close all file descriptors before becoming
  daemon unless debug turned on.
- Add APCBATTCapBeforeRestore found by Adam to hid-ups.c
- Update copyright in apc_struct.h
- Take Adam's new apc_defines.h with minor modification.
- Correct a bug reported by a user (he also had the fix) to
  the snmp driver where Sensitivity was incorrectly reported.
- Add astrncpy() to snmp driver.
- Fix apcstatus.c to report Unknown for the sensitivity rather than
  High if the sense word cannot be read or is incorrect.

----&gt; Release 3.10.15 07Aug04
- Document Mandrake USB kernel problems.
- Fix HID_MAX_USAGES in the examples directory
- Apply David Walser's patch for missing colors in multimon.  Reads
  the apcupsd.css file from the sysconf directory.
- Add EEPROM fix from Giuseppe Ghibo passed on by David Walser

----&gt; Release 3.10.14 28Jul04
- Add workaround from Adam for linux/hiddev.h missing define.
- Updates to manual.
- Integrate patch for Mandrake apcupsd.in forwarded by David Walser.
- Found another store into the ups buffer so ifdefed it. Cannot
  store into the ups buffer on non-pthreads systems.
- Fiddle with apcconfig.c to correct astrncpy() problem noted by
  Adam.
- ifdef code in apcaccess that tries to write in the shared memory
  buffer.
- Applied Adam's patch for fixing the pthreads dependencies in asys.c
- Tweak the patch a bit hopefully so that OpenBSD will work.
- Made a sweep through quite a few files updating the copyright,
  eliminating the disclaimer (now in DISCLAIMER), and adding as many
  astrncpy() and astrncat()s as I could find. There still remain some
  drivers and the cgi code to do.
- Implemented true/false and bool. Started implementing it in many of
  the files I touched.
- Updated the net driver and did a fairly good testing of it.
- Made apcupsd remain in the foreground when doing a kill power.
- Eliminated some of the error messages during kill power by not
  doing useless things.
- Added back code to print what is happening during kill power
  in the USB code.
- Corrected a few of the USB error messages that could have been
  missleading or confusing.
- Eliminated some inappropriate usages of size_t.
- Integrated a number of updates into the manual, particularly from
  Adam.
- If the IP address is 0.0.0.0 force it to localhost in apcaccess.
- Integrat Thomas Habets' changes to keep connect() from blocking
  in apcnet.c so that apcupsd can service more slaves.
- Ensure that stdin/out/err are allocated in daemon_start() of apcuspd.c
- Update snmp.c with bug fix from Bacula.
- Bill has made numerous changes to improve the code such as adding
  consts where appropriate.

----&gt; Release 3.10.13 20Apr04
- Added code to support net snmp configured with --enable-net-snmp
  based on patch sent by Sander Siemonsma.
- Build smtp on Unix systems.
- Update to most current smtp and make it easier to configure
  for apcupsd or Bacula
- Start implementing native Win32 version.
- Rename cmd - ups_event and cmd_msg - event_msg
- Add user supplied code to make apcaccess read the conf file and
  self configure to proper port. Thanks to Martin Flack for this
  patch.
- Start simplifying the Copyright and making the dates current.
- Rework the net driver. It was really in poor shape.
- Replace sprintf with asnprint. Replace strcpy with astrncpy
- Apply a fix supplied by Jim Pick where syslog releases the
  usb port and then re-attaches it to /dev/log.
- I finally took a careful look at the old master/slave networking
  code as well as ran it here, and it was sadly broken. Hopefully
  this commit fixes the problems.
- Fix a few string functions using the new routines.
- Added asys.c imported from Bacula, which contains a number of
  simple system routines such as astrncpy(), ...
</example>
    </section>
  </node>
  <node>
    <nodename>How To Use This Manual</nodename>
    <nodenext>Basic User's Guide</nodenext>
    <nodeprev>Release Notes</nodeprev>
    <nodeup>Top</nodeup>
    <unnumbered>
      <title>How To Use This Manual</title>
      <para><indexterm index="cp">Using this Manual</indexterm> This is the manual for apcupsd, a daemon for communicating with UPSes (Uninterruptible Power Supplies) made by American Power Corporation (APC).  If you have an APC-made UPS, whether sold under the APC nameplate or OEMed (The HP PowerTrust 2997A UPS has been tested as a "smartups" with cable Hewlett Packard part number 5061-2575 equivalent to a custom-smart cable), and you want you get it working with a computer running Linux, Unix, or Windows NT, you are reading the right document.</para>
      <para>This manual is divided into parts which increase in technical depth as they go.  If you have just bought a state-of-the-art smart UPS with a USB or Ethernet interface, and you are running a current version of Red Hat or SUSE Linux (8.0 or later), then apcupsd is very nearly plug-and-play and you will have to read only the Basic User's Guide (see <xref><xrefnodename>Basic User's Guide</xrefnodename></xref>).</para>
      <para>If your operating system is older, or if you have an old-fashioned serial-line UPS, you'll have to read about serial installation (see <xref><xrefnodename>Installation on Serial-Line UPSes</xrefnodename></xref>).  If you need more details about administration for unusual situations (such as a master/slave or multi-UPS setup) you'll need to read the section on advanced topics (see <xref><xrefnodename>Advanced topics</xrefnodename></xref>). Finally, there is a Technical Reference (see <xref><xrefnodename>Technical Reference</xrefnodename></xref>) section which gives full details on things like configuration file directives and event-logging formats.</para>
      <para>You should begin by reading the Quick Start (see <xref><xrefnodename>Quick Start for Beginners</xrefnodename></xref>) instructions.</para>
    </unnumbered>
  </node>
  <node>
    <nodename>Basic User's Guide</nodename>
    <nodenext>Advanced topics</nodenext>
    <nodeprev>How To Use This Manual</nodeprev>
    <nodeup>Top</nodeup>
    <majorheading>Basic User's Guide</majorheading>
    <para><indexterm index="cp">User's Guide</indexterm></para>
    <menu>
      <menuentry>
        <menunode>Planning Your Installation</menunode>
        <menutitle>Planning Your Installation</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>Building and Installing apcupsd</menunode>
        <menutitle>Building and Installing apcupsd</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>After Installation</menunode>
        <menutitle>After Installation</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>Configuration Examples</menunode>
        <menutitle>Configuration Examples</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>Testing Apcupsd</menunode>
        <menutitle>Testing Apcupsd</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>Troubleshooting Your Installation</menunode>
        <menutitle>Troubleshooting Your Installation</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>Monitoring and Tuning your UPS</menunode>
        <menutitle>Monitoring and Tuning your UPS</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>Maintaining Your UPS</menunode>
        <menutitle>Maintaining Your UPS</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>Frequently-Asked Questions</menunode>
        <menutitle>Frequently-Asked Questions</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>Apcupsd Bugs</menunode>
        <menutitle>Apcupsd Bugs</menutitle>
        <menucomment></menucomment>
      </menuentry>
    </menu>
  </node>
  <node>
    <nodename>Planning Your Installation</nodename>
    <nodenext>Building and Installing apcupsd</nodenext>
    <nodeup>Basic User's Guide</nodeup>
    <chapter>
      <title>Planning Your Installation</title>
      <para><indexterm index="cp">Planning Installation</indexterm><indexterm index="cp">Installation, Planning</indexterm></para>
      <menu>
        <menuentry>
          <menunode>Quick Start for Beginners</menunode>
          <menutitle>Quick Start for Beginners</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Supported Operating Systems; UPSes and Cables</menunode>
          <menutitle>Supported Operating Systems, UPSes and Cables</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Choosing a Configuration Type</menunode>
          <menutitle>Choosing a Configuration Type</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Apcupsd Known USB Issues</menunode>
          <menutitle>Apcupsd Known USB Issues</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Checking Out Your USB Subsystem</menunode>
          <menutitle>Checking Out Your USB Subsystem</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Quick Start for Beginners</nodename>
    <nodenext>Supported Operating Systems; UPSes and Cables</nodenext>
    <nodeup>Planning Your Installation</nodeup>
    <section>
      <title>Quick Start for Beginners</title>
      <para><indexterm index="cp">Quick Start</indexterm> apcupsd is a complex piece of software, but most of its complexities are meant for dealing with older hardware and operating systems.  On current hardware and software getting it running should not be very complicated.</para>
      <para>The following is a help guide to the steps needed to get apcupsd set up and running as painlessly as possible.</para>
      <enumerate first="1">
        <item>
          <para>First, check to see if apcupsd supports your UPS and operating system (see <xref><xrefnodename>Supported Operating Systems; UPSes and Cables</xrefnodename></xref>).</para>
        </item>
        <item>
          <para>Second, plan your configuration type (see <xref><xrefnodename>Choosing a Configuration Type</xrefnodename></xref>).  If you have just one UPS and one computer, this is easy.  If you have more than one machine being served by the same UPS, or more than one UPS supplying power to computers that are on the same local network, you have more choices to make.</para>
        </item>
        <item>
          <para>Third, figure out if you have one of the easy setups.  If you have a USB UPS, and a USB-capable recent Linux such as Red Hat or SuSE at version 8.0, and you want to use one UPS with one computer, that's an easy setup.  APC supplies the cable needed to talk with that UPS along with the UPS. All you need to do is check that your USB subsystem is working (see <xref><xrefnodename>Checking Out Your USB Subsystem</xrefnodename></xref>); if so, you can go to the build and install step.</para>
        </item>
        <item>
          <para>If you have a UPS designed to communicate via SNMP over Ethernet, that is also a relatively easy installation. It's in Advanced Topics (see <xref><xrefnodename>Advanced topics</xrefnodename></xref>) mainly because it's an unusual situation.</para>
        </item>
        <item>
          <para>If you have a UPS that communicates via an RS232C serial interface and it is a SmartUPS, then things are relatively simple, otherwise, your life is about to get interesting.</para>
          <enumerate first="1">
            <item>
              <para>If you have a vendor-supplied cable, find out what cable type you have by looking on the flat ends of the cable for a number, such as 940-0020A, stamped in the plastic.  Check the cables column of the table of types (see <xref><xrefnodename>type_table</xrefnodename></xref>) to see if it's a supported type.</para>
            </item>
            <item>
              <para>If you don't have a vendor-supplied cable, or your type is not supported, you may have to build one yourself (see <xref><xrefnodename>Cables</xrefnodename></xref>).  Here is hoping you are good with a soldering iron!</para>
            </item>
          </enumerate>                        
        </item>
        <item>
          <para>Now you are ready to read the Building and Installing (see <xref><xrefnodename>Building and Installing apcupsd</xrefnodename></xref>) section of the manual and follow those directions.  If you are installing from an RPM or some other form of binary package, this step will probably consist of executing a single command.</para>
        </item>
        <item>
          <para>Tweak your <file>/etc/apcupsd/apcupd.conf</file> file as necessary. Often it will not be.</para>
        </item>
        <item>
          <para>Change the BIOS settings (see <xref><xrefnodename>Arranging for Reboot on Power-Up</xrefnodename></xref>) on your computer so that boots up every time it gets power. (This is not the default on most systems.)</para>
        </item>
        <item>
          <para>To verify that your UPS is communicating with your computer and will do the right thing when the power goes out, read and follow the instructions in the Testing (see <xref><xrefnodename>Testing Apcupsd</xrefnodename></xref>) section.</para>
        </item>
        <item>
          <para>If you run into problems, read the Troubleshooting (see <xref><xrefnodename>Troubleshooting Your Installation</xrefnodename></xref>) section of this manual.</para>
        </item>
        <item>
          <para>If you still need help, send a message to the developer's email list <email><emailaddress>apcupsd-users at lists.sourceforge.net</emailaddress></email> describing your problem, what version of apcupsd you are using, what operating system you are using, and anything else you think might be helpful.</para>
        </item>
        <item>
          <para>Read the manual sections on <uref><urefurl>monitoring</urefurl><urefdesc>monitoring</urefdesc></uref> and <uref><urefurl>maintaining</urefurl><urefdesc>maintaining</urefdesc></uref> your UPS.</para>
        </item>
      </enumerate>
    </section>
  </node>
  <node>
    <nodename>Supported Operating Systems; UPSes and Cables</nodename>
    <nodenext>Choosing a Configuration Type</nodenext>
    <nodeprev>Quick Start for Beginners</nodeprev>
    <nodeup>Planning Your Installation</nodeup>
    <section>
      <title>Supported Operating Systems, UPSes and Cables</title>
      <para><indexterm index="cp">Supported OSes</indexterm><indexterm index="cp">OSes Supported</indexterm> Please note that due to the lack of Unix USB API standards, the USB code in apcupsd works only on Linux and *BSD systems. In addition, at the current release (3.10.17) the USB support for *BSD systems can at best be considered BETA due to fragile kernel drivers. Drivers for other OSes can be written, but it requires someone with a knowledge of the OS and the USB to do so.  (This lack of a Unix USB API interface is one of the big failings of Unix.  It occurs in other areas such as the GUI. Many people tout the diversity as an advantage, but it is in fact a weakness.)</para>
      <para>The apcupsd maintainers develop it under Fedora (Red Hat); that port is, accordingly, the most up to date and best tested.  There are enough Debian Linux users that that port is also generally pretty fresh.  Slackware Linux is also fully supported.</para>
      <para>apcupsd has also been ported to FreeBSD, NetBSD, OpenBSD, HP/UX, Solaris, Alpha Unix and the Cygwin Unix emulation under Windows. It is quite likely to work on those systems, though the port may occasionally get stale and require minor tweaking.</para>
      <para>In <xref><xrefnodename>Operating System Specifics</xrefnodename></xref> you'll find operating-system-specific tips for building and configuring apcupsd.</para>
      <para>You can generally count on your UPS being supported if it has either an Ethernet-connected SNMP interface or a USB interface with an APC-supplied cable.</para>
      <para><anchor name="upstypes"></anchor>The "UPSTYPE Keyword" field is the value you will put in your <file>/etc/apcupsd/apcupd.conf</file> file to tell apcupsd what type of UPS you have.  We'll describe the possible values here, because they're a good way to explain your UPS's single most important interface property &mdash; the kind of protocol it uses to talk with its computer.</para>
      <para><indexterm index="cp">UPSTYPE</indexterm><indexterm index="cp">Keywords, USBTYPE</indexterm></para>
      <table>
        <tableitem>
          <tableterm>apcsmart</tableterm>
          <item>
            <para>An APCSmart UPS and its computer also communicate through an RS232C serial connection, but they actually use it as a character channel (2400bps, 8 data bits, 1 stop bit, no parity) and pass commands back and forth in a primitive language (see <xref><xrefnodename>APC smart protocol</xrefnodename></xref>) resembling modem-control codes.  The different APC UPSes all use closely related firmware, so the language doesn't vary much (later versions add more commands).  This class of UPS is in decline, rapidly being replaced in APC's product line by USB UPSes.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>usb</tableterm>
          <item>
            <para>A USB UPS speaks a universal well defined control language over a USB wire.  Most of APC's lineup now uses this method as of late 2003, and it seems likely to completely take over in their low- and middle range.  Other manufacturers (Belkin, Tripp-Lite, etc.) are moving the same way, though with a different control protocol for each manufacturer.  As long as USB hardware can be mass-produced more cheaply than an Ethernet card, most UPSes are likely to go this design route. Please note that even if you have a USB UPS, if you use a serial cable with it (as can be supplied by APC), you will need to configure your UPS as <strong>apcsmart</strong> rather than <strong>usb</strong>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>net</tableterm>
          <item>
            <para>This is the keyword to specify if you are using your UPS in Slave mode (i.e. the machine is not directly connected to the UPS, but to another machine which is), and it is connected to the Master via an ethernet connection. You must have apcupsd's Network Information Services NIS turned on for this mode to work. It is a much simpler form of running a Slave than the old Master/Slave code.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>snmp</tableterm>
          <item>
            <para>SNMP UPSes communicate via an Ethernet NIC and firmware that speaks Simple Network Management Protocol.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>dumb</tableterm>
          <item>
            <para>A dumb or voltage-signaling UPS and its computer communicate through the signal lines on an RS232C serial connection.  Not much can actually be conveyed this way other than an order to shut down. Voltage-signaling UPSes are obsolete; you are unlikely to encounter one other than as legacy hardware. If you have a choice, we recommend you avoid simple signalling UPSes.</para>
          </item>
        </tableitem>
      </table>
      <para>The table shown below lists the APC model supported, and the possible kewords that you would use in the configuration with the listed cables. Some of the models, particularly USB enabled models, can be run in multiple modes, so they may appear more than once in the table. APC is putting out new models at a furious rate, and so it is very likely that your model is not listed in the table. If it is USB enabled, it will probably work in USB mode. Please note that some of these new models are extremely inexpensive, so they are stripped down versions of more expensive units, and as such they do not offer as many features, so some of the example output you see elsewhere in this manual may not be available with your unit.</para>
      <para role="continues"><anchor name="type_table"></anchor></para>
      <para><indexterm index="cp">UPSTYPE, table</indexterm> </para>
      <multitable>
        <columnfraction>25</columnfraction>
        <columnfraction>25</columnfraction>
        <columnfraction>25</columnfraction>
        <columnfraction>25</columnfraction>
        <tbody>
          <row>
            <entry><strong>APC Model</strong></entry>
            <entry><emph>UPSTYPE Keyword</emph></entry>
            <entry><emph>UPSCABLE keywords for Cables Supported</emph></entry>
            <entry><emph>Status</emph></entry>
          </row>
          <row>
            <entry>BackUPS CS/ES (serial mode)</entry>
            <entry>apcsmart</entry>
            <entry>smart (note: using Smart Custom RJ45) the new Back-UPS RS 500 models are reported NOT to work with this cable.</entry>
            <entry>Supported</entry>
          </row>
          <row>
            <entry>BackUPS Pro, Smarter BackUPS Pro</entry>
            <entry>apcsmart</entry>
            <entry>940-0095A</entry>
            <entry>Supported</entry>
          </row>
          <row>
            <entry>SmartUPS, SmartUPS VS (It has not been confirmed that the cable shipped with the VS is a 940-0095.), PowerStack 450, Matrix UPS, ShareUPS Advanced Port</entry>
            <entry>apcsmart</entry>
            <entry>smart (note: using Smart-Custom), 940-0024C</entry>
            <entry>Supported</entry>
          </row>
          <row>
            <entry>BackUPS CS USB, Pro USB, ES USB, RS/XS 1000, RS/XS 1500, and probably other USB models</entry>
            <entry>usb</entry>
            <entry>usb (note: using APC cables 940-0127A/B/C)</entry>
            <entry>Supported in version &gt;=3.9.8</entry>
          </row>
          <row>
            <entry>SmartUPS USB, BackUPS Office USB, and any other USB UPS</entry>
            <entry>usb</entry>
            <entry>usb (note: using APC cable, no number)</entry>
            <entry>Supported, version &gt;=3.9.8</entry>
          </row>
          <row>
            <entry>All SNMP-capable models</entry>
            <entry>snmp</entry>
            <entry>ether</entry>
            <entry>Supported</entry>
          </row>
          <row>
            <entry>BackUPS</entry>
            <entry>dumb</entry>
            <entry>simple (note: using Simple-Custom (This cable is not an APC product.  You have to build it yourself using the instructions in <xref><xrefnodename>Cables</xrefnodename></xref>.), 940-0020B, 940-0020C, 940-0119A, 940-0023A</entry>
            <entry>Supported</entry>
          </row>
          <row>
            <entry>BackUPS Office, BackUPS ES</entry>
            <entry>dumb</entry>
            <entry>940-0119A</entry>
            <entry>Supported</entry>
          </row>
          <row>
            <entry>BackUPS CS and possibly ES models (serial mode)</entry>
            <entry>dumb</entry>
            <entry>940-0128A</entry>
            <entry>Supported</entry>
          </row>
          <row>
            <entry>ShareUPS Basic Port</entry>
            <entry>dumb</entry>
            <entry>940-0020B, 940-0020C, 940-0023A</entry>
            <entry>Supported</entry>
          </row>
        </tbody>
      </multitable>
    </section>
  </node>
  <node>
    <nodename>Choosing a Configuration Type</nodename>
    <nodenext>Apcupsd Known USB Issues</nodenext>
    <nodeprev>Supported Operating Systems; UPSes and Cables</nodeprev>
    <nodeup>Planning Your Installation</nodeup>
    <para><indexterm index="cp">Choosing a Configuration Type</indexterm><indexterm index="cp">Configuration Type</indexterm> There are three major ways of running apcupsd on your system. The first is a standalone configuration where apcupsd controls a single UPS, which powers a single computer.  This is the most common configuration.  If you're working with just one machine and one UPS, skip the rest of this section.</para>
    <para>Your choices become more interesting if you are running a small cluster or a big server farm.  Under those circumstances, it may not be possible or even desirable to pair a UPS with every single machine.  apcupsd supports some alternate arrangements.</para>
    <para>The second type of configuration is a master/slave configuration, where one UPS powers several computers, each of which runs a copy of apcupsd.  The computer that controls the UPS is called the master, and the other computers are called slaves.  The master copy of apcupsd communicates with and controls the slaves via an Ethernet connection.  This type of configuration may be appropriate for a small cluster of machines.  Some example configuration files for the master and the slave machines can be found in the examples directory of the source distribution.  The more recent examples are in master.apcupsd.conf and slave.apcupsd.conf.</para>
    <para>The third configuration (new with version 3.8.3), is where a single computer controls multiple UPSes. In this case, there are several copies of apcupsd on the same computer, each controlling a different UPS. One copy of apcupsd will run in standalone mode, and the other copy or copies will normally run in master/slave mode.  This type of configuration may be appropriate for large server farms that use one dedicated machine for monitoring and diagnostics</para>
    <para>Here is a diagram that summarizes the possibilities:</para>
    <para role="continues"><anchor name="Configuration types_"></anchor></para>
    <para><strong>Configuration types.</strong></para>
    <sp lines="1"></sp>
    <example xml:space="preserve"><image width="" height="" name="main_configs" extension=""><alttext></alttext></image></example>
    <sp lines="1"></sp>
    <para>If you decide to set up one of these more complex configurations, see the Advanced Topics (see <xref><xrefnodename>Advanced topics</xrefnodename></xref>) section for details.</para>
  </node>
  <node>
    <nodename>Apcupsd Known USB Issues</nodename>
    <nodenext>Checking Out Your USB Subsystem</nodenext>
    <nodeprev>Choosing a Configuration Type</nodeprev>
    <nodeup>Planning Your Installation</nodeup>
    <section>
      <title>Apcupsd Known USB Issues</title>
      <para><indexterm index="cp">USB problems</indexterm><indexterm index="cp">Problems, USB</indexterm> - <strong>Problem:</strong> USB is only supported on Linux and *BSD systems (though the *BSD is still BETA). Although the configuration script allows the usb driver to be enabled on other platforms, it will only compile and run on Linux and *BSD systems.</para>
      <para>- <strong>Workaround:</strong> Try using UPS in serial mode instead of USB.</para>
      <para>- <strong>Problem:</strong> Linux 2.4 series kernels older than 2.4.22 do not bind the USB device to the proper driver. This is evidenced by /proc/bus/usb/devices listing the UPS correctly but it will have "driver=(none)" instead of "driver=(hid)". This affects RHEL3, among others.</para>
      <para>- <strong>Workaround:</strong> Upgrade linux kernel to 2.4.22 or higher.</para>
      <para>- <strong>Problem:</strong> Mandrake 10.0 and 10.1 systems with high security mode enabled (running kernel-secure kernel) use static device nodes but still assign USB minor numbers dynamically. This is evidenced by <strong>hiddev0: USB HID v1.10 Device [...]</strong> instead of <strong>hiddev96: ...</strong> in dmesg log.</para>
      <para>- <strong>Workaround:</strong> Boot standard kernel instead of kernel-secure or disable CONFIG_USB_DYNAMIC_MINORS and rebuild kernel-secure.</para>
      <para>- <strong>Problem:</strong> USB driver linux-usb.c fails to compile, reporting errors about <strong>HID_MAX_USAGES undefined</strong>. This is due to a defect in the linux kernel hiddev.h header file on 2.6.5 and higher kernels.</para>
      <para>- <strong>Workaround:</strong> Workaround: Upgrade to apcupsd-3.10.14 or higher.  These versions contain a workaround for the defect.</para>
      <para>- <strong>Problem:</strong> On some systems such as Slackware 10.0, no USB devices will showup (see the next section).</para>
      <para>- <strong>Workaround:</strong> add the following to rc.local</para>
      <example xml:space="preserve">
 mount -t usbdevfs none /proc/bus/usb
</example>
      <para>- <strong>Problem:</strong> 2.6 kernels use udev and does not autmatically create /dev/usb/hiddev?? as it should, causing apcupsd to</para>
      <para>- <strong>Workaround:</strong> Edit the file /etc/udev/rules.d/50-udev.rules, and add the following:</para>
      <example xml:space="preserve">KERNEL="hiddev*", NAME="usb/hiddev%n"</example>
      <para>More details are provided in the following section ...</para>
    </section>
  </node>
  <node>
    <nodename>Checking Out Your USB Subsystem</nodename>
    <nodeprev>Apcupsd Known USB Issues</nodeprev>
    <nodeup>Planning Your Installation</nodeup>
    <section>
      <title>Checking Out Your USB Subsystem</title>
      <para>You can skip this section if your UPS has an Ethernet or RS232-C interface or you are not running on a Linux kernel.  If it has a USB interface, you need to make sure that your USB subsystem can see the UPS. On a Linux system this is easy, just do this from a shell prompt (please see below for 2.6 kernel considerations):</para>
      <example xml:space="preserve">
cat /proc/bus/usb/devices</example>
      <para>This information is updated by the kernel whenever a device is plugged in or unplugged, irrespective of whether apcupsd is running or not. To interpret the codes in this file, please see <uref><urefurl>http://www.linuxhq.com/kernel/v2.4/doc/usb/proc_usb_info.txt.html</urefurl><urefdesc>http://www.linuxhq.com/kernel/v2.4/doc/usb/proc_usb_info.txt.html</urefdesc></uref></para>
      <para>You should get some output back that includes something like this from ESR's site, featuring an RS 1000:</para>
      <example xml:space="preserve">
T:  Bus=02 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  3 Spd=1.5 MxCh= 0
D:  Ver= 1.10 Cls=00(&gt;ifc ) Sub=00 Prot=00 MxPS= 8 #Cfgs=  1
P:  Vendor=051d ProdID=0002 Rev= 1.06
S:  Manufacturer=American Power Conversion
S:  Product=Back-UPS RS 1000 FW:7.g3 .D USB FW:g3
S:  SerialNumber=JB0308036505
C:* #Ifs= 1 Cfg#= 1 Atr=a0 MxPwr= 24mA
I:  If#= 0 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=00 Prot=00 Driver=hid</example>
      <para>Note, if on the last line, <strong>Driver</strong> is listed as <strong>Driver=none</strong> then you do not have the HID driver loaded or the driver did not attach to the UPS. One common cause is having a Linux kernel older than 2.4.22 (such as a stock RedHat 9 kernel). If this is the case for your system, please upgrade to at least kernel version 2.4.22 and try again.  Otherwise, please read further for instructions for other possible courses of action.</para>
      <para>For more details on how to interpret these codes, please see the end of this section.</para>
      <para>Here are two more ample entries from Kern Sibbald.  The first features a  Back-UPS 350 direct connected USB device:</para>
      <example xml:space="preserve">
T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  2 Spd=1.5 MxCh= 0
D:  Ver= 1.10 Cls=00(&gt;ifc ) Sub=00 Prot=00 MxPS= 8 #Cfgs=  1
P:  Vendor=051d ProdID=0002 Rev= 1.00
S:  Manufacturer=American Power Conversion
S:  Product=Back-UPS 350 FW: 5.2.I USB FW: c1
S:  SerialNumber=BB0115017954
C:* #Ifs= 1 Cfg#= 1 Atr=a0 MxPwr= 30mA
I:  If#= 0 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=00 Prot=00 Driver=hid
E:  Ad=81(I) Atr=03(Int.) MxPS=   8 Ivl= 10ms</example>
      <para>The second features an IOgear USB-to-serial adapter that runs my serial SmartUPS 1000:</para>
      <example xml:space="preserve">
T:  Bus=01 Lev=01 Prnt=01 Port=01 Cnt=02 Dev#=  4 Spd=12  MxCh= 0
D:  Ver= 1.10 Cls=00(&gt;ifc ) Sub=00 Prot=00 MxPS= 8 #Cfgs=  1
P:  Vendor=0557 ProdID=2008 Rev= 0.01
C:* #Ifs= 1 Cfg#= 1 Atr=a0 MxPwr=100mA
I:  If#= 0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=serial
E:  Ad=81(I) Atr=03(Int.) MxPS=  10 Ivl=  1ms
E:  Ad=02(O) Atr=02(Bulk) MxPS=  64 Ivl=  0ms
E:  Ad=83(I) Atr=02(Bulk) MxPS=  64 Ivl=  0ms</example>
      <para>Note that the IOgear device is using the <strong>serial</strong> driver (the I: line) while the Back-UPS 350 is using the <strong>hid</strong> driver.</para>
      <para>In general, if you see your UPS model in the S field, which means <strong>Manufacturer=</strong>, <strong>Product=</strong>, and <strong>SerialNumber=</strong>, and you see <strong>hid</strong> in the I field (or <strong>serial</strong> if you are using an IOGear connection), you're done.  You can skip the rest of this section and go straight to building and installing.</para>
      <para>If it doesn't show, check the obvious things; the UPS must be powered on, and a cable must be properly seated in both the data port of the UPS and one of your machine's USB ports.  Many UPSes have phone ports to provide surge protection for phones or modems &mdash; make sure you haven't plugged your USB cable into one of those rather than the data port (which will usually be near the top edge of the case.)</para>
      <para>Note, on recent Debian systems, they do not include the hiddev device nodes in /dev, so you may need to manually create them using the <strong>examples/make-hiddev</strong> script.</para>
      <para>Also, ensure that the correct drivers are loaded. Under Linux-2.4.x, you can check this out easily by examining the right file in the <file>/proc</file> system.  Here's how you can do that:</para>
      <example xml:space="preserve">
esr@grelber$ cat /proc/bus/usb/drivers</example>
      <para>and you should get:</para>
      <example xml:space="preserve">
         usbdevfs
         hub
 96-111: hiddev
         hid</example>
      <para>On Linux-2.6.x, make sure the sysfs filesystem is mounted on /sys and do:</para>
      <example xml:space="preserve">
adk0212@mail$ ls -l /sys/bus/usb/drivers/</example>
      <para>where you should get</para>
      <example xml:space="preserve">
    total 0
    drwxr-xr-x    2 root     root            0 May  1 18:55 hid
    drwxr-xr-x    2 root     root            0 May  1 18:55 hiddev
    drwxr-xr-x    2 root     root            0 May  1 18:55 hub
    drwxr-xr-x    2 root     root            0 May  1 18:55 usb
    drwxr-xr-x    2 root     root            0 May  1 18:55 usbfs</example>
      <para>or perhaps something like</para>
      <example xml:space="preserve">   total 0
   drwxr-xr-x  2 root root 0 Jan  6 15:27 hiddev
   drwxr-xr-x  2 root root 0 Jan  6 15:28 hub
   drwxr-xr-x  2 root root 0 Jan  6 15:28 usb
   drwxr-xr-x  2 root root 0 Jan  6 15:27 usbfs
   drwxr-xr-x  2 root root 0 Jan  6 15:28 usbhid</example>
      <para>If your 2.6.x system does not have the /sys/bus/usb directory, either you do not have sysfs mounted on /sys or the USB module(s) have not been loaded.  (Check /proc/mounts to make sure sysfs is mounted.)</para>
      <para>A USB UPS needs all of these drivers &mdash; the USB device filesystem, the USB hub, the Human Interface Device subsystem driver, and the Human Interface Device driver. If you are compiling your own kernel, you want to enable CONFIG_USB, CONFIG_USB_HID, CONFIG_USB_HIDDEV, and CONFIG_USB_DEVICEFS as well as at least one USB Host Controller Driver (CONFIG_USB_UHCI_HCD [2.6.x], CONFIG_USB_UHCI [2.4.x], etc.).</para>
      <para>If CONFIG_USB is set as M, CONFIG_USB_HID must be M (if enabled at all). If CONFIG_USB is set as Y, CONFIG_USB_HID can be M or Y. hiddev, in turn, will be built however HID is.</para>
      <para>To complicate things more many Linux flavors running 2.6 kernels such as Fedora FC3 use the udev filesystem, which creates the devices in /dev (as well as some others such as network devices) on the fly as they are needed. It is basically a hotplug system, giving a lot more power to the user to determine what happens when a device is probed or opened. It is also a lot more complicated.</para>
      <para>The bottom line for apcupsd on such a system is that the file /dev/usb/hiddev# is not defined, and hence apcupsd terminates in error. The solution to the problem is to add a rule to the udev rules file.  On Fedora FC3, this file is found in /etc/udev/rules.d/50-udev.rules. Start by adding the following line:</para>
      <example xml:space="preserve">BUS="usb", SYSFS[idVendor]="051d", NAME="usb/hiddev%n"</example>
      <para>where you replace the [ and ] with braces in the line above.</para>
      <para>Then either reboot your system, or unplug and replug your UPS and then restart apcupsd. At that point apcupsd should work fine.  You can use:</para>
      <example xml:space="preserve">udevinfo -a -p /sys/class/usb/hiddev0/</example>
      <para>to get more information on the fields that can be matched.</para>
      <para>Adam has provided the following as a more generic rule:</para>
      <example xml:space="preserve">KERNEL="hiddev*", NAME="usb/hiddev%n"</example>
      <para>If you have several UPSes or you just want to give your UPS a fixed name, you can use:</para>
      <example xml:space="preserve">BUS="usb", SYSFS[serial]="AS0123456789", NAME="usb/ups0"</example>
      <para>where you replace the [ and ] with braces and the serial number with the one that correspnds to your UPS.</para>
      <para>Some kernels ship, such as Mandrake 10, ship with CONFIG_USB_DYNAMIC_MINORS turned on. This is not ideal for running with apcupsd, and the easiest solution is to turn CONFIG_USB_DYNAMIC_MINORS off and rebuild your kernel, or find a pre-built kernel with it off. For a kernel with CONFIG_USB_DYNAMIC_MINORS turned on to work with apcupsd, you must enable <strong>devfs</strong>. The following will tell you if devfs is enabled:</para>
      <example xml:space="preserve">
$ ps ax | grep devs</example>
      <para>which should give something like the following:</para>
      <example xml:space="preserve">
533 ?        S      0:00 devfsd /dev</example>
      <para>What complicates the situation much more on Mandrake kernels is their security level since CONFIG_DYNAMIC_USB_MINORS is turned on, but on higher security levels devfs is turned off. The net result, is that in those situations hiddev is hosed (to use Adam's terms) so apcupsd will not work. So, in these cases, the choices are:</para>
      <example xml:space="preserve">
(a) Reduce the security level setting of the system
    (not sure if this is possible after the initial install).
(b) Custom build a high security kernel with devfs enabled
    and make sure devfs is mounted and devfsd is running.
(c) Custom build a high security kernel with dynamic
    minors disabled
(d) Use udev</example>
      <para>For a typical USB section of a kernel .config file, please see the end of this section.</para>
      <para>For the IOGear serial USB connection, you need:</para>
      <example xml:space="preserve">
usbcore
usbserial
pl2303</example>
      <para>Finally, check that appropriate USB devices exist.  On a Red Hat system you can do this:</para>
      <example xml:space="preserve">
esr@grelber$ ls /dev/usb/h*
/dev/usb/hiddev0   /dev/usb/hiddev12  /dev/usb/hiddev2  /dev/usb/hiddev6
/dev/usb/hiddev1   /dev/usb/hiddev13  /dev/usb/hiddev3  /dev/usb/hiddev7
/dev/usb/hiddev10  /dev/usb/hiddev14  /dev/usb/hiddev4  /dev/usb/hiddev8
/dev/usb/hiddev11  /dev/usb/hiddev15  /dev/usb/hiddev5  /dev/usb/hiddev9</example>
      <para>This will tell you that the Human Interface Device nodes, one of which apcupsd will use to talk with the UPS, exist.  On other Linuxes the layout will be slightly different; the hiddev devices will usually live in a <file>/dev/usb/hid/</file> subdirectory. If these devices don't exist, you may need to run <file>&lt;apcupsd-source&gt;/examples/make-hiddev</file> to create them.</para>
      <para>Now build and run the hid-ups test program. You do not have to configure and build the rest of apcupsd to do this.  To build hid-ups enter:</para>
      <example xml:space="preserve">
cd &lt;apcupsd-source&gt;/examples
make hid-ups</example>
      <para>There should be no errors. Now assuming that everything has gone well to this point and that you have connected your USB UPS, enter:</para>
      <para><indexterm index="cp">hid-ups</indexterm></para>
      <example xml:space="preserve">
./hid-ups</example>
      <para>It should print a sample report of the information that it has obtained from your UPS. CAUTION! if you have a 2.4.x Linux kernel do  not run two copies of this program at the same time, or your kernel will freeze. The report that is printed should look very similar to the report in <file>&lt;apcupsd-source&gt;/examples/hid-ups.rpt</file>. If the program reports that the device was not found ensure that all the appropriate modules are loaded (as described earlier), then unplug your UPS and plug it back in. This should permit the kernel to recognize the UPS.</para>
      <para>If ./hid-ups tells you "No permission, try this as root", you know what to try. If it says "Couldn't find USB UPS device, check your /dev.", then it is very unlikely that apcupsd will work.  You probably need to run the script "make-hiddev" before continuing.</para>
      <para>If all there things check out and you still can't see the UPS, something is more seriously wrong than this manual can cover &mdash; find expert help.  If you are unable to list USB devices or drivers, you kernel may not be USB-capable and that needs to be fixed. Please check if your kernel has the three patches listed in the <file>&lt;apcupsd-source&gt;/examples</file> directory. Each of the files ends with the name <file>.patch</file>, and at the current writing they are:</para>
      <example xml:space="preserve">
linux-2.4.20-killpower.patch
linux-2.4.20-USB-reject.patch
linux-2.6.0-USB-queue-overflow.patch</example>
      <para>For example, RedHat 9 and/or pre-2.4.22 kernels are known to need the linux-2.4.20-USB-reject.patch for APC SmartUPS XL series devices.</para>
      <para>There are also a few email files that you can consult in the <file>examples</file> directory for additional information and details.</para>
      <para>Finally, check your Kernel Config. You will find more information about it at: <xref><xrefnodename>Kernel Config</xrefnodename></xref>.</para>
    </section>
  </node>
  <node>
    <nodename>Building and Installing apcupsd</nodename>
    <nodenext>After Installation</nodenext>
    <nodeprev>Planning Your Installation</nodeprev>
    <nodeup>Basic User's Guide</nodeup>
    <chapter>
      <title>Building and Installing apcupsd</title>
      <para><indexterm index="cp">Building</indexterm><indexterm index="cp">Installing</indexterm></para>
      <menu>
        <menuentry>
          <menunode>Installation from Binary Packages</menunode>
          <menutitle>Installation from Binary Packages</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Installation from Source</menunode>
          <menutitle>Installation from Source</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Verifying a Source Installation</menunode>
          <menutitle>Verifying a Source Installation</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Configure Options</menunode>
          <menutitle>Configure Options</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Recommended Options for most Systems</menunode>
          <menutitle>Recommended Options for most Systems</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Compilers and Options</menunode>
          <menutitle>Compilers and Options</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Operating System Specifics</menunode>
          <menutitle>Operating System Specifics</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Installation from Binary Packages</nodename>
    <nodenext>Installation from Source</nodenext>
    <nodeup>Building and Installing apcupsd</nodeup>
    <section>
      <title>Installation from Binary Packages</title>
      <menu>
        <menuentry>
          <menunode>Red Hat Linux</menunode>
          <menutitle>Red Hat Linux</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Microsoft Windows</menunode>
          <menutitle>Microsoft Windows</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Red Hat Linux</nodename>
    <nodenext>Microsoft Windows</nodenext>
    <nodeup>Installation from Binary Packages</nodeup>
    <subsection>
      <title>Red Hat Linux</title>
      <para><indexterm index="cp">Installing, Red Hat</indexterm> For Red Hat systems, apcupsd is available in binary RPM format.  This is the simplest way to install. If you have no previous version of apcupsd on your machine and are creating a standalone configuration, simply install the RPM with a normal <code>rpm -ihv</code> command. You're done, and can now skip the rest of this chapter and go straight to tweaking your run-time configuration file. (see <xref><xrefnodename>After Installation</xrefnodename></xref>)</para>
      <para>If you have a previous installation, you can upgrade with a normal <code>rpm -Uhv</code>, but this may not upgrade the halt script. It may be better to do the upgrade as a remove (<code>rpm -e</code>) foll;owed by a fresh install (<code>rpm -ihv</code>).</para>
      <para>After installation of the binary RPM, please verify carefully that <file>/etc/rc.d/init.d/halt</file> was properly updated and contains new script lines flagged with <strong>***APCUPSD***</strong>.</para>
      <para>Since there is no standard location for <file>cgi-bin</file>, the rpm will place the binary CGI programs in the directory <file>/etc/apcupsd/cgi</file>. To actually use them, you must copy or move them to your actual cgi-bin directory, which on many systems is located in <file>/home/httpd/cgi-bin</file>.</para>
    </subsection>
  </node>
  <node>
    <nodename>Microsoft Windows</nodename>
    <nodeprev>Red Hat Linux</nodeprev>
    <nodeup>Installation from Binary Packages</nodeup>
    <subsection>
      <title>Microsoft Windows</title>
      <para><indexterm index="cp">Installing, Microsoft</indexterm> If you have a binary release of the Win32 apcupsd, please see the instructions in the Advanced Topics (see <xref><xrefnodename>Advanced topics</xrefnodename></xref>) section of this manual.</para>
    </subsection>
  </node>
  <node>
    <nodename>Installation from Source</nodename>
    <nodenext>Verifying a Source Installation</nodenext>
    <nodeprev>Installation from Binary Packages</nodeprev>
    <nodeup>Building and Installing apcupsd</nodeup>
    <section>
      <title>Installation from Source</title>
      <para>Installation from source might have to be be done different ways depending on what system you are running. The basic procedure involves getting a source distribution, running the configuration, rebuilding, and installing.</para>
      <para>The basic installation from a tar source file is rather simple:</para>
      <enumerate first="1">
        <item>
          <para>Unpack the source code from its tar archive.</para>
        </item>
        <item>
          <para>Go into the directory containing the source code.</para>
        </item>
        <item>
          <para>Run <code>./configure</code> (with appropriate options as described below)</para>
        </item>
        <item>
          <para>make</para>
        </item>
        <item>
          <para>su (i.e. become root)</para>
        </item>
        <item>
          <para>Stop any running instance of apcupsd.  The command to do this will look like <code>&lt;system-dependent-path&gt;/apcupsd stop</code></para>
        </item>
        <item>
          <para>uninstall any old apcupsd This is important since the default install locations may have changed.</para>
        </item>
        <item>
          <para>make install</para>
        </item>
        <item>
          <para>edit your <file>/etc/apcupsd/apcupsd.conf</file> file if necessary</para>
        </item>
        <item>
          <para>ensure that your halt script is properly updated</para>
        </item>
        <item>
          <para>Start the new apcupsd with: <code>&lt;system-dependent-path&gt;/apcupsd start</code></para>
        </item>
      </enumerate>
      <para>If all goes well, the <code>./configure</code> will correctly determine which operating system you are running and configure the source code appropriately. <code>configure</code> currently recognizes the systems listed below in the <xref><xrefnodename>Operating System Specifics</xrefnodename></xref> section of this chapter and adapts the configuration appropriately.  Check that the configuration report printed at the end of the <code>configure</code> process corresponds to your choice of directories, options, and that it has correctly detected your operating system.  If not, redo the <code>configure</code> with the appropriate options until your configuration is correct.</para>
      <para>Please note that a number of the <code>configure</code> options preset <file>apcupsd.conf</file> directive values in an attempt to automatically adapt apcupsd as best possible to your system.  You can change the values in <file>apcupsd.conf</file> at a later time without redoing the configuration process by simply editing the <file>apcupsd.conf</file> file.</para>
      <para>Other configuration options can be used to set up the installation of HTML documentation and optional modules, notably the CGI interface that enables the UPS state to be queried via the Web and the optional powerflute curses-based control panel.  Still others enable features such as thread support.  You will find a complete reference later in this chapter.</para>
      <para>In general, you will probably want to supply a more elaborate <code>configure</code> statement to ensure that the modules you want are built and that everything is placed into the correct directories.</para>
      <para>On Red Hat, a fairly typical configuration command would look like the following:</para>
      <example xml:space="preserve">
CFLAGS="-g -O2" LDFLAGS="-g" ./configure \
  --enable-usb \
  --with-upstype=usb \
  --with-upscable=usb \
  --prefix=/usr \
  --sbindir=/sbin \
  --with-cgi-bin=/var/www/cgi-bin \
  --enable-cgi \
  --with-css-dir=/var/www/docs/css \
  --with-log-dir=/etc/apcupsd \
  --enable-pthreads \
  --enable-powerflute</example>
      <para>By default, <code>make install</code> will install the executable files in <file>/sbin</file>, the manuals in <file>/usr/man</file>, and the configuration and script files in <file>/etc/apcupsd</file>. In addition, if your system is recognized, certain files such as the startup script and the system halt script will be placed in appropriate system directories (usually subdirectories of <file>/etc/rc.d</file>).</para>
    </section>
  </node>
  <node>
    <nodename>Verifying a Source Installation</nodename>
    <nodenext>Configure Options</nodenext>
    <nodeprev>Installation from Source</nodeprev>
    <nodeup>Building and Installing apcupsd</nodeup>
    <section>
      <title>Verifying a Source Installation</title>
      <para><indexterm index="cp">Verifying Source</indexterm><indexterm index="cp">Installing, Source</indexterm> There are a number of things that you can do to check if the installation (make install) went well. The fist is to check where the system has installed apcupsd using <code>which</code> and <code>whereis</code>. On my Red Hat system, you should get the following (lines preceded with a $ indicate what you type):</para>
      <example xml:space="preserve">
$ which apcupsd
/sbin/apcupsd
$ whereis apcupsd
apcupsd: /sbin/apcupsd /etc/apcupsd /etc/apcupsd.conf
/etc/apcupsd.status /usr/man/man8/apcupsd.8.gz
/usr/man/man8/apcupsd.8</example>
      <para>If you find an apcupsd in <file>/usr/sbin</file>, <file>/usr/local/sbin</file>, <file>/usr/lib</file>, or another such directory, it is probably a piece of an old version of apcupsd that you can delete. If you are in doubt, delete it, then rerun the <code>make install</code> to ensure that you haven't deleted anything needed by the new apcupsd.  Please note that the files specified above assume the default installation locations.</para>
      <para>As a final check that the <code>make install</code> went well, you should check your halt script (in <file>/etc/rc.d</file> on SUSE systems, and in <file>/etc/rc.d/init.d</file> on Red Hat systems) to see that the appropriate lines have been inserted in the correct place. Modification of the halt script is important so that at the end of the shutdown procedure, apcupsd will be called again to command the UPS to turn off the power. This should only be done in a power failure situation as indicated by the presence of the <file>/etc/powerfail</file> file, and is necessary if you want your machine to automatically be restarted when the power returns. On a Red Hat system, the lines containing the <code># ***apcupsd***</code> should be inserted just before the final halt command:</para>
      <example xml:space="preserve">
# Remount read only anything that's left mounted.
#echo "Remounting remaining filesystems (if any) readonly"
mount | awk '/ext2/ { print $3 }' | while read line; do
    mount -n -o ro,remount $line
done

# See if this is a powerfail situation.                               # ***apcupsd***
if [ -f /etc/apcupsd/powerfail ]; then                                # ***apcupsd***
   echo                                                               # ***apcupsd***
   echo "APCUPSD will now power off the UPS"                          # ***apcupsd***
   echo                                                               # ***apcupsd***
   /etc/apcupsd/apccontrol killpower                                  # ***apcupsd***
   echo                                                               # ***apcupsd***
   echo "Please ensure that the UPS has powered off before rebooting" # ***apcupsd***
   echo "Otherwise, the UPS may cut the power during the reboot!!!"   # ***apcupsd***
   echo                                                               # ***apcupsd***
fi                                                                    # ***apcupsd***

# Now halt or reboot.
echo "$message"
if [ -f /fastboot ]; then
 echo "On the next boot fsck will be skipped."
elif [ -f /forcefsck ]; then
 echo "On the next boot fsck will be forced."
fi</example>
      <para>The purpose of modifying the system halt files is so that apcupsd will be recalled after the system is in a stable state. At that point, apcupsd will instruct the UPS to shut off the power. This is necessary if you wish your system to automatically reboot when the mains power is restored. If you prefer to manually reboot your system, you can skip this final system dependent installation step by specifying the <code>disable-install-distdir</code> option on the <code>./configure</code> command (see below for more details).</para>
      <para>The above pertains to Red Hat systems only. There are significant differences in the procedures on each system, as well as the location of the halt script. Also, the information that is inserted in your halt script varies from system to system. Other systems such as Solaris require you the make the changes manually, which has the advantage that you won't have any unpleasant surprises in your halt script should things go wrong. Please consult the specific system dependent README files for more details.</para>
      <para>Please note that if you install from RPMs for a slave machine, you will need to remove the changes that the RPM install script made (similar to what is noted above) to the halt script. This is because on a slave machine there is no connection to the UPS, so there is no need to attempt to power off the UPS. That will be done by the master.</para>
    </section>
  </node>
  <node>
    <nodename>Configure Options</nodename>
    <nodenext>Recommended Options for most Systems</nodenext>
    <nodeprev>Verifying a Source Installation</nodeprev>
    <nodeup>Building and Installing apcupsd</nodeup>
    <section>
      <title>Configure Options</title>
      <para><indexterm index="cp">configure options</indexterm><indexterm index="cp">options, configure</indexterm> All the available <code>configure</code> options can be printed by entering:</para>
      <example xml:space="preserve">
./configure --help</example>
      <para>When specifying options for <code>./configure</code>, if in doubt, don't put anything, since normally the configuration process will determine the proper settings for your system. The advantage of these options is that it permits you to customize your version of apcupsd.  If you save the <code>./configure</code> command that you use to create apcupsd, you can quickly reset the same customization in the next version of apcupsd by simply re-using the same <code>./configure</code> command.</para>
      <para>The following command line options are available for <code>configure</code> to customize your installation.</para>
      <table><indexterm index="cp">options, &mdash;prefix</indexterm>
        <tableitem>
          <tableterm>&ndash;prefix=&lt;path&gt;</tableterm>
          <item>
            <para>This defines the directory for the non-executable files such as the manuals. The default is <strong>/usr</strong>.</para>
            <para><indexterm index="cp">options, &mdash;sbindir</indexterm></para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;sbindir=&lt;path&gt;</tableterm>
          <item>
            <para>This defines the directory for the executable files such as apcupsd. The default is <file>/sbin</file>. You may be tempted to place the executable files in <file>/usr/sbin</file> or <file>/usr/local/sbin</file>. Please use caution here as these directories may be unmounted during a shutdown and thus may prevent the <code>halt</code> script from calling apcupsd to turn off the UPS power. Though your data will be protected, in this case, your system will probably not be automatically rebooted when the power returns.</para>
            <para><indexterm index="cp">options, &mdash;enable-powerflute</indexterm></para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;enable-powerflute</tableterm>
          <item>
            <para>This option enables the building of the powerflute executable, which is a ncurses based program to monitor the UPS. This program is not necessary for the proper execution of apcupsd.</para>
            <para><indexterm index="cp">options, &mdash;enable-cgi</indexterm></para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;enable-cgi</tableterm>
          <item>
            <para>This enables the building of the CGI programs that permit Web browser access to apcupsd data. This option is not necessary for the proper execution of apcupsd.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;with-cgi-bin=&lt;path&gt;</tableterm>
          <item>
            <para>The with-cgi-bin configuration option allows you to define the directory where the CGI programs will be installed. The default is <file>/etc/apcupsd</file>, which is probably not what you want.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;with-css-dir=&lt;path&gt;</tableterm>
          <item>
            <para>This option allows you to specify where you want apcupsd to put the Cascading Style Sheet that goes with the multimoncss.cgi CGI program.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;enable-master-slave</tableterm>
          <item>
            <para>Turns on the master/slave networking code (default). This is sometimes referred to as the old master/slave code, and is more complicated than using NIS and the net driver to control Slaves (see below).</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;enable-apcsmart</tableterm>
          <item>
            <para>Turns on generation of the APC Smart driver (default).</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;enable-dumb</tableterm>
          <item>
            <para>Turns on generation of the dumb signalling driver code (default).</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;enable-usb</tableterm>
          <item>
            <para>Turns on generation of the Linux (only) USB driver code. By default this is disabled.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;enable-net</tableterm>
          <item>
            <para>Turns on generation of the NIS network driver for slaves. This is an alternative to old master/slave code. For the master, this code should be disabled. For each slave, this is the only driver needed. This driver works by reading the information from the the configured master using the NIS (Network Information Services) interface.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;enable-snmp</tableterm>
          <item>
            <para>Turns on generation of the SNMP driver. This driver will control the computer by reading the UPS information over the network assuming you are running SNMP. By default this is disabled.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;enable-test</tableterm>
          <item>
            <para>This turns on a test driver that is used only for debugging. By default it is disabled.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;enable-nis</tableterm>
          <item>
            <para>Turns on the Network Information Server (NIS) code within apcupsd. This is enabled by default. If you do not want to access the status of the UPS from the network and you are not controlling any slaves via NIS (enable-net), this can be disabled.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;enable-pthreads</tableterm>
          <item>
            <para>This option enables pthreads support causing apcupsd to be built as a threaded program rather than forking to create separate processes. apcupsd built in this fashion is more efficient that the standard version being one third the data size and less overhead locking and coping shared memory. This option is <emph>highly</emph> recommended for Windows builds.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;with-libwrap=&lt;path&gt;</tableterm>
          <item>
            <para>This option when enabled causes apcupsd to be built with the TCP WRAPPER library for enhanced security. In most cases, the &lt;path&gt; is optional since configure will determine where the libraries are on most systems.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;with-nologin=&lt;path&gt;</tableterm>
          <item>
            <para>This option allows you to specify where apcupsd will create the nologin file when logins are prohibited. The default is <file>/etc</file></para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;with-pid-dir=&lt;path&gt;</tableterm>
          <item>
            <para>This option allows you to specify where apcupsd will create the process id (PID) file to prevent multiple copies from running. The default is system dependent but usually <file>/var/run</file>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;with-log-dir=&lt;path&gt;</tableterm>
          <item>
            <para>This option allows you to specify where apcupsd will create the EVENTS and STATUS log files. The default is <file>/etc/apcupsd</file>. This option simply sets the default of the appropriate path in the <file>apcupsd.conf</file> file, which can be changed at any later time.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;with-lock-dir=&lt;path&gt;</tableterm>
          <item>
            <para>This option allows you to specify where apcupsd will create the serial port lock file. The default is systemdependent but usually <file>/var/lock</file>. This option simply sets the appropriate path in the <file>apcupsd.conf</file> file, which can be changed at any later time.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;with-pwrfail-dir=&lt;path&gt;</tableterm>
          <item>
            <para>This option allows you to specify where apcupsd will create the <file>powerfail</file> file when a power failure occurs. The default is system dependent but usually <file>/etc</file>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;with-serial-dev=&lt;device-name&gt;</tableterm>
          <item>
            <para>This option allows you to specify where apcupsd will look for the serial device that talks to the UPS. The default is system dependent, but often <file>/dev/ttyS0</file>. This option simply sets the appropriate device name in the <file>apcupsd.conf</file> file, which can be changed at any later time.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;with-nis-port=&lt;port&gt;</tableterm>
          <item>
            <para>This option allows you to specify what port apcupsd will use for the Network Information Server (the CGI programs). The default is system dependent but usually 3551 because that port has been officially assigned to apcupsd by the IANA. This option simply sets the appropriate port in the <file>apcupsd.conf</file> file, which can be changed at any later time.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;with-nisip=&lt;IP-Address&gt;</tableterm>
          <item>
            <para>This option allows you to specify the value that will be placed on then NISIP directive in the configuration file. The default is 0.0.0.0. No checking is done on the value entered, so you must ensure that it is a valid IP address.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;with-net-port=&lt;port&gt;</tableterm>
          <item>
            <para>This option allows you to specify what port apcupsd will use for Master and Slave communications. The default is system dependent but usually 6666. This option simply sets the appropriate port in the <file>apcupsd.conf</file> file, which can be changed at any later time.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;with-upstype=&lt;type&gt;</tableterm>
          <item>
            <para>This option allows you to specify the type of UPS that will be connected to your computer. The default is: smartups. This option simply sets the appropriate UPS type in the <file>apcupsd.conf</file> file, which can be changed at any later time.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;with-upscable=&lt;path&gt;</tableterm>
          <item>
            <para>This option allows you to specify what cable you are using to connect to the UPS. The default is: smart. This option simply sets the appropriate UPS cable in the <file>apcupsd.conf</file> file, which can be changed at any later time.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&ndash;disable-install-distdir</tableterm>
          <item>
            <para>This option modifies the apcupsd Makefiles disable installation of the distribution (platform) directory. Generally, this used to do a full installation of apcupsd except the final modification of the operating system files (normally <file>/etc/rc.d/halt</file>, etc.). This is useful if your operating system is not directly supported by apcupsd or if you want to run two copies of apcupsd on the same system. This option can also be used by those of you who prefer to manually reboot your system after a power failure or who do not want to modify your system halt files.</para>
          </item>
        </tableitem>
      </table>
    </section>
  </node>
  <node>
    <nodename>Recommended Options for most Systems</nodename>
    <nodenext>Compilers and Options</nodenext>
    <nodeprev>Configure Options</nodeprev>
    <nodeup>Building and Installing apcupsd</nodeup>
    <section>
      <title>Recommended Options for most Systems</title>
      <para>For most systems, we recommend the following options:</para>
      <example xml:space="preserve">
./configure --prefix=/usr --sbindir=/sbin --enable-usb \
            --enable-pthreads</example>
      <para>and you can optionally build and install the CGI programs as follows:</para>
      <example xml:space="preserve">
./configure --prefix=/usr --sbindir=/sbin --enable-usb \
            --enable-cgi --with-cgi-bin=/home/httpd/cgi-bin \
            --enable-pthreads</example>
    </section>
  </node>
  <node>
    <nodename>Compilers and Options</nodename>
    <nodenext>Operating System Specifics</nodenext>
    <nodeprev>Recommended Options for most Systems</nodeprev>
    <nodeup>Building and Installing apcupsd</nodeup>
    <section>
      <title>Compilers and Options</title>
      <para><indexterm index="cp">compiler options</indexterm> Some systems require unusual options for compilation or linking that the <code>./configure</code> script does not know about. You can specify initial values for variables by setting them in the environment. Using a Bourne-compatible shell, you can do that on the command line like this:</para>
      <example xml:space="preserve">
CFLAGS="-O2 -Wall" LDFLAGS= ./configure</example>
      <para>Or on systems that have the <code>env</code> program, you can do it like this:</para>
      <example xml:space="preserve">
env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure</example>
      <para>Or for example on the Sun Solaris system, you can use:</para>
      <example xml:space="preserve">
setenv CFLAGS -O2
setenv LDFLAGS -O
./configure</example>
      <para>You can get a listing of all available options by doing:</para>
      <example xml:space="preserve">
./configure --help</example>
      <para>or simply see the previous section of this manual.</para>
    </section>
  </node>
  <node>
    <nodename>Operating System Specifics</nodename>
    <nodeprev>Compilers and Options</nodeprev>
    <nodeup>Building and Installing apcupsd</nodeup>
    <section>
      <title>Operating System Specifics</title>
      <para><indexterm index="cp">OSes</indexterm> With the exception of Linux SUSE and Linux Red Hat systems used by the developers, we rely on users to help create installation scripts and instructions as well as to test that apcupsd runs correctly on their system. As you can imagine, most of these people are system administrators rather than developers so they are very busy and don't always have time to test the latest releases.  With that in mind, we believe that you will find that a lot of very valuable work has been already done to make your installation much easier (and probably totally automatic).</para>
      <para>Below, you will find a list of operating systems for which we have received installation files:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>Alpha (see <xref><xrefnodename>Alpha</xrefnodename></xref>)</para>
        </item>
        <item>
          <para>Debian (see <xref><xrefnodename>Debian</xrefnodename></xref>)</para>
        </item>
        <item>
          <para>FreeBSD (see <xref><xrefnodename>FreeBSD</xrefnodename></xref>)</para>
        </item>
        <item>
          <para>HPUX (see <xref><xrefnodename>HPUX</xrefnodename></xref>)</para>
        </item>
        <item>
          <para>NetBSD (see <xref><xrefnodename>NetBSD</xrefnodename></xref>)</para>
        </item>
        <item>
          <para>OpenBSD (see <xref><xrefnodename>OpenBSD</xrefnodename></xref>)</para>
        </item>
        <item>
          <para>Red Hat (see <xref><xrefnodename>Red Hat Systems</xrefnodename></xref>)</para>
        </item>
        <item>
          <para>Slackware (see <xref><xrefnodename>Slackware</xrefnodename></xref>)</para>
        </item>
        <item>
          <para>SUSE (see <xref><xrefnodename>SUSE</xrefnodename></xref>)</para>
        </item>
        <item>
          <para>Solaris (see <xref><xrefnodename>Sun Solaris</xrefnodename></xref>)</para>
        </item>
        <item>
          <para>unknown (see <xref><xrefnodename>Unknown System</xrefnodename></xref>)</para>
        </item>
        <item>
          <para>Win32 (see <xref><xrefnodename>Windows Systems with CYGWIN Installed</xrefnodename></xref>)</para>
        </item>
      </itemize>
      <menu>
        <menuentry>
          <menunode>Alpha</menunode>
          <menutitle>Alpha</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Debian</menunode>
          <menutitle>Debian</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>FreeBSD</menunode>
          <menutitle>FreeBSD</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>HPUX</menunode>
          <menutitle>HPUX</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>NetBSD</menunode>
          <menutitle>NetBSD</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>OpenBSD</menunode>
          <menutitle>OpenBSD</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Red Hat Systems</menunode>
          <menutitle>Red Hat Systems</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Slackware</menunode>
          <menutitle>Slackware</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>SUSE</menunode>
          <menutitle>SUSE</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Sun Solaris</menunode>
          <menutitle>Sun Solaris</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Unknown System</menunode>
          <menutitle>Unknown System</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Windows Systems with CYGWIN Installed</menunode>
          <menutitle>Windows Systems with CYGWIN Installed</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Alpha</nodename>
    <nodenext>Debian</nodenext>
    <nodeup>Operating System Specifics</nodeup>
    <subsection>
      <title>Alpha</title>
      <para><indexterm index="cp">Alpha</indexterm><indexterm index="cp">OS, Alpha</indexterm> The Alpha V4.0 version of apcupsd builds without compiler errors with gcc version 2.95.2. It is unlikely that the native Alpha compiler will work because of varargs differences. Unless you are a system guru, we recommend that you connect your UPS to the second serial port <file>/dev/tty01</file> to avoid conflicts with the console device.</para>
      <example xml:space="preserve">
DEVICE /dev/tty01</example>
      <para>In addition, you should ensure serial port lock file in <file>apcupsd.conf</file> is defined as:</para>
      <example xml:space="preserve">
LOCKFILE /var/spool/locks</example>
      <para>Unlike the Linux systems, the system halt routine is located in <file>/sbin/rc0</file>, so after the <code>make install</code>, please check that this file has been correctly updated.</para>
      <para>The start/stop script can be found in:</para>
      <example xml:space="preserve">
/sbin/init.d/apcupsd</example>
    </subsection>
  </node>
  <node>
    <nodename>Debian</nodename>
    <nodenext>FreeBSD</nodenext>
    <nodeprev>Alpha</nodeprev>
    <nodeup>Operating System Specifics</nodeup>
    <subsection>
      <title>Debian</title>
      <para><indexterm index="cp">Debian</indexterm><indexterm index="cp">OS, Debian</indexterm> This port is complete and is operation by several users. Since Debian build and install procedures are somewhat particular, we have put the extra Debian information into the following two subdirectories: <file>&lt;src&gt;/distributions/debian/examples/</file> and <file>&lt;src&gt;/distributions/debian/packageinfo</file></para>
      <para>You can also find the official Debian packages on the Debian site at:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para><uref><urefurl>http://packages.debian.org/stable/admin/apcupsd.html</urefurl><urefdesc>http://packages.debian.org/stable/admin/apcupsd.html</urefdesc></uref></para>
        </item>
        <item>
          <para><uref><urefurl>http://packages.debian.org/testing/admin/apcupsd.html</urefurl><urefdesc>http://packages.debian.org/testing/admin/apcupsd.html</urefdesc></uref></para>
        </item>
        <item>
          <para><uref><urefurl>http://packages.debian.org/unstable/admin/apcupsd.html</urefurl><urefdesc>http://packages.debian.org/unstable/admin/apcupsd.html</urefdesc></uref></para>
        </item>
      </itemize>
    </subsection>
  </node>
  <node>
    <nodename>FreeBSD</nodename>
    <nodenext>HPUX</nodenext>
    <nodeprev>Debian</nodeprev>
    <nodeup>Operating System Specifics</nodeup>
    <subsection>
      <title>FreeBSD</title>
      <para><indexterm index="cp">FreeBSD</indexterm><indexterm index="cp">OS, FreeBSD</indexterm> This port is complete and is being used by several users. As of version 3.8.3, we do not recommend that you compile apcupsd with pthreads enabled. This is because the current FreeBSD implementation of pthreads runs as a single process, and thus is less efficient (consumes more CPU time) than the forking version of apcupsd. We hope to rectify this in a future version by using the FreeBSD LinuxThreads implementation of pthreads.</para>
      <para>On the FreeBSD OS, there is no known way for a user program to get control when all the disks are synced. This is needed for apcupsd to be able to issue the killpower command to the UPS so that the UPS shuts off the power. To accomplish the same thing on FreeBSD systems, make sure you have a SmartUPS and that your UPS shutdown grace period is set sufficiently long so that you system will power down (usually 2 minutes), the use the <code>kill-on-powerfail</code> option on the apcupsd command line.</para>
      <para>Please note the concerns listed below under OpenBSD concerning the use of pthreads.</para>
    </subsection>
  </node>
  <node>
    <nodename>HPUX</nodename>
    <nodenext>NetBSD</nodenext>
    <nodeprev>FreeBSD</nodeprev>
    <nodeup>Operating System Specifics</nodeup>
    <subsection>
      <title>HPUX</title>
      <para><indexterm index="cp">HPUX</indexterm><indexterm index="cp">OS, HPUX</indexterm> We have no reports from testing this yet on version 3.8.4, but worked fine on 3.8.1</para>
    </subsection>
  </node>
  <node>
    <nodename>NetBSD</nodename>
    <nodenext>OpenBSD</nodenext>
    <nodeprev>HPUX</nodeprev>
    <nodeup>Operating System Specifics</nodeup>
    <subsection>
      <title>NetBSD</title>
      <para><indexterm index="cp">NetBSD</indexterm><indexterm index="cp">OS, NetBSD</indexterm> Submitted during development of 3.8.2, this should be a complete distribution.  Please read the comments on the pthreads implementation in the FreeBSD section above as they may apply equally to OpenBSD.</para>
      <para>Please note the concerns listed below under OpenBSD concerning the use of pthreads.</para>
    </subsection>
  </node>
  <node>
    <nodename>OpenBSD</nodename>
    <nodenext>Red Hat Systems</nodenext>
    <nodeprev>NetBSD</nodeprev>
    <nodeup>Operating System Specifics</nodeup>
    <subsection>
      <title>OpenBSD</title>
      <para><indexterm index="cp">OpenBSD</indexterm><indexterm index="cp">OS, OpenBSD</indexterm> Ensure that you read the <file>distributions/openbsd/README</file> file before running apcupsd. There are some critical differences in how the OpenBSD implementation operates when the UPS batteries are exhausted. Failure to take this into account may result in the system not being fully halted when power is lost.  Please read the comments on the pthreads implementation in the FreeBSD section above as they may apply equally to OpenBSD.</para>
      <para>PLEASE NOTE. Due to some deficiencies or errors in the OpenBSD pthreads libraries, if you build apcupsd on OpenBSD with pthread and a child program is launched (i.e. mail notification of events), this may cause OpenBSD to freeze up. The best solution is probably to build without pthread. However, in doing so, you must realize that the bulk of this manual assumes that pthreads is enabled, and thus many of the comments about apcaccess will not be applicable. A second solution that seems to work is to delete all calls to the email notification routines from <file>apccontrol</file>. In doing so, some users have succeeded in running apcupsd with pthreads.</para>
      <para>If you want to know the technical problems with pthreads on OpenBSD, it is as best we can tell because the pthreads are not real kernel pthreads as on Linux and Solaris, but rather a user program that makes all I/O non-blocking. So when apcupds does I/O, the userland pthreads libarary will switch to another thread if it wants to run. This works fine except that when a child process is called and it exits, all the blocking/non-blocking statuses of the open file descriptors in the parent program are reset as blocking &ndash; this causes chaos and an almost immediate freezing of the program (apcupsd).</para>
    </subsection>
  </node>
  <node>
    <nodename>Red Hat Systems</nodename>
    <nodenext>Slackware</nodenext>
    <nodeprev>OpenBSD</nodeprev>
    <nodeup>Operating System Specifics</nodeup>
    <subsection>
      <title>Red Hat Systems</title>
      <para><indexterm index="cp">Red Hat</indexterm><indexterm index="cp">OS, Red Hat</indexterm> Red Hat systems are fully supported, and by following the standard installation instructions given above, you should experience few or no problems.</para>
    </subsection>
  </node>
  <node>
    <nodename>Slackware</nodename>
    <nodenext>SUSE</nodenext>
    <nodeprev>Red Hat Systems</nodeprev>
    <nodeup>Operating System Specifics</nodeup>
    <subsection>
      <title>Slackware</title>
      <para><indexterm index="cp">Slackware</indexterm><indexterm index="cp">OS, Slackware</indexterm> Slackware systems are fully supported, and by following the standard installation instructions given above, you should experience few or no problems.</para>
    </subsection>
  </node>
  <node>
    <nodename>SUSE</nodename>
    <nodenext>Sun Solaris</nodenext>
    <nodeprev>Slackware</nodeprev>
    <nodeup>Operating System Specifics</nodeup>
    <subsection>
      <title>SUSE</title>
      <para><indexterm index="cp">SuSE</indexterm><indexterm index="cp">OS, SuSE</indexterm> SUSE systems are fully supported, and by following the standard installation instructions given above, you should experience few or no problems.</para>
    </subsection>
  </node>
  <node>
    <nodename>Sun Solaris</nodename>
    <nodenext>Unknown System</nodenext>
    <nodeprev>SUSE</nodeprev>
    <nodeup>Operating System Specifics</nodeup>
    <subsection>
      <title>Sun Solaris</title>
      <para><indexterm index="cp">Sun</indexterm><indexterm index="cp">Solaris</indexterm><indexterm index="cp">OS, Solaris</indexterm> Please read this before attempting to compile or install the beta software. It contains important information that will make your efforts easier.</para>
      <para>If you find bugs, or run into problems that seem to be related to the version of Solaris that you run, please feel free to contact the maintainers by email, or through the development mailing list. We'll attempt to help with problems getting the beta running, although we can't promise a quick response.</para>
      <para>As always, remember testing UPSes can be hazardous to you system, and, apcupsd <emph>may contain bugs that can damage your system and data files!</emph> You must accept all responsibility for running this software. An unexpected power-off of a running system can be a disaster. As always, make backups of any critical information before you install this software.</para>
      <para>Remember, we told you. we'll listen sympathetically if you lose data, but there will be nothing we can do to help you.</para>
      <para>Please read the general installation instructions given above before continuing on with these Solaris-specific instructions. Then come back and read this section before attempting to build the package.</para>
      <para>For building the system, we suggest that you run the configure and make processes as your normal UNIX user ID. The <code>make install</code> must be run as root. But if your normal ID has an environment setup for using the C compiler, it's simpler to do that than to set up root to have the correct environment.</para>
      <para>Normally, we support the GCC compiler, but we have also attempted to support the Solaris workshop compilers and EGCS compilers. Please be aware that if you do not use GCC, you may experience a few problems.</para>
      <para>Whichever compiler you do have, please insure that you can execute the compiler from the command line before running configure. If you do not have an environment setup to run the compiler first, configure will fail.</para>
      <para>Before running <code>./configure</code>, please be sure that you do not have <file>/usr/ucb</file> on your path. This may cause the <code>./configure</code> to choose the wrong shutdown program. If <code>./configure</code> detects that /usr/usb is on your path, it will print a warning message. Please follow the advice to avoid shutdown problems.</para>
      <para>Your normal UNIX user ID must own the source tree directories, and you must have the normal development tools in your path. This includes make, the compiler, the M4 preprocessor, the linker, and ar or ranlib. If the user you are logged in as can compile and link a C program from a source file, then you have all the required tools available.</para>
      <para>You will want to install the executables in a directory that remains mounted during the shutdown. Solaris will unmount almost everything except the root directories. Since the ability to power the UPS off requires access to the executable programs, they need to be in a directory that will never be unmounted. And since they should also be in a directory that normal users cannot get into, <file>/sbin</file> is the default. However, please be aware that if you want to follow Sun's filesystem conventions you would use the following:</para>
      <example xml:space="preserve">
./configure \
   --prefix=/opt/apcupsd \
   --sbindir=/etc/opt/apcupsd/sbin \
   --sysconfdir=/etc/opt/apcupsd \
   --with-cgi-bin=/opt/apcupsd/cgi-bin</example>
      <para>The way to setup the <file>/sbin</file> directory as the executables directory is to pass configure the <strong>sbindir=/sbin</strong> option. No other arguments should be required, and your setup and platform should be detected automatically by configure.</para>
      <para>Once you have run configure, you will need to do a <code>make</code>.  Once the make has completed with no errors, you must su to root to complete the install. After the su, you may not have a path to the make program anymore. In that case, you should do the <code>make install</code> step as:</para>
      <example xml:space="preserve">
/usr/ccs/bin/make install</example>
      <para>Once the install completes, you must edit the /sbin/rc0 script as detailed below, then exit from the su'ed shell.</para>
      <para>In order to support unattended operation and shutdown during a power failure, it's important that the UPS remove power after the shutdown completes. This allows the unattended UPS to reboot the system when power returns by re-powering the system. Of course, you need autoboot enabled for your system to do this, but all Solaris systems have this by default. If you have disabled this on your system, please re-enable it.</para>
      <para>To get the UPS to remove power from the system at the correct time during shutdown, i.e., after the disks have done their final sync, we need to modify a system script. This script is <file>/sbin/rc0</file>.</para>
      <para>We do not have access to every version of Solaris, but we believe this file will be almost identical on every version. Please let us know if this is not true.</para>
      <para>At the very end of the <file>/sbin/rc0</file> script, you should find lines just like the following:</para>
      <example xml:space="preserve">
# unmount file systems. /usr, /var and /var/adm are not unmounted by umountall
# because they are mounted by rcS (for single user mode) rather than
# mountall.
# If this is changed, mountall, umountall and rcS should also change.
/sbin/umountall
/sbin/umount /var/adm &gt;/dev/null 2&gt;&amp;1
/sbin/umount /var &gt;/dev/null 2&gt;&amp;1
/sbin/umount /usr &gt;/dev/null 2&gt;&amp;1

echo 'The system is down.'</example>
      <para>We need to insert the following lines just before the last 'echo':</para>
      <example xml:space="preserve">
#see if this is a powerfail situation
if [ -f /etc/apcupsd/powerfail ]; then
        echo
        echo "APCUPSD will power off the UPS"
        echo
        /etc/apcupsd/apccontrol killpower
        echo
        echo "Please ensure that the UPS has powered off before rebooting"
        echo "Otherwise, the UPS may cut the power during the reboot!!!"
        echo
fi</example>
      <para>We have included these lines in a file called <file>rc0.solaris</file> in the distributions/sun subdirectory of the source tree. You can cut and paste them into the /sbin/rc0 file at the correct place, or yank and put them using vi or any other editor. Note that you must be root to edit this file.</para>
      <para>You must be absolutely sure you have them in the right place. If your <file>/sbin/rc0</file> file does not look like the lines shown above, do not modify the file. Instead, email a copy of the file to the maintainers, and we will attempt to figure out what you should do. If you mess up this file, the system will not shut down cleanly, and you could lose data. Don't take the chance.</para>
      <para>This feature has only been tested with APC SmartUPS models. If you do not have a SmartUPS, you will be one of the first testers to try this feature. Please send email to let us know if it works with your UPS model, what model you have, and if possible, the event logs located in <file>/etc/apcupsd</file>. We'd be very interested in your results, and would be glad to work with you to get this feature working correctly with all the APC models. A detailed description of the screen output during the shutdown would be very helpful if you see problems.</para>
      <para>You will then need to make the normal changes to the <file>/etc/apcupsd/apcupsd.conf</file> file. This file contains the configuration settings for the package. It is important that you set the values to match your UPS model and cable type, and the serial port that you have attached the UPS to.  People have used both <file>/dev/ttya</file> and <file>/dev/ttyb</file> with no problems. You should be sure that logins are disabled on the port you are going to use, otherwise you will not be able to communicate with the UPS. If you are not sure that logins are disabled for the port, run the 'admintool' program as root, and disable the port. The 'admintool' program is a GUI administration program, and required that you are running CDE, OpenWindows, or another XWindows program such as KDE.</para>
      <para>Solaris probes the serial ports during boot, and during this process, it toggles some handshaking lines used by dumb UPSes. As a result, particularly for simple signalling "dumb" UPSes it seems to kick it into a mode that makes the UPS think it's either in a calibration run, or some self-test mode. Since at this point we are really not communicating with the UPS, it's pretty hard to tell what happened. But it's easy to prevent this, and you should. Disconnect the UPS, and boot the system. When you get to a login prompt, log in as root. Type the following command:</para>
      <example xml:space="preserve">
eeprom com1-noprobe=true</example>
      <para>or</para>
      <example xml:space="preserve">
eeprom com2-noprobe=true</example>
      <para>depending on which com port your UPS is attached to. Then sync and shutdown the system normally, reattach the UPS, and reboot. This should solve the problem. However, we have some reports that recent versions of Solaris (7 &amp; 8) appear to have removed this eeprom option and there seems to be no way to suppress the serial port probing during boot.</para>
      <para>At this point, you should have a complete installation. The daemon will load automatically at the next boot. Watch for any error messages during boot, and check the event logs in <file>/etc/apcupsd</file>. If everything looks OK, you can try testing the package by removing power from the UPS. NOTE! if you have a voltage-signalling UPS, please run the first power tests with your computer plugged into the wall rather than into the UPS. This is because dumb serial-port UPSes have a tendency to power off if your configuration or cable are not correct.</para>
      <para>As a user, your input is very helpful in solving problems with the package, and providing suggestions and future directions for the development of the package. We are striving to provide a useful package that works across all platforms, and welcome your feedback.</para>
      <para>Best regards, and thanks for your interest and help, The Apcupsd Development Team.</para>
    </subsection>
  </node>
  <node>
    <nodename>Unknown System</nodename>
    <nodenext>Windows Systems with CYGWIN Installed</nodenext>
    <nodeprev>Sun Solaris</nodeprev>
    <nodeup>Operating System Specifics</nodeup>
    <subsection>
      <title>Unknown System</title>
      <para><indexterm index="cp">Unknown System</indexterm><indexterm index="cp">OS, Unknown System</indexterm> During the <code>./configure</code>, if apcupsd does not find one of the systems for which it has specific installation programs, it will set the Operating System to <strong>unknown</strong> and will use the incomplete installation scripts that are in <file> &lt;src&gt;/distributions/unknown/</file>. You will be on your own, or you can ask the developers list (apcupsd-users at lists.sourceforge.net) for installation instructions. This directory also contains a hint file for <emph>Linux From Scratch</emph>, which could be helpful for other systems as well.</para>
    </subsection>
  </node>
  <node>
    <nodename>Windows Systems with CYGWIN Installed</nodename>
    <nodeprev>Unknown System</nodeprev>
    <nodeup>Operating System Specifics</nodeup>
    <subsection>
      <title>Windows Systems with CYGWIN Installed</title>
      <para><indexterm index="cp">Windows</indexterm><indexterm index="cp">OS, Windows</indexterm> If you wish to build from the source, and if you have CYGWIN version 1.5.5 and GCC 2.95.3-5 installed, it is possible to build the Win32 version of apcupsd. Please don't try any other versions of CYGWIN as there were known problems.</para>
      <para>To date, the Win32 version has only been build on a Win98 SR2 and a WinXP system with the above CYGWIN environment and all the available CYGWIN tools loaded. In addition, the builds were done running under the <strong>bash</strong> shell. As time permits, we will experiment with other environments, and if any of you do build it from source, please let us know. The current CYGWIN environment was loaded using the CYGWIN setup.exe program, downloading ALL the latest binaries and installing them.</para>
      <para>We recommend that you run the <code>./configure</code> command with the following options:</para>
      <example xml:space="preserve">
./configure \
  --prefix=/apcupsd \
  --sbindir=/apcupsd/bin \
  --sysconfdir=/apcupsd/etc/apcupsd \
  --with-pid-dir=/apcupsd/etc/apcupsd \
  --mandir=/apcupsd \
  --with-cgi-bin=/apcupsd/etc/apcupsd/cgi \
  --enable-pthreads</example>
      <para>After which, you can do a:</para>
      <example xml:space="preserve">
make</example>
      <para>And to install apcupsd, do:</para>
      <example xml:space="preserve">
make install</example>
      <para>Finally, you should follow the Win32 (see <xref><xrefnodename>Installation on Windows</xrefnodename></xref>) installation instruction, skipping the part that describes unZipping the binary release.</para>
    </subsection>
  </node>
  <node>
    <nodename>After Installation</nodename>
    <nodenext>Configuration Examples</nodenext>
    <nodeprev>Building and Installing apcupsd</nodeprev>
    <nodeup>Basic User's Guide</nodeup>
    <chapter>
      <title>After Installation</title>
      <para><indexterm index="cp">After Installation</indexterm><indexterm index="cp">Installation, After installing</indexterm></para>
      <menu>
        <menuentry>
          <menunode>Checking Your Configuration File</menunode>
          <menutitle>Checking Your Configuration File</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Arranging for Reboot on Power-Up</menunode>
          <menutitle>Arranging for Reboot on Power-Up</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Making sure apcupsd Is Running</menunode>
          <menutitle>Making sure apcupsd Is Running</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Checking Your Configuration File</nodename>
    <nodenext>Arranging for Reboot on Power-Up</nodenext>
    <nodeup>After Installation</nodeup>
    <section>
      <title>Checking Your Configuration File</title>
      <para><indexterm index="cp">Checking Conf file</indexterm> Once you have installed apcupsd, either from a binary package or by building from source, your next step should be to inspect your <file>/etc/apcupsd/apcupsd.conf</file> file to make sure it is valid.</para>
      <para>You can read the complete reference on configuration directives (see <xref><xrefnodename>Configuration Directive Reference</xrefnodename></xref>), but if you are setting up a normal standalone configuration you should only need to check (and possibly fix) the first three items listed below.</para>
      <para>Your UPSTYPE should be the UPS's protocol type: dumb, apcsmart, usb, net, snmp, or ether.  Your UPSCABLE should be the type of cable you are using.  You should have gotten both from the table of types (see <xref><xrefnodename>type_table</xrefnodename></xref>); usually they will both be the string "usb".</para>
      <para>If you have a USB device, it is better not to specify a DEVICE directive by commenting it out. Apcupsd will automatically search for your device in the standard places. If you specify a DEVICE, it should be the name of the device (or device range) that apcupsd is to use to communicate with the UPS.  If you're using a USB UPS under Linux, you may leave the device name field blank and apcupsd will search all the standard locations for the UPS. You may also explicitly specify the device location as either <file>/dev/usb/hid/hiddev[0-15]</file> (on non-Red-Hat systems) or <file>/dev/usb/hiddev[0-15]</file> (on Red Hat systems), but this is not recommended.</para>
      <para>Note that you should enter "/dev/usb/hiddev[0-15]" literally as shown.  The "[0-15]" expression tells apcupsd to search all hiddev devices until it finds a UPS. You can restrict the search to a subset of devices by using something like "[0-4]", but keep in mind this will limit apcupsd's ability to locate the UPS if the kernel relocates it to a different device node, which happens occasionally during short power failures. Again, it is highly recommended to leave the DEVICE directive blank and let apcupsd find your device automatically.</para>
      <para>If the first time you execute apcupsd, you get a message to the effect that the Apcupsd USB driver is missing, it means that you most likely forgot to put <emph>&ndash;enable-usb</emph> on your <file>./configure</file> command line. If you loaded apcupsd from an rpm file, you may have selected the wrong one &ndash; please ensure that the word <emph>usb</emph> appears in the rpm package name.</para>
      <para>The next chapter (see <xref><xrefnodename>Configuration Examples</xrefnodename></xref>) of this manual provides you with the essential characteristics of each main type of configuration file.  After those elements are correct, apcupsd should run, and then it is only a matter of customization of your setup.</para>
    </section>
  </node>
  <node>
    <nodename>Arranging for Reboot on Power-Up</nodename>
    <nodenext>Making sure apcupsd Is Running</nodenext>
    <nodeprev>Checking Your Configuration File</nodeprev>
    <nodeup>After Installation</nodeup>
    <section>
      <title>Arranging for Reboot on Power-Up</title>
      <para><indexterm index="cp">Reboot on power up</indexterm><indexterm index="cp">Power up, reboot</indexterm> The final consideration for a automatic reboot after a full power down is to ensure that your computer will automatically reboot when the power is restored.</para>
      <para>This is not the normal behavior of most computers as shipped from the factory. Normally after the power is cut and restored, you must explicitly press a button for the power to actually be turned on. You can test your computer by powering it down; shutting off the power (pull the plug); then plugging the cord back in. If your computer immediately starts up, good. There is nothing more to do.</para>
      <para>If your computer does not start up, manually turn on the power (by pressing the power on button) and enter your computer's SETUP program (often by pressing DEL during the power up sequence; sometimes by pressing F10). You must then find and change the appropriate configuration parameter to permit instant power on.</para>
      <para>Normally, this is located under the <strong>BOOT</strong> menu item, and will be called something such as <strong>Restore on AC/Power Loss</strong> or <strong>Full-On</strong>. The exact words will vary according to the ROM BIOS provider. Generally you will have three options: <strong>Last State</strong>, <strong>Power On</strong>, and <strong>Power Off</strong>. Although <strong>Last State</strong> should normally work, we recommend setting your computers to <strong>Power On</strong>. This means that whenever the power is applied they are on. The only way to shut them off is to pull the plug or to have a special program that powers them off (<file>/sbin/poweroff</file> on Linux systems).</para>
      <para>If after making all the changes suggested above, you cannot get your computer to automatically reboot, you might examine your halt script (<file>/etc/rc.d/init.d/halt</file> in the case of Red Hat Linux) and see if the final line that performs the halt or reboot contains the <code>-p</code> option for powering down the computer. It should not with the logic used by apcupsd, but if it does, the <code>-p</code> option could cause your computer to power off while the UPS is still suppling power (i.e. before the UPS kills the power).  Depending on the setting of your BIOS, it may prevent your computer from restarting when the power returns. As already mentioned, this should not apply, but in case of problems it is worth a try.</para>
    </section>
  </node>
  <node>
    <nodename>Making sure apcupsd Is Running</nodename>
    <nodeprev>Arranging for Reboot on Power-Up</nodeprev>
    <nodeup>After Installation</nodeup>
    <section>
      <title>Making sure apcupsd Is Running</title>
      <para><indexterm index="cp">Checking running</indexterm> The simplest way to invoke  apcupsd is from the command line by entering:</para>
      <example xml:space="preserve">
/sbin/apcupsd</example>
      <para>To do so, you must be root. However, normally, you will want apcupsd started automatically when your system boots. On some systems with installation support (e.g. SUSE and Red Hat), the installation procedure will create a script file that you will be automatically invoked when your system reboots. On other systems, you will have to invoke apcupsd from your <file>rc.local</file> script.</para>
      <para>On Red Hat systems, this script file that automatically invokes apcupsd on system start and stops is: <file>/etc/rc.d/init.d/apcupsd</file></para>
      <para>To start apcupsd manually (as you will probably do immediately following the installation), enter the following:</para>
      <example xml:space="preserve">
/etc/rc.d/init.d/apcupsd start</example>
      <para>To understand how this file is automatically invoked at system startup and shutdown, see the man pages for chkconfig(8).</para>
      <para>On SUSE systems, the script file that automatically invokes apcupsd on system start and stops is <file>/etc/rc.d/apcupsd</file></para>
      <para>To start apcupsd manually (as you will probably do immediately following the installation), enter the following:</para>
      <example xml:space="preserve">
/etc/rc.d/apcupsd start</example>
      <para>Normally, when properly installed, apcupsd will be started and stopped automatically by your system. Unfortunately, the details are different for each system. Below, we give the commands for selected systems. Alternatively, there are simple stopapcupsd and startapcupsd scripts in the examples directory, or you can modify one of the scripts in the distributions directory to meet your needs.</para>
      <para>To stop apcupsd you can do the following:</para>
      <para>On Red Hat systems:</para>
      <example xml:space="preserve">
/etc/rc.d/init.d/apcupsd stop</example>
      <para>On SUSE systems:</para>
      <example xml:space="preserve">
/etc/rc.d/apcupsd stop</example>
      <para>Please see the Testing Apcupsd (see <xref><xrefnodename>Testing Apcupsd</xrefnodename></xref>) chapter for more details on insuring that apcupsd is running properly.</para>
    </section>
  </node>
  <node>
    <nodename>Configuration Examples</nodename>
    <nodenext>Testing Apcupsd</nodenext>
    <nodeprev>After Installation</nodeprev>
    <nodeup>Basic User's Guide</nodeup>
    <chapter>
      <title>Configuration Examples</title>
      <para><indexterm index="cp">Configuration, Examples</indexterm><indexterm index="cp">Examples, Configuration</indexterm></para>
      <menu>
        <menuentry>
          <menunode>A Simple USB Configuration</menunode>
          <menutitle>A Simple USB Configuration</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>A Simple Configuration for a SmartUPS</menunode>
          <menutitle>A Simple Configuration for a SmartUPS</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>A Simple Configuration for a Simple Signaling or Dumb</menunode>
          <menutitle>A Simple Configuration for a Simple Signaling or Dumb</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>A Simple Master Configuration</menunode>
          <menutitle>A Simple Master Configuration</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>A Simple Slave Configuration</menunode>
          <menutitle>A Simple Slave Configuration</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Variation on the Master/Slave Configuration</menunode>
          <menutitle>Variation on the Master/Slave Configuration</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>A Sample NIS Slave Configuration Using the Net Driver</menunode>
          <menutitle>A Sample NIS Slave Configuration Using the Net Driver</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>A Simple USB Configuration</nodename>
    <nodenext>A Simple Configuration for a SmartUPS</nodenext>
    <nodeup>Configuration Examples</nodeup>
    <section>
      <title>A Simple USB Configuration</title>
      <para><indexterm index="cp">Configuration, USB</indexterm><indexterm index="cp">USB, configuration</indexterm><indexterm index="cp">Example, USB conf</indexterm> If you have a USB UPS, and you have apcupsd version 3.10.7 or higher, the essential elements of your apcupsd.conf file should look like the following:</para>
      <example xml:space="preserve">
## apcupsd.conf v1.1 ##
UPSCABLE usb
UPSTYPE usb
DEVICE
LOCKFILE /var/lock
UPSCLASS standalone
UPSMODE disable</example>
      <para>Notice that we have not specified a device. In doing so, apcupsd will try all the well known USB ports. We strongly recommend you use this (empty device address) form unless you have a good reason to do otherwise.</para>
      <para>An alternate way of specifying the device is to specify a range of device addressess as follows:</para>
      <example xml:space="preserve">DEVICE /dev/usb/hid/hiddev[0-15]</example>
      <para>If you have more than one device, you may need to specify each device individually using absolute device paths. This is not, however, recommended.</para>
      <example xml:space="preserve">DEVICE /dev/usb/hiddev0</example>
      <para>Please use the explicit specifications of a device only if your know exactly what you are doing. In general, it is much easier to let apcupsd find the device itself.</para>
      <para>If you use the range specification, you should enter <strong>/dev/usb/hiddev[0-15]</strong> literally as shown.  The "[0-15]" expression tells apcupsd to search all hiddev devices until it finds a UPS. You can restrict the search to a subset of devices by using something like "[0-4]", but keep in mind this will limit apcupsd's ability to locate the UPS if the kernel relocates it to a different device node.</para>
      <para>On Debian systems, the <strong>hiddev</strong> devices are not automatically defined. As a consequence, you will need to run the <strong>make-hiddev</strong> script in the <strong>examples</strong> directory of the source.</para>
    </section>
  </node>
  <node>
    <nodename>A Simple Configuration for a SmartUPS</nodename>
    <nodenext>A Simple Configuration for a Simple Signaling or Dumb</nodenext>
    <nodeprev>A Simple USB Configuration</nodeprev>
    <nodeup>Configuration Examples</nodeup>
    <section>
      <title>A Simple Configuration for a SmartUPS</title>
      <para><indexterm index="cp">Configuration, SmartUPS</indexterm><indexterm index="cp">SmartUPS configuration</indexterm><indexterm index="cp">Example, SmartUPS conf</indexterm> If you have a Smart UPS using the cable supplied by APC, or you build a CUSTOM SMART cable outlined in the cables chapter, a very simple configuration file would look like the following:</para>
      <example xml:space="preserve">
## apcupsd.conf v1.1 ##
UPSCABLE smart
UPSTYPE smartups
DEVICE /dev/ttyS0
LOCKFILE /var/lock
UPSCLASS standalone
UPSMODE disable</example>
      <para>Normally you would have many more configuration directives to completely customize your installation, but this example shows you the minimum required.</para>
    </section>
  </node>
  <node>
    <nodename>A Simple Configuration for a Simple Signaling or Dumb</nodename>
    <nodenext>A Simple Master Configuration</nodenext>
    <nodeprev>A Simple Configuration for a SmartUPS</nodeprev>
    <nodeup>Configuration Examples</nodeup>
    <section>
      <title>A Simple Configuration for a Simple Signaling or Dumb</title>
      <para><indexterm index="cp">Configuration, dumb</indexterm><indexterm index="cp">dumb, configuration</indexterm><indexterm index="cp">Example, dumb conf</indexterm> If you have a simple signaling or dumb UPS such as a BackUPS, you will need to know exactly what cable you have and specify it on the UPSCABLE directive. Please see the list of UPSes versus cables in the beginning of this document for more information. The cable number is normally stamped in the plastic at one end of the cable. If you specify the wrong cable, it is very likely that at the first power failure, your computer will be immediately shutdown. This is an unfortunate consequence of the dumb signaling mode.  To avoid this, first replace <strong>/etc/apcupsd/apccontrol</strong> with <strong>safe.apccontrol</strong> found in the examples directory, then test until everything works correctly. Once you have the correct cable, be sure to remember to reinstall the correct apccontrol file and test that your computer is correctly shutdown during a power failure.</para>
      <example xml:space="preserve">
## apcupsd.conf v1.1 ##
UPSCABLE (number of cable you have)
UPSTYPE dumb
DEVICE /dev/ttyS0
LOCKFILE /var/lock
UPSCLASS standalone
UPSMODE disable</example>
      <para>If your cable does not have low battery detection, as is the case with some older models, you will also need to define <strong>TIMEOUT nnn</strong> where you set <strong>nn</strong> to be the number of seconds on a power failure after which a shutdown is effected.</para>
      <para>Normally you would have many more configuration directives to completely customize your installation, but this example shows you the minimum required.</para>
    </section>
  </node>
  <node>
    <nodename>A Simple Master Configuration</nodename>
    <nodenext>A Simple Slave Configuration</nodenext>
    <nodeprev>A Simple Configuration for a Simple Signaling or Dumb</nodeprev>
    <nodeup>Configuration Examples</nodeup>
    <section>
      <title>A Simple Master Configuration</title>
      <para><indexterm index="cp">Configuration, Master</indexterm><indexterm index="cp">Master, config example</indexterm><indexterm index="cp">Example, Master conf</indexterm> You have a Smart UPS using the cable supplied by APC and you want it to act as a master for another computer, which is powered by the same UPS. A very simple configuration file would look like the following:</para>
      <example xml:space="preserve">
## apcupsd.conf v1.1 ##
UPSCABLE smart
UPSTYPE smartups
DEVICE /dev/ttyS0
LOCKFILE /var/lock
UPSCLASS netmaster
UPSMODE net
NETTIME 10
NETPORT 6666
SLAVE slave1.mynetwork.com
SLAVE slave2.mynetwork.com</example>
      <para>Note, the main difference from the stand alone configuration is that you have specified <strong>UPSCLASS netmaster</strong> and <strong>UPSMODE net</strong>.  In addition, you have specified one or more slave machines.  In this mode of networking, (as opposed to using the net driver as described several sections below), your master knows the presence of all the slaves.  They carry on a very explicit communication, and the slaves are explicitly notified by the master of any important changes such as a shutdown.</para>
      <para>There is a simpler form of contolling slaves using the net driver with an apcupsd NIS server. The simpler form is much easier to configure. See: see <xref><xrefnodename>A Sample NIS Slave Configuration Using the Net Driver</xrefnodename></xref> below for details.</para>
    </section>
  </node>
  <node>
    <nodename>A Simple Slave Configuration</nodename>
    <nodenext>Variation on the Master/Slave Configuration</nodenext>
    <nodeprev>A Simple Master Configuration</nodeprev>
    <nodeup>Configuration Examples</nodeup>
    <section>
      <title>A Simple Slave Configuration</title>
      <para><indexterm index="cp">Slave Configuration</indexterm><indexterm index="cp">Configuration, Slave</indexterm><indexterm index="cp">Example, Slave conf</indexterm> You have a Smart UPS using the cable supplied by APC that is connected to the master machine configured above, and the master machine is running as a netmaster and has the address of your slave machine.  This slave machine has no serial port connection to the UPS, but is powered by the same UPS as the master.  A very simple configuration file would look like the following:</para>
      <example xml:space="preserve">
## apcupsd.conf v1.1 ##
UPSCABLE ether
UPSTYPE smartups
LOCKFILE /var/lock
UPSCLASS netslave
UPSMODE net
NETPORT 6666
MASTER master.mynetwork.com</example>
      <para>The main difference from the master configuration is that you have specified <strong>UPSCABLE ether</strong> and <strong>UPSCLASS netslave</strong>.  In addition, you have specified a single controlling master.</para>
      <para>Please note, there are reports that you <strong>must</strong> use <strong>UPSTYPE smartups</strong> on the slave even if the master is using <strong>UPSTYPE dumb</strong>. This is apparently some bug in the new dumb driver.</para>
      <para>In this configuration, the shutdown will be initiated by the master. It is also possible to specify BATTERYLEVEL, MINUTES, and TIMEOUT configuration directives in the Slave machine that will cause the slave to shutdown before the master. This can often be useful if the slave is less important than the master and you wish to reduce battery power consumption so that the master can remain up longer during a power outage.</para>
    </section>
  </node>
  <node>
    <nodename>Variation on the Master/Slave Configuration</nodename>
    <nodenext>A Sample NIS Slave Configuration Using the Net Driver</nodenext>
    <nodeprev>A Simple Slave Configuration</nodeprev>
    <nodeup>Configuration Examples</nodeup>
    <section>
      <title>Variation on the Master/Slave Configuration</title>
      <para><indexterm index="cp">Master/Slave variation</indexterm> It is also possible to have a Master/Slave configuration where the Slave is powered by a different UPS (or any other power source), but is nevertheless controlled (i.e.  shutdown) by the master.  The setup would be identical to the Master/Slave configuration files shown above.  The only difference is where the slave actually receives its power.  In effect, apcupsd does not know or care where the power really comes from.</para>
    </section>
  </node>
  <node>
    <nodename>A Sample NIS Slave Configuration Using the Net Driver</nodename>
    <nodeprev>Variation on the Master/Slave Configuration</nodeprev>
    <nodeup>Configuration Examples</nodeup>
    <section>
      <title>A Sample NIS Slave Configuration Using the Net Driver</title>
      <para><indexterm index="cp">Example, NIS slave</indexterm><indexterm index="cp">NIS slave conf</indexterm><indexterm index="cp">Configuration, NIS slave conf</indexterm> As opposed to the old master/slave mode demonstrated above, you can turn any computer into an NIS slave by configuring with the NIS network driver turned on <code>--enable-net</code>. The difference is that the NIS server has no explicit knowledge of the slaves. The NIS server makes its information available via the net (NIS), and the NIS slaves read it. When the NIS server is going to shutdown, it makes the information available to any NIS slave that polls it, but the NIS server does not explicitly call each NIS slave as is the case in the Master/Slave networking described several sections above.</para>
      <para>Running in this configuration, you can use any computer with apcupsd running the Network Information Server (NIS) as the server.  The NIS slave simply uses the NIS information to decide when to shutdown.  This is a much simpler mode than the older master/slave code mentioned above.</para>
      <para>The main apcupsd (NIS server) is connected to the UPS and has NIS turned on, but the configuration is a simple standalone as in the section <strong>A Simple Configuration for a SmartUPS</strong>. It doesn't matter how the UPS is connected to the computer (serial, USB, ...).</para>
      <para>For the NIS slave computer, you will have a configuration that looks something like what follows.  What is important is that you get the information from an <strong>ether</strong> cable over the network and you must specify the address of a "NIS server" that is running NIS (not the Master/Slave networking described above). The NIS slave apcupsd will then poll the NIS server at the NETTIME interval you specify to obtain the status.</para>
      <para>Here are a few words from Adam Kropelin concerning the difference between the Master/Slave networking and the NIS-based networking:</para>
      <para>Think of the difference as push (Master/Slave) vs. pull (NIS-based). In the case of M/S, the master makes all the shutdown decisions and notifies the slaves when they are to shut down or when some other interesting event happens. The slaves just do whatever the master says, whenever the master says to. On the other hand, with the NIS-based network config you basically "publish" the UPS status from one server and then your clients view that status and make their own decisions.</para>
      <para>Personally, I like the NIS-based approach because the master knows nothing about the slaves, thus there are fewer configuration files to keep in sync. I also like the flexibility of allowing each slave to make its own decision on when to shut down; some of my old clunker servers take quite a long while to shut down. There are problems reported occasionally with the M/S approach, where slaves sometimes lose contact with the master or vice-versa. I know improvements have been made in that code, but I still like the simplicity of using NIS.</para>
      <para>Another thing to think about is how you feel about running a network service like NIS on your firewall. My network is set up almost identically to yours and I chose to run the apcupsd "master" on a server in the DMZ and have the firewall just be a client of it. That way I don't have to run NIS on the firewall apcupsd instance.</para>
      <example xml:space="preserve">
## apcupsd.conf v1.1 ##
UPSCABLE ether
UPSTYPE net
LOCKFILE /var/lock
DEVICE server-network-address:3551
UPSCLASS standalone
UPSMODE disable
NETTIME 10</example>
      <para>where on the <strong>DEVICE</strong> directive you replace the <code>server-network-address</code> with the fully qualified domain name or IP address of a machine running apcupsd with NIS enabled (and normally, but not required, connected to a UPS). The :3551 that follows the NIS server address is the port to use. The default is 3551, but older versions of apcupsd used port 7000.</para>
      <para>Please do not confuse this NIS server/slave mode with the old master/slave network configuration that is described above.  This is a master/slave setup, but much simpler (the NIS server does not know about the slaves), and any NIS server, even a slave, can act as a server to a slave that listens to it.</para>
      <para>The <strong>NETTIME</strong> directive defines the time interval that the slave uses to poll the NIS server. If you set this too large, your slave may not see the change in state of the NIS server before the server has shutdown. Normally, you have at least 30 seconds of grace time between the time the NIS server decides to shutdown and the time it no longer responds. Your slave must poll during this interval.</para>
      <para>This mode works principally by reading the STATFLAG record that is sent by the NIS (present in the output of apcaccess). The low 16 bits are the standard APC status flag, and the upper 16 bits represent the internal state of apcupsd, so the slave can see when the power fails and know when to shutdown.</para>
      <para>As with the Master/Slave configuration, any slave run using the Net driver will shutdown when its own timers expire or when the NIS server shuts down, whichever occurs first. This means that if you want the slave to shutdown before the server, you need only set BATTERYLEVEL, or any of the other values on the slave for a faster shutdown than the values defined on the NIS server.</para>
    </section>
  </node>
  <node>
    <nodename>Testing Apcupsd</nodename>
    <nodenext>Troubleshooting Your Installation</nodenext>
    <nodeprev>Configuration Examples</nodeprev>
    <nodeup>Basic User's Guide</nodeup>
    <chapter>
      <title>Testing Apcupsd</title>
      <para><indexterm index="cp">Testing</indexterm> The following testing procedures apply for the most part to apcsmart UPSes, whether USB or serial.  If you have a dumb voltage-signalling UPS, your testing procedures will be somewhat different, and you should see the section on Testing Serial UPSes (see <xref><xrefnodename>Testing Serial-Line UPSes</xrefnodename></xref>).</para>
      <menu>
        <menuentry>
          <menunode>Process-Status Test</menunode>
          <menutitle>Process-Status Test</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Logging Test</menunode>
          <menutitle>Logging Test</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>apcaccess Test</menunode>
          <menutitle>apcaccess Test</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Communications Test</menunode>
          <menutitle>Communications Test</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Simulated Power Fail Test</menunode>
          <menutitle>Simulated Power Fail Test</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>System Shutdown Test</menunode>
          <menutitle>System Shutdown Test</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Full Power Down Test</menunode>
          <menutitle>Full Power Down Test</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Shutdown Sequence</menunode>
          <menutitle>Shutdown Sequence</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>apctest</menunode>
          <menutitle>apctest</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Process-Status Test</nodename>
    <nodenext>Logging Test</nodenext>
    <nodeup>Testing Apcupsd</nodeup>
    <section>
      <title>Process-Status Test</title>
      <para><indexterm index="cp">Process Status Testing</indexterm><indexterm index="cp">Testing, Process Status</indexterm> After you start apcupsd, execute the following command:</para>
      <example xml:space="preserve">
ps fax</example>
      <para>or the equivalent for your system. If you are running on Linux and using the fork()ing version of apcupsd, you should something similar to the following output.</para>
      <example xml:space="preserve">
4492 ?        S      0:00 apcmain       -f /etc/apcupsd/apcupsd.conf
4496 ?        S      0:00  \_ apcser        -f /etc/apcupsd/apcupsd.conf
4497 ?        S      0:00  \_ apcnis        -f /etc/apcupsd/apcupsd.conf</example>
      <para>This indicates that apcupsd is up and running and has started the two (default) child processes. If you are running with the pthreaded version, now the default, and 2.4.x kernels, you will still see the three processes (see below).  However, under 2.6.x kernels, the threads do not have independent process ids so everything will be compressed into a single <strong>ps</strong> line.</para>
      <table>
        <tableitem>
          <tableterm>apcmain</tableterm>
          <item>
            <para>is the main program that waits until it receives a termination signal (SIGTERM) or one of the child processes dies.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>apcser</tableterm>
          <item>
            <para>is the process that manages the serial port and takes any actions (generates events) that are necessary as a result of a change of state of the UPS.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>apcnis</tableterm>
          <item>
            <para>is the Network information server process that provides EVENTS and STATUS information over the network. This information is used by the CGI programs.</para>
          </item>
        </tableitem>
      </table>
      <para>If you are running on a non-Linux system, or using pthreads on a Linux system (recommended), your output will probably not show the names of the processes and will appear more like the following:</para>
      <example xml:space="preserve">
632 ?        S      0:00 /sbin/apcupsd -f /etc/apcupsd/apcupsd.conf
841 ?        S      0:00  \_ /sbin/apcupsd -f /etc/apcupsd/apcupsd.conf
842 ?        S      0:00      \_ /sbin/apcupsd -f /etc/apcupsd/apcupsd.conf</example>
      <para>If you see only one instance of apcupsd running, don't worry about it as this is normal on most non-Linux systems, and on Linux 2.6.x kernels.</para>
      <para>If you do not find that apcupsd is in the above list, the most likely problem is a configuration file glitch.  If no messages were printed, you should check your system log (normally <file>/var/log/messages</file> where you will find one or messages indicating the nature of the problem.</para>
    </section>
  </node>
  <node>
    <nodename>Logging Test</nodename>
    <nodenext>apcaccess Test</nodenext>
    <nodeprev>Process-Status Test</nodeprev>
    <nodeup>Testing Apcupsd</nodeup>
    <section>
      <title>Logging Test</title>
      <para><indexterm index="cp">Testing, Logging</indexterm><indexterm index="cp">Logging, Testing</indexterm> Once you have established that the proper processes are running, do a tail of the system log file, normally <file>/var/log/messages</file>:</para>
      <example xml:space="preserve">
tail /var/log/messages</example>
      <para>You should see output that looks similar to the following:</para>
      <example xml:space="preserve">
Dec 5 17:01:05 matou apcupsd[5917]: apcupsd 3.7.2
startup succeeded</example>
      <para>And if you have configured the network information server, you should also see:</para>
      <example xml:space="preserve">
Dec 5 17:01:05 polymatou apcupsd[5975]: apcserver
startup succeeded</example>
      <para>These messages should also appear in the temporary file (<file>/etc/apcupsd/apcupsd.events</file>) if you are using the default configuration file. If you have installed the RPM, they will probably be in <file>/var/log/apcupsd.events</file>.</para>
    </section>
  </node>
  <node>
    <nodename>apcaccess Test</nodename>
    <nodenext>Communications Test</nodenext>
    <nodeprev>Logging Test</nodeprev>
    <nodeup>Testing Apcupsd</nodeup>
    <section>
      <title>apcaccess Test</title>
      <para><indexterm index="cp">Testing, apcaccess</indexterm><indexterm index="cp">apcaccess Test</indexterm> This test consists of running <code>apcaccess</code> to see if apcupsd is properly updating its internal variables.  Please note that if you are running a pthreaded version of apcupsd, which you should be since the non-pthreaded version is no longer supported, (installed from rpm or <code>--enable-pthreads</code> on the <code>./configure</code> line), you must enable the apcupsd Network Information Server in your configuration file for <strong>apcaccess</strong> to work.  This is done by setting:</para>
      <example xml:space="preserve">
NETSERVER on
NISPORT 3551</example>
      <para role="continues">in your <strong>apcupsd.conf</strong> file.</para>
      <para>To run the apcaccess test, use the following command:</para>
      <example xml:space="preserve">
apcaccess status</example>
      <para>Depending on the type of UPS you have, you will get slightly different output, but an example For a Smart-UPS is as follows:</para>
      <example xml:space="preserve">
APC      : 001,048,1088
DATE     : Fri Dec 03 16:49:24 EST 1999
HOSTNAME : daughter
RELEASE  : 3.7.2
CABLE    : APC Cable 940-0024C
MODEL    : APC Smart-UPS 600
UPSMODE  : Stand Alone
UPSNAME  : SU600
LINEV    : 122.1 Volts
MAXLINEV : 123.3 Volts
MINLINEV : 122.1 Volts
LINEFREQ : 60.0 Hz
OUTPUTV  : 122.1 Volts
LOADPCT  :  32.7 Percent Load Capacity
BATTV    : 26.6 Volts
BCHARGE  : 095.0 Percent
MBATTCHG : 15 Percent
TIMELEFT :  19.0 Minutes
MINTIMEL : 3 Minutes
SENSE    : Medium
DWAKE    : 000 Seconds
DSHUTD   : 020 Seconds
LOTRANS  : 106.0 Volts
HITRANS  : 129.0 Volts
RETPCT   : 010.0 Percent
STATFLAG : 0x08 Status Flag
STATUS   : ONLINE
ITEMP    : 34.6 C Internal
ALARMDEL : Low Battery
LASTXFER : Unacceptable Utility Voltage Change
SELFTEST : NO
STESTI   : 336
DLOWBATT : 05 Minutes
DIPSW    : 0x00 Dip Switch
REG1     : N/A
REG2     : N/A
REG3     : 0x00 Register 3
MANDATE  : 03/30/95
SERIALNO : 13035861
BATTDATE : 05/05/98
NOMOUTV  : 115.0
NOMBATTV :  24.0
HUMIDITY : N/A
AMBTEMP  : N/A
EXTBATTS : N/A
BADBATTS : N/A
FIRMWARE : N/A
APCMODEL : 6TD
END APC  : Fri Dec 03 16:49:25 EST 1999</example>
      <para>For a simple signaling or dumb UPS such as BackUPS, your output will be very minimal as follows:</para>
      <example xml:space="preserve">
APC      : 001,012,0319
DATE     : Mon Feb 18 09:11:50 CST 2002
RELEASE  : 3.8.5
UPSNAME  : UPS_IDEN
CABLE    : APC Cable 940-0128A
MODEL    : BackUPS
UPSMODE  : Stand Alone
STARTTIME: Mon Feb 18 09:11:45 CST 2002
LINEFAIL : OK
BATTSTAT : OK
STATFLAG : 0x008 Status Flag
END APC  : Mon Feb 18 09:15:01 CST 2002</example>
      <para>If you see the above output, it is a good sign that apcupsd is working. Assuming that the output looks reasonable, check the following variables:</para>
      <para>A very disturbing tendance is for some of the newer (Mar 2004) RS and ES UPSes to have no Voltage information.  This is annoying bug not serious.  On the other hand, some of those UPSes now have no battery charge information (BCHARGE).  If BCHARGE is zero in your listing and you are running a Smart or a USB UPS, then you will have to set the BATTERYLEVEL directive in your apcupsd.conf file to -1.</para>
      <table>
        <tableitem>
          <tableterm>LINEV</tableterm>
          <item>
            <para>This is the line voltage and it should be a value that is appropriate for your equipment. In the USA, it is typically about 120 Volts while in Europe, it is about 220 Volts.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>BATTV</tableterm>
          <item>
            <para>Unless you have additional battery packs, this should be near 24 Volts plus or minus 5 Volts.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>STATUS</tableterm>
          <item>
            <para>This is the status of the UPS and it should normally be <strong>ONLINE</strong>.</para>
          </item>
        </tableitem>
      </table>
      <para>If you see a message to the effect of:</para>
      <example xml:space="preserve">
attach_shmarea: shared memory version mismatch (or UPS not yet ready to report)</example>
      <para>or if all the displayed values are zero, you have not waited long enough. Wait a bit longer and then re-execute the <code>apcaccess status</code> command.</para>
      <para>If you see a message to the effect of:</para>
      <example xml:space="preserve">
APCACCESS FATAL ERROR in apcaccess.c at line 336
tcp_open: cannot connect to server localhost on port 3551.</example>
      <para>It means that you have probably not enabled the Network Information Server in your configuration file for <strong>apcaccess</strong> to work. This is done by setting:</para>
      <example xml:space="preserve">
NETSERVER on
NISPORT 3551</example>
      <para role="continues">in your <strong>apcupsd.conf</strong> file.</para>
    </section>
  </node>
  <node>
    <nodename>Communications Test</nodename>
    <nodenext>Simulated Power Fail Test</nodenext>
    <nodeprev>apcaccess Test</nodeprev>
    <nodeup>Testing Apcupsd</nodeup>
    <section>
      <title>Communications Test</title>
      <para><indexterm index="cp">Testing, Communications</indexterm><indexterm index="cp">Communications Testing</indexterm> At this point, you should ensure that apcupsd is handling the connection to the UPS correctly. This test assumes you have a UPS that speaks apcsmart protocol, over either USB or a serial port.  If you have an old-style voltage-signaling UPS, please skip to the next section (Simulated Power Fail Test).</para>
      <para>When apcupsd detects a problem, it generates an EVENT, which consists of sending a message to the system log then invoking the <strong>apccontrol</strong> script (normally in <file>/etc/acpupsd/apccontrol</file>) to handle the event.</para>
      <para>In order to create an event, remove the serial port plug from the back of your computer or from the back of the UPS. Within 6 seconds, apcupsd should detect the lack of serial port communications and broadcast a <code>wall</code> message indicating that the serial port communications was lost:</para>
      <para>Warning communications lost with UPS lost.</para>
      <para>At the same time, it sends the same message to the system log and to the temporary EVENTS file (<file>/etc/apcupsd/apcupsd.events</file>).</para>
      <para>Plug the serial port plug back into your computer, and within about 12 seconds, apcupsd should reestablish communications and broadcast and log the following message:</para>
      <para>Communications with UPS restored.</para>
      <para>If these messages are logged but not broadcast, either you have your mesg permission set to <emph>no</emph> (see <strong>man wall</strong> or <strong>man mesg</strong>), or there is a problem with apccontrol. If you are running a window manager such as GNOME and don't have a console window open, you may not receive the <code>wall</code> messages. However, you should find them in your system log file (normally <file>/var/log/messages</file> and in the temporary EVENTS file, <file>/etc/apcupsd/apcupsd.events</file>. For example, to observe these events in the temporary EVENTS file, you might do a</para>
      <example xml:space="preserve">
tail -f /etc/apcupsd/apcupsd.events</example>
      <para>Note, if you have installed from the RPM, the proper events file may be <file>/var/log/apcupsd.events</file>. You can find the actual filename by checking your <file>apcupsd.conf</file> file.</para>
      <para>before running the test.</para>
      <para>If you do not observe these messages, you should correct this problem before proceeding with additional tests.</para>
    </section>
  </node>
  <node>
    <nodename>Simulated Power Fail Test</nodename>
    <nodenext>System Shutdown Test</nodenext>
    <nodeprev>Communications Test</nodeprev>
    <nodeup>Testing Apcupsd</nodeup>
    <section>
      <title>Simulated Power Fail Test</title>
      <para><indexterm index="cp">Testing, Simulate Power Fail</indexterm><indexterm index="cp">Simulate Power Fail Test</indexterm> At this point, you should verify that in the event of a power fail apcupsd properly calls apccontrol. This test is appropriate for all models of UPSes (smart or dumb).</para>
      <para>To avoid the possibility that apcupsd might shut down your system, locate where apccontrol resides on your system (normally, <file>/etc/apcupsd/apccontrol</file>. Move this script to another location e.g. <file>apccontrol.save</file> and replace it with the script found in <file>examples/safe.apccontrol</file>. When that is done, ensure that your UPS battery is fully charged and that you have at least 5 minutes of remaining runtime on the batteries. This can be done by examining the values of the <strong>BATTCHG</strong> and <strong>TIMELEFT</strong> variables in the printout of <code>apcaccess status</code>.</para>
      <para>Athough this should not be necessary, as an extra precaution, you can shutdown your machine, remove the plug from the UPS you are testing, and plug your machine into another UPS or directly into the wall. Doing so, will ensure that the UPS doesn't cut the power to your machine at a bad time. Remember at the end of the testing to plug your machine back into the UPS.</para>
      <para>You can also minimize the risk from an unexpected shutdown by using a journaling filesystem such as Linux's EXT3.  All modern disk drives park themselves safely when they power down, rather than ploughing up oxide on your disk's recording surface.  Thus, unexpected power less has to hit very narrow timing windows in order to trash an EXT3 transaction.</para>
      <para>To begin the test, pull the power plug from the UPS. The first time that you do this, psychologically it won't be easy, but after you have pulled the plug a few times, you may even come to enjoy it. If all goes well, apcupsd should detect the power failure and print several warning messages. The first should appear after 5 to 6 seconds and read:</para>
      <example xml:space="preserve">
Warning power loss detected.</example>
      <para>Then generally 6 seconds later, apcupsd is sure that it isn't a transient effect, so it sends:</para>
      <example xml:space="preserve">
Power failure. Running on UPS batteries.</example>
      <para>After a few more seconds (total around 15 seconds), plug the power cord back in and ensure that apcupsd is aware that the power has returned. It should print:</para>
      <example xml:space="preserve">
Power has returned...</example>
      <para>If you do not observe the above messages, please correct the situation before proceeding. The most likely cause of problems are:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>apcupsd doesn't recognize the power failure because the configuration directives are not correct. E.g. wrong cable.</para>
        </item>
        <item>
          <para>The file <file>/etc/apcupsd/apccontrol</file> doesn't exist or is not marked as executable.</para>
        </item>
      </itemize>
      <para>At this point, we recommend that you do a simulated power down of your system. If you are adventuresome or have been through this before, skip to the next section in this manual and do the real power fail shutdown. If you continue with the simulated power down and if all goes well, apcupsd will go through all the motions without actually shutting down the system. Continue using the safe apccontrol that you installed. Edit the configuration file <file>apcupsd</file> and change the value of <strong>TIMEOUT</strong> from 0 to something like 30. Doing so will cause apcupsd to attempt to shutdown the system 30 seconds after it detects a power failure. Once this change has been made, you must stop and restart apcupsd for the new configuration value to take effect.</para>
      <para>Once again, pull the power plug, and if all goes as expected, apcupsd should attempt to shutdown the system about 30 seconds after it detects the power failure. All the messages should be displayed by <code>wall</code> or by the <code>tail -f</code> command. The precise message is determined by what is printed in <file>/etc/apcupsd/apccontrol</file> for the <strong>doshutdown</strong> event.  Though it varies from system to system, it will generally be something like:</para>
      <example xml:space="preserve">
Beginning Shutdown Sequence</example>
      <para>When apcupsd this message prints, reconnect the power.  apcupsd should detect that the power has been restored and attempt to cancel the shutdown.</para>
      <para><strong>IMPORTANT</strong> after this test, please replace the changed apccontrol and <file>apcupsd.conf</file> with the original files.</para>
    </section>
  </node>
  <node>
    <nodename>System Shutdown Test</nodename>
    <nodenext>Full Power Down Test</nodenext>
    <nodeprev>Simulated Power Fail Test</nodeprev>
    <nodeup>Testing Apcupsd</nodeup>
    <section>
      <title>System Shutdown Test</title>
      <para><indexterm index="cp">System Shutdown test</indexterm><indexterm index="cp">Testing, System Shutdown</indexterm> This is an intermediate test that you can do, for all UPS models before doing the Full Power Down Test. First modify the <file>/etc/apcupsd/apccontrol</file> file so that in the <strong>killpower)</strong> case, the line that re-executes apcupsd with the <code>--killpower</code> option is commented out. The original line probably looks something like:</para>
      <example xml:space="preserve">
${APCUPSD} --killpower</example>
      <para>when it is commented out, it looks like:</para>
      <example xml:space="preserve">
#${APCUPSD}--killpower</example>
      <para>Now when you pull the power plug, and either the timer expires or the batteries are exhausted (see the next section for more details), the system should be fully shutdown.</para>
      <para>After performing this test, please be sure to restore <file>/etc/apcupsd/apccontrol</file> to its previous state.</para>
    </section>
  </node>
  <node>
    <nodename>Full Power Down Test</nodename>
    <nodenext>Shutdown Sequence</nodenext>
    <nodeprev>System Shutdown Test</nodeprev>
    <nodeup>Testing Apcupsd</nodeup>
    <section>
      <title>Full Power Down Test</title>
      <para><indexterm index="cp">Power down test</indexterm><indexterm index="cp">Testing, Power down</indexterm> To complete the testing, you should do a power fail shutdown of your system. This test is applicable to all UPS models. Please do a backup of your system or take other precautions before attempting this to avoid the possibility of lost data due to a problem (I have been through this at least 10 times and never once had problems, but we all know that someday something will go wrong).</para>
      <para>Before proceeding, please ensure that your halt script or the equivalent has been properly updated by the install process to contain the logic to call <code>apcupsd --killpower</code> when it detects a power failure situation (the presence of a <file>/etc/powerfail</file> file). See the <xref><xrefnodename>Building and Installing apcupsd</xrefnodename></xref> of this manual, or the README files for additional details about the halt modifications necessary.</para>
      <para>When you are ready to do the test, either simply pull the plug and wait for the batteries to become exhausted, or set the <strong>TIMEOUT</strong> configuration directive to something like 60 so that the system will shutdown before the batteries are exhausted. We recommend doing the full shutdown without using <strong>TIMEOUT</strong> to correctly simulate a real power failure, but the choice is yours (I did it once here, but now use TIMEOUT 30).</para>
      <para>If all goes well, your system should be shutdown before the batteries are completely exhausted and the UPS should be powered off by apcupsd. Please be aware that if you do the full power down, you must ensure that your UPS is totally powered off.  Otherwise, it may have been given the command to power off, but due to a long grace period it is still waiting. If you were to reboot your computer during the grace period, the UPS could then suddenly turn off the power (this happened to me). To avoid this problem, always wait for your UPS to power itself off, or power if off manually before restarting your computer. On my system, the UPS is configured as at the factory to have a 180 second grace period before shutting off the power. During this type of testing, 180 seconds <strong>seems</strong> like an eternity, so please take care to either wait or manually power off your UPS. To determine what grace period is programmed into your UPS EEPROM, run <code>apcaccess eprom</code> and look at the "Shutdown grace delay".</para>
    </section>
  </node>
  <node>
    <nodename>Shutdown Sequence</nodename>
    <nodenext>apctest</nodenext>
    <nodeprev>Full Power Down Test</nodeprev>
    <nodeup>Testing Apcupsd</nodeup>
    <section>
      <title>Shutdown Sequence</title>
      <para><indexterm index="cp">Shutdown Sequence</indexterm> If you experienced so problems with the above testing procedures, or if you are porting apcupsd to another system, or you are simply curious, you may want to know exactly what is going on during the shutdown process. If so, please see the Shutdown Sequence (see <xref><xrefnodename>Shutdown Sequence &lt;1&gt;</xrefnodename></xref>) section of this manual.</para>
    </section>
  </node>
  <node>
    <nodename>apctest</nodename>
    <nodeprev>Shutdown Sequence</nodeprev>
    <nodeup>Testing Apcupsd</nodeup>
    <section>
      <title>apctest</title>
      <para><indexterm index="cp">apctest</indexterm> apctest is a program that allows you to talk directly to your UPS and run certain low-level tests, display all know values from the UPS's EEPROM, perform a battery runtime calibration, program the EEPROM (serial connection only), and enter in TTY mode with the UPS. Here we describe how to use it for a USB or apcsmart UPS; see <xref><xrefnodename>Using apctest on Serial-Line UPSses</xrefnodename></xref> for a description of how to use it with a voltage-signalling UPS.</para>
      <para>Shutdown apcupsd if it is running. Make sure your <strong>/etc/apcupsd/apcupsd.conf</strong> file has <strong>UPSTYPE smart</strong> and <strong>UPSCABLE</strong> has one of the smart cables that are supported.</para>
      <para>Normally apctest will have been built but not installed, so you must execute it from the <file>&lt;apcupsd-source&gt;/src</file> directory. You can explicitly build it on Unix with:</para>
      <example xml:space="preserve">
cd &lt;apcupsd-source-directory&gt;
make apctest
./apctest</example>
      <para>or on Windows systems with:</para>
      <example xml:space="preserve">
make apctestwin32
./apctest</example>
      <para>It will read your installed apcupsd.conf configuration (so it knows where to find the UPS) and then it will present you with the following output:</para>
      <example xml:space="preserve">
2003-07-07 11:19:21 apctest 3.10.6 (07 July 2003) redhat
Checking configuration ...
Attached to driver: apcsmart
sharenet.type = DISABLE
cable.type = CUSTOM_SMART

You are using a SMART cable type, so I'm entering SMART test mode
mode.type = SMART
Setting up serial port ...
Creating serial port lock file ...
Hello, this is the apcupsd Cable Test program.
This part of apctest is for testing Smart UPSes.
Please select the function you want to perform.

1) Query the UPS for all known values
2) Perform a Battery Runtime Calibration
3) Abort Battery Calibration
4) Monitor Battery Calibration progress
5) Program EEPROM
6) Enter TTY mode communicating with UPS
7) Quit

Select function number: 1
</example>
      <para>Item 1 will probe the UPS for all values known to apcupsd and present them in rather raw format. This output can be useful for providing technical support if you are having problems with your UPS.</para>
      <para>Item 2 will perform a Battery Runtime Calibration. This test will only be performed if your battery is 100% charged. Running the test will cause the batteries to be discharged to approximately 30% of capacity. The exact number depends on the UPS model. In any case, apctest will abort the test if it detects that the battery charge is 20% or less.</para>
      <para>The advantage of doing this test is that the UPS will be able to recalibrate the remaining runtime counter that it maintains in its firmware. As your batteries age, they tend to hold less of a charge, so the runtime calibration may not be accurate after several years.</para>
      <para>We recommend that perform a Battery Calibration about once a year. You should not perform this calibration too often since discharging the batteries tends to shorten their lifespan.</para>
      <para>Item 3 can be used to abort a Battery Calibration in progress, if you some how became disconnected.</para>
      <para>Item 4 can be used to restart the monitoring of a Battery Calibration if you should some how become disconnected during the test.</para>
      <para>Item 5 is used to program the EEPROM. Please see the <xref><xrefnodename>Configuration Directives Used to Set the UPS EPROM</xrefnodename><xrefprinteddesc>Configuration Directives Used to Set the UPS EPROM</xrefprinteddesc></xref> chapter of this manual for the details.</para>
      <para>Item 6 will initiate a direct communication between your terminal and the UPS at which point, you can enter raw UPS commands. Please be aware that you should be careful what commands you enter because you can cause your UPS to suddenly shutdown, or you can modify the EEPROM in a way to disable your UPS. The details of the raw Smart mode UPS commands can be found in the UPS Bible (see <xref><xrefnodename>APC smart protocol</xrefnodename></xref>) chapter of this manual.</para>
      <para>Item 7 will terminate apctest.</para>
    </section>
  </node>
  <node>
    <nodename>Troubleshooting Your Installation</nodename>
    <nodenext>Monitoring and Tuning your UPS</nodenext>
    <nodeprev>Testing Apcupsd</nodeprev>
    <nodeup>Basic User's Guide</nodeup>
    <chapter>
      <title>Troubleshooting Your Installation</title>
      <para><indexterm index="cp">Troubleshooting (see problems)</indexterm><indexterm index="cp">Problems</indexterm></para>
      <menu>
        <menuentry>
          <menunode>Known Problems with USB UPSes</menunode>
          <menutitle>Known Problems with USB UPSes</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Known Problems with USB UPSes</nodename>
    <nodeup>Troubleshooting Your Installation</nodeup>
    <section>
      <title>Known Problems with USB UPSes</title>
      <para><indexterm index="cp">Problems, USB</indexterm></para>
      <menu>
        <menuentry>
          <menunode>Some Cheaper Models Do Not Have Battery Charge</menunode>
          <menutitle>Some Cheaper Models Do Not Have Battery Charge</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Reconnection does not clean up the lockfile</menunode>
          <menutitle>Reconnection does not clean up the lockfile</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Power Off [killpower] of UPS Does Not Work</menunode>
          <menutitle>Power Off (killpower) of UPS Does Not Work</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>apcupsd Cannot Reconnect After a Reboot</menunode>
          <menutitle>apcupsd Cannot Reconnect After a Reboot</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Some Cheaper Models Do Not Have Battery Charge</nodename>
    <nodenext>Reconnection does not clean up the lockfile</nodenext>
    <nodeup>Known Problems with USB UPSes</nodeup>
    <subsection>
      <title>Some Cheaper Models Do Not Have Battery Charge</title>
      <para><indexterm index="cp">Problems, no Battery charge</indexterm> Unfortunately, some cheaper USB models do not seem to report BCHARGE in the apcaccess output listing, which means with a standard conf file, your system will be immediately shutdown. To correct this, set the BATTERYLEVEL directive in your apcupsd.conf file to -1.</para>
      <para>Some of these cheaper USB UPSes also do not report the Voltage. This is annoying but does not cause the unit to malfunction.</para>
    </subsection>
  </node>
  <node>
    <nodename>Reconnection does not clean up the lockfile</nodename>
    <nodenext>Power Off [killpower] of UPS Does Not Work</nodenext>
    <nodeprev>Some Cheaper Models Do Not Have Battery Charge</nodeprev>
    <nodeup>Known Problems with USB UPSes</nodeup>
    <subsection>
      <title>Reconnection does not clean up the lockfile</title>
      <para><indexterm index="cp">Problems, lock file not cleaned up</indexterm> If either you disconnect the UPS or it disconnects because of some electrical problem, it will most certainly reconnect with a different device number. Apcupsd will detect this and reconnect properly. However, apcupsd does not release the old device (USB port) lock file and create a new one. This is not too serious.</para>
    </subsection>
  </node>
  <node>
    <nodename>Power Off [killpower] of UPS Does Not Work</nodename>
    <nodenext>apcupsd Cannot Reconnect After a Reboot</nodenext>
    <nodeprev>Reconnection does not clean up the lockfile</nodeprev>
    <nodeup>Known Problems with USB UPSes</nodeup>
    <subsection>
      <title>Power Off (killpower) of UPS Does Not Work</title>
      <para><indexterm index="cp">Problems, Power off</indexterm><indexterm index="cp">Problems, killpower</indexterm> Currently (as of 3.10.6) the code to power off the UPS works only if you have a Linux kernel version 2.4.22 or greater, or you have applied the patches in the examples directory to your kernel.</para>
    </subsection>
  </node>
  <node>
    <nodename>apcupsd Cannot Reconnect After a Reboot</nodename>
    <nodeprev>Power Off [killpower] of UPS Does Not Work</nodeprev>
    <nodeup>Known Problems with USB UPSes</nodeup>
    <subsection>
      <title>apcupsd Cannot Reconnect After a Reboot</title>
      <para><indexterm index="cp">Problems, reconnect</indexterm> If apcupsd does not connect to the USB port when you reboot, it is probably the appropriate kernel modules are not getting loaded correctly.</para>
      <para>You can check this by bringing up your system, fiddling around until you get apcupsd to work with the UPS, then doing <code>cat /proc/modules</code> andnd save the output some place. Then reboot your computer and before you do anything else, do the <code>cat /proc/modules</code> again. Most likely you will find some of the usb modules are missing in the second listing.</para>
      <para>There are two solutions:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>Ensure that you have the hotplug program loaded. It should fix the problem. This is a bit of magic, so we are not exactly sure how it works. The rpm I (Kern) have loaded is: hotplug-2001_02_14-15</para>
          <para>You might want to read the man page on hotplug, and it might be necessary to <code>cp /etc/hotplug/usb.rc /etc/init.d/hotplug</code> to get it fully working.</para>
        </item>
        <item>
          <para>You can explicitly force the appropriate usb modules to be loaded by adding:</para>
          <example xml:space="preserve">
/sbin/modprobe &lt;missing-module-name&gt;</example>
          <para>in the <file>/etc/rc.d/init.d/apcupsd</file> script just after the <strong>start)</strong> case (at about line 17). This will force the modules to be loaded before apcupsd is invoked.</para>
        </item>
      </itemize>
    </subsection>
  </node>
  <node>
    <nodename>Monitoring and Tuning your UPS</nodename>
    <nodenext>Maintaining Your UPS</nodenext>
    <nodeprev>Troubleshooting Your Installation</nodeprev>
    <nodeup>Basic User's Guide</nodeup>
    <chapter>
      <title>Monitoring and Tuning your UPS</title>
      <para><indexterm index="cp">Monitoring</indexterm><indexterm index="cp">Tuning</indexterm> After you have verified that your UPS is working correctly, you will probably want to query the state of its health occasionally. The tools apcupsd gives you to do this include one command-line utility (apcaccess) and a GUI you can use through a Web browser.  You can also use apctest to tune some parameters of the UPS itself.</para>
      <menu>
        <menuentry>
          <menunode>apcaccess</menunode>
          <menutitle>apcaccess</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Apcupsd Notification and Events</menunode>
          <menutitle>Apcupsd Notification and Events</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>hid-ups and USB Specific Information</menunode>
          <menutitle>hid-ups and USB Specific Information</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>apcupsd Network Monitoring [CGI] Programs</menunode>
          <menutitle>apcupsd Network Monitoring (CGI) Programs</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Setting up and Testing the CGI Programs</menunode>
          <menutitle>Setting up and Testing the CGI Programs</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Configuring Your EEPROM</menunode>
          <menutitle>Configuring Your EEPROM</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>apcaccess</nodename>
    <nodenext>Apcupsd Notification and Events</nodenext>
    <nodeup>Monitoring and Tuning your UPS</nodeup>
    <section>
      <title>apcaccess</title>
      <para><indexterm index="cp">apcaccess</indexterm> apcaccess is a program (normally found in <file>/sbin/apcaccess</file>) that permits you to print out the complete status of your UPS. Although there are a number of command line arguments (<strong>eprom, reconfig, status, slave, shutdown</strong>), all except <strong>eprom</strong> and <strong>status</strong> are under development and hence do not work reliably.</para>
      <para>If you have built apcupsd with pthreads enabled (default), apcaccess will use the Network Information Server to obtain the necessary information for the <strong>status</strong> and <strong>eeprom</strong> commands. This is because in the pthreaded version, there is no IPC shared memory. In this case (pthreads enabled), you can specify a second optional argument to apcaccess in the form of host:port, where the :port is optional. The default is <strong>localhost:3551</strong>. Please note that in versions prior to 3.10.6, the default NIS port was 7000, so if you are mixing versions, you will need to take a lot of care to ensure that all components are using the same port.</para>
      <para>To enable the apcupsd Network Information Server, which is normally the default, you set:</para>
      <example xml:space="preserve">
NETSERVER on
NISPORT 3551</example>
      <para role="continues">in your <strong>apcupsd.conf</strong> file.</para>
      <menu>
        <menuentry>
          <menunode>apcaccess status</menunode>
          <menutitle>apcaccess status</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>apcaccess eprom</menunode>
          <menutitle>apcaccess eprom</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </section>
  </node>
  <node>
    <nodename>apcaccess status</nodename>
    <nodenext>apcaccess eprom</nodenext>
    <nodeup>apcaccess</nodeup>
    <subsection>
      <title>apcaccess status</title>
      <para><indexterm index="cp">apcaccess status</indexterm><indexterm index="cp">status, apcaccess</indexterm> As mentioned above, the full form of the command is:</para>
      <example xml:space="preserve">
apcaccess status localhost:3551</example>
      <para>where only apcaccess status should normally be needed. localhost may be replaced by any machine name, fully qualified domain name, or IP address, which means that apcaccess can access any UPS on the network running the Network Information Server.</para>
      <para>The <strong>status</strong> command line option of apcaccess will produce a full printout of all the <strong>STATUS</strong> variables used by apcupsd. This can be very helpful for checking the condition of your UPS and to know whether or not apcupsd is properly connected to it. For a complete description of the variables and their meanings, please read the Status Format (see <xref><xrefnodename>apcupsd Status Logging</xrefnodename></xref>) section of the Technical Reference.</para>
      <para>Please note that if you invoke apcaccess within the first 30 seconds of launching apcupsd, you will likely get an error message such as:</para>
      <example xml:space="preserve">
APCACCESS FATAL ERROR in apcipc.c at line 325
attach_shmarea: shared memory version mismatch</example>
      <para>This is because apcupsd is still in the process of initializing the shared memory segment used to communicate between the two processes. There is also a small window of time after which the memory segment is properly initialized but before the UPS has been completely polled. If you invoke apcaccess during this period, you will get the STATUS output, but with many of the values zero. The solution is to wait at least 30 seconds after starting apcupsd before launching apcaccess.</para>
      <para>To invoke apcaccess, enter:</para>
      <example xml:space="preserve">
apcaccess status</example>
      <para>For a SmartUPS 1000 apcaccess will emit the following output:</para>
      <example xml:space="preserve">
DATE     : Fri Dec 03 12:34:26 CET 1999
HOSTNAME : matou
RELEASE  : 3.7.0-beta-1
CABLE    : Custom Cable Smart
MODEL    : SMART-UPS 1000
UPSMODE  : Stand Alone
UPSNAME  : UPS_IDEN
LINEV    : 232.7 Volts
MAXLINEV : 236.6 Volts
MINLINEV : 231.4 Volts
LINEFREQ : 50.0 Hz
OUTPUTV  : 232.7 Volts
LOADPCT  :  11.4 Percent Load Capacity
BATTV    : 27.7 Volts
BCHARGE  : 100.0 Percent
MBATTCHG : 5 Percent
TIMELEFT : 112.0 Minutes
MINTIMEL : 3 Minutes
SENSE    : Low
DWAKE    : 060 Seconds
DSHUTD   : 180 Seconds
LOTRANS  : 204.0 Volts
HITRANS  : 253.0 Volts
RETPCT   : 050.0 Percent
STATFLAG : 0x08 Status Flag
STATUS   : ONLINE
ITEMP    : 29.2 C Internal
ALARMDEL : Low Battery
LASTXFER : U command or Self Test
SELFTEST : NO
STESTI   : 336
DLOWBATT : 02 Minutes
DIPSW    : 0x00 Dip Switch
REG1     : 0x00 Register 1
REG2     : 0x00 Register 2
REG3     : 0x00 Register 3
MANDATE  : 01/05/99
SERIALNO : GS9902009459
BATTDATE : 01/05/99
NOMOUTV  : 230.0
NOMBATTV :  24.0
HUMIDITY : N/A
AMBTEMP  : N/A
EXTBATTS : 0
BADBATTS : N/A
FIRMWARE : 60.11.I
APCMODEL : IWI
END APC  : Fri Dec 03 12:34:33 CET 1999</example>
      <para>For the various smaller, cheaper APC USB UPSes, such as the CS, ES, ..., you will get much of the information that is presented above, but not all of it. For example, you will not get MAXLINEV, MINLINEV, LINEFREQ, ... and in particular, the LOADPCT will be zero when you are running on mains. LOADPCT will display when the UPS is on batteries.  You must remember that the non-SmartUPSes are much simpler (and less expensive) and therefore produce less information.</para>
    </subsection>
  </node>
  <node>
    <nodename>apcaccess eprom</nodename>
    <nodeprev>apcaccess status</nodeprev>
    <nodeup>apcaccess</nodeup>
    <subsection>
      <title>apcaccess eprom</title>
      <para><indexterm index="cp">apcaccess eeprom</indexterm><indexterm index="cp">eeprom, apcaccess</indexterm> The <strong>eprom</strong> command line option for apcaccess allows you to examine the current values of your UPS' EPROM as well as to know the permitted values that can be set in the EPROM. For information about changing these values, see the section on tuning EEPROM parameters (see <xref><xrefnodename>Configuring Your EEPROM</xrefnodename></xref>).</para>
      <para>A typical output from <code>apcaccess eprom</code> is:</para>
      <example xml:space="preserve">
Valid EPROM values for the SMART-UPS 1000

                       Config        Current  Permitted
Description              Directive     Value    Values
===================================================================
Upper transfer voltage   HITRANSFER    253      253 264 271 280
Lower transfer voltage   LOTRANSFER    208      196 188 208 204
Return threshold         RETURNCHARGE  15       00 15 50 90
Output voltage on batts  OUTPUTVOLTS   230      230 240 220 225
Sensitivity              SENSITIVITY   H        H M L L
Low battery warning      LOWBATT       2        02 05 07 10
Shutdown grace delay     SLEEP         180      020 180 300 600
Alarm delay              BEEPSTATE     T        0 T L N
Wakeup delay             WAKEUP        60       000 060 180 300
Self test interval       SELFTEST      336      336 168 ON  OFF</example>
    </subsection>
  </node>
  <node>
    <nodename>Apcupsd Notification and Events</nodename>
    <nodenext>hid-ups and USB Specific Information</nodenext>
    <nodeprev>apcaccess</nodeprev>
    <nodeup>Monitoring and Tuning your UPS</nodeup>
    <section>
      <title>Apcupsd Notification and Events</title>
      <para><indexterm index="cp">Notification</indexterm><indexterm index="cp">Events</indexterm> When a major event is generated within apcupsd, control is passed to the script <file>apccontrol</file> normally found in <file>/etc/apcupsd/apccontrol</file>. The event name, and a number of other important parameters are passed to the script.</para>
      <para>The major function of the <file>apccontrol</file> script is to performa a shutdown of the system (as well as the killpower operation). In addition, another major task for this script is to notify you by email when certain events such as powerfail occur.</para>
      <para>Since <file>apccontrol</file> is a script, you can customize it to your own needs using any text editor. To do so, you must have a minimal knowledge of Unix shell programming. In addition, another feature is that you can write your own scripts that will be automatically called by <file>apccontrol</file> before any of its own code is executed. Details of the events and how to program them are contained in the Advanced topics section entitled Customizing Event Handling (see <xref><xrefnodename>Customizing Event Handling</xrefnodename></xref>).</para>
    </section>
  </node>
  <node>
    <nodename>hid-ups and USB Specific Information</nodename>
    <nodenext>apcupsd Network Monitoring [CGI] Programs</nodenext>
    <nodeprev>Apcupsd Notification and Events</nodeprev>
    <nodeup>Monitoring and Tuning your UPS</nodeup>
    <section>
      <title>hid-ups and USB Specific Information</title>
      <para><indexterm index="cp">hid-ups</indexterm> The UPS has an internal set of timers and remaining capacity counters, which it uses to determine when to shutdown. These are in addition to the apcupsd counters BATTERYLEVEL and MINUTES.  As a consequence, apcupsd will shutdown on the first limit that triggers (either an apcupsd limit, or a UPS limit). The UPS internal counter equivalent to BATTERYLEVEL can be found in the hid-ups report as RemainingCapacityLimit, which is typically factory set to 10 percent. In addition, the Low Battery signal is normally given by the UPS when less than 2 minutes of run time remain.</para>
    </section>
  </node>
  <node>
    <nodename>apcupsd Network Monitoring [CGI] Programs</nodename>
    <nodenext>Setting up and Testing the CGI Programs</nodenext>
    <nodeprev>hid-ups and USB Specific Information</nodeprev>
    <nodeup>Monitoring and Tuning your UPS</nodeup>
    <section>
      <title>apcupsd Network Monitoring (CGI) Programs</title>
      <para><indexterm index="cp">Network monitoring</indexterm><indexterm index="cp">Monitoring</indexterm><indexterm index="cp">CGI programs</indexterm> With this release, there are five CGI programs (multimon.cgi, multimoncss.cgi, upsstats.cgi, upsfstats.cgi, and upsimage.cgi). To have them properly installed, you must run the <code>./configure</code> command with <code>--enable-cgi</code> and you should specify an installation directory with <code>--with-cgi-bin=</code> or load them manually. To install the Cascading Style Sheet, which is used by multimoncss.cgi, you must use the <code>--with-css-dir=</code> option. The default directory for installation of the CGI programs is <file>/etc/apcupsd</file>, which is not really where you want them if you are going to use them. Normally, they should go in the <file>cgi-bin</file> of your Web server.</para>
      <para>Once built and loaded, they will give you the status of your UPS or UPSes over the network.</para>
      <para>Normally only <code>multimon.cgi</code> or multimoncss.cgiis directly invoked by the user. However, it is possible to directly invoke upsstats.cgi and upsfstats.cgi. upsimage.cgi should never be directly invoked as it is used by upsstats.cgi to produce the bar charts.</para>
    </section>
  </node>
  <node>
    <nodename>Setting up and Testing the CGI Programs</nodename>
    <nodenext>Configuring Your EEPROM</nodenext>
    <nodeprev>apcupsd Network Monitoring [CGI] Programs</nodeprev>
    <nodeup>Monitoring and Tuning your UPS</nodeup>
    <section>
      <title>Setting up and Testing the CGI Programs</title>
      <para><indexterm index="cp">Setup CGI programs</indexterm><indexterm index="cp">Testing CGI programs</indexterm></para>
      <menu>
        <menuentry>
          <menunode>Network Information Server [NIS]</menunode>
          <menutitle>Network Information Server (NIS)</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>multimon_cgi</menunode>
          <menutitle>multimon.cgi</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>upsstats_cgi</menunode>
          <menutitle>upsstats.cgi</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>_/upsstats_cgi</menunode>
          <menutitle>./upsstats.cgi</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>upsfstatus_cgi</menunode>
          <menutitle>upsfstatus.cgi</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Working Example</menunode>
          <menutitle>Working Example</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Client Test Program</menunode>
          <menutitle>Client Test Program</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>A Tip from Carl Erhorn for Sun Systems</menunode>
          <menutitle>A Tip from Carl Erhorn for Sun Systems</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Credits</menunode>
          <menutitle>Credits</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Security Issues</menunode>
          <menutitle>Security Issues</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Network Information Server [NIS]</nodename>
    <nodenext>multimon_cgi</nodenext>
    <nodeup>Setting up and Testing the CGI Programs</nodeup>
    <subsection>
      <title>Network Information Server (NIS)</title>
      <para><indexterm index="cp">Network Information Server</indexterm><indexterm index="cp">NIS</indexterm> Before using multimon and the other CGI programs, first ensure that apcupsd is configured to run the Network Information Server. This is done by setting <strong>NETSERVER on</strong> in <file>/etc/apcupsd/apcupsd.conf</file>.  This switch is on by default.  If you are unsure of its state, see the section at the end of this chapter concerning the Client test program.</para>
      <para>Next you must edit the <file>hosts</file> file <file>/etc/apcupsd/hosts.conf</file> and at the end, add the name of the hosts you want to monitor and a label string for them. Kern Sibbald uses <file>multimon.conf</file> unmodified from what is on the source distribution. However, he has modified the hosts.conf file to contain the following three lines:</para>
      <example xml:space="preserve">
MONITOR matou "Server"
MONITOR polymatou "Backup server"
MONITOR deuter  "Disk server"</example>
      <para>matou, polymatou, and deuter are the network names of the three machines currently running apcupsd. Please note that the network names may either be IP addresses or fully qualified domain names.  The network name (or IP address) may optionally be followed by <strong>:&lt;port&gt;</strong>, where the port is the NIS port address you wish to use. This is useful if you are running multiple copies of apcupsd on the same system or if you are running in a mixed vendor environment where the NIS port assignments differ. An example could be the following:</para>
      <example xml:space="preserve">
MONITOR matou "Server"
MONITOR polymatou "Backup server"
MONITOR deuter  "Disk server"
MONITOR polymatou:7001 "APC USB UPS"</example>
      <para>where the USB copy of apcupsd has been configured to use port 7001 (with <code>--with-nis-port=7001</code> on the <code>./configure</code> or by modifying <file>apcupsd.conf</file>). Note, the default NIS port is 3551 on most platforms.</para>
      <para>To test multimon.cgi, you can execute it as non-root directly from the source cgi build directory. To do so, enter at a shell prompt:</para>
      <example xml:space="preserve">
./multimon.cgi</example>
      <para>If everything is set up correctly, it will print a bunch of HTML with the values of the machines that you have put in the <file>hosts.conf</file> file. It should look something like the following (note, only a small portion of the output is reproduced here):</para>
      <example xml:space="preserve">
Content-type: text/html

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
     "http://www.w3.org/TR/REC-html40/loose.dtd"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Multimon: UPS Status Page&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY BGCOLOR="#FFFFFF"&gt;
&lt;TABLE BGCOLOR="#50A0A0" ALIGN=CENTER&gt;
&lt;TR&gt;&lt;TD&gt;
&lt;TABLE CELLPADDING=5&gt;
&lt;TR&gt;
&lt;TH COLSPAN=10 BGCOLOR="#60B0B0"&gt;
&lt;FONT SIZE="+2"&gt;APCUPSD UPS Network Monitor&lt;/FONT&gt;
&lt;BR&gt;Sun Jan 16 12:07:27 CET 2000&lt;/TH&gt;
&lt;/TR&gt;
&lt;TR BGCOLOR="#60B0B0"&gt;
&lt;TH COLSPAN=1&gt;System&lt;/TH&gt;
&lt;TH COLSPAN=1&gt;Model&lt;/TH&gt;
&lt;TH COLSPAN=1&gt;Status&lt;/TH&gt;
...</example>
      <para>If you do not get similar output, check the permissions of the <file>/etc/apcupsd</file> directory and of those of <file>/etc/apcupsd/hosts.conf</file> to ensure that your web server can access it. At many sites such as mine, the Apache server is not running as root, so you must be careful to ensure that that <file>/etc/apcupsd/hosts.conf</file> and <file>/etc/apcupsd/multimon.conf</file> are world readable.</para>
      <para>To invoke multimon in your Web browser, enter:</para>
      <para>http://&lt;your-site&gt;/cgi-bin/multimon.cgi</para>
      <para>You should get something similar to the screen shot shown below.</para>
      <para>If you wish additional control over the colors, type faces, and sizes of the multimon output, you might wish to use multimoncss.cgi in place of multimon. In this case, you simply edit the <file>multimon.css</file> file to specify the styles you prefer.  There are several sample Style Sheet files in the <file>cgi</file> subdirectory of the source tree.</para>
      <para>To see a working example of the these programs, visit <uref><urefurl>http://www.apcuspd.com/cgi-bin/multimon.cgi</urefurl><urefdesc>http://www.apcupsd.com/cgi-bin/multimon.cgi</urefdesc></uref> or <uref><urefurl>http://www.apcupsd.com/cgi-bin/multimoncss.cgi</urefurl><urefdesc>http://www.apcupsd.com/cgi-bin/multimoncss.cgi</urefdesc></uref></para>
    </subsection>
  </node>
  <node>
    <nodename>multimon_cgi</nodename>
    <nodenext>upsstats_cgi</nodenext>
    <nodeprev>Network Information Server [NIS]</nodeprev>
    <nodeup>Setting up and Testing the CGI Programs</nodeup>
    <subsection>
      <title>multimon.cgi</title>
      <para><indexterm index="cp">multimon</indexterm><indexterm index="cp">CGI, multimon</indexterm> This program monitors multiple UPSes at the same time. A typical output of multimon.cgi as displayed in your Web browser might look like the following:</para>
      <image width="" height="" name="multimon" extension="png"><alttext></alttext></image>
      <para>The machines monitored as well as the values and their column headings are all configurable (see <file>/etc/apcupsd/hosts.conf</file> and <file>/etc/apcupsd/multimon.conf</file>)</para>
    </subsection>
  </node>
  <node>
    <nodename>upsstats_cgi</nodename>
    <nodenext>_/upsstats_cgi</nodenext>
    <nodeprev>multimon_cgi</nodeprev>
    <nodeup>Setting up and Testing the CGI Programs</nodeup>
    <subsection>
      <title>upsstats.cgi</title>
      <para><indexterm index="cp">upsstats</indexterm><indexterm index="cp">CGI, upsstats</indexterm> By clicking on the <strong>system</strong> name in the <strong>multimon.cgi</strong> display, you will invoke upsstats.cgi for the specified system, which will produce a bar graph display of three of the monitored values. For example,</para>
      <image width="" height="" name="status" extension="png"><alttext></alttext></image>
      <para>You can display different bar graphs by selecting different variables from the drop down menus at the top of each of the three bar graphs.</para>
      <para>As with multimon, if you have your local host configured in the <file>/etc/apcupsd/hosts.conf</file> file, you can execute it from a Unix shell from the source cgi directory as follows:</para>
    </subsection>
  </node>
  <node>
    <nodename>_/upsstats_cgi</nodename>
    <nodenext>upsfstatus_cgi</nodenext>
    <nodeprev>upsstats_cgi</nodeprev>
    <nodeup>Setting up and Testing the CGI Programs</nodeup>
    <subsection>
      <title>./upsstats.cgi</title>
      <para><indexterm index="cp">upssstats</indexterm><indexterm index="cp">CGI, upssstats</indexterm> As with multimon, quite a few lines of html should then be displayed.</para>
    </subsection>
  </node>
  <node>
    <nodename>upsfstatus_cgi</nodename>
    <nodenext>Working Example</nodenext>
    <nodeprev>_/upsstats_cgi</nodeprev>
    <nodeup>Setting up and Testing the CGI Programs</nodeup>
    <subsection>
      <title>upsfstatus.cgi</title>
      <para><indexterm index="cp">upsfstatus</indexterm><indexterm index="cp">CGI, upsfstatus</indexterm> If you would like to see all of the STATUS variables available over the network, click on the <strong>Data</strong> field of the desired system, and your browser will display something like the following:</para>
      <example xml:space="preserve">
APC      : 001,048,1109
DATE     : Thu Dec 02 17:27:21 CET 1999
HOSTNAME : matou.sibbald.com
RELEASE  : 3.7.0-beta-1
CABLE    : Custom Cable Smart
MODEL    : SMART-UPS 1000
UPSMODE  : Stand Alone
UPSNAME  : UPS_IDEN
LINEV    : 223.6 Volts
MAXLINEV : 224.9 Volts
MINLINEV : 222.3 Volts
LINEFREQ : 50.0 Hz
OUTPUTV  : 223.6 Volts
LOADPCT  :   6.2 Percent Load Capacity
BATTV    : 27.9 Volts
BCHARGE  : 100.0 Percent
MBATTCHG : 5 Percent
TIMELEFT : 167.0 Minutes
MINTIMEL : 3 Minutes
SENSE    : High
DWAKE    : 060 Seconds
DSHUTD   : 020 Seconds
LOTRANS  : 196.0 Volts
HITRANS  : 253.0 Volts
RETPCT   : 050.0 Percent
STATFLAG : 0x08 Status Flag
STATUS   : ONLINE
ITEMP    : 35.1 C Internal
ALARMDEL : Low Battery
LASTXFER : U command or Self Test
SELFTEST : NO
STESTI   : 336
DLOWBATT : 02 Minutes
DIPSW    : 0x00 Dip Switch
REG1     : 0x00 Register 1
REG2     : 0x00 Register 2
REG3     : 0x00 Register 3
MANDATE  : 01/11/99
SERIALNO : GS9903001147
BATTDATE : 01/11/99
NOMOUTV  : 230.0
NOMBATTV :  24.0
HUMIDITY : N/A
AMBTEMP  : N/A
EXTBATTS : 0
BADBATTS : N/A
FIRMWARE : 60.11.I
APCMODEL : IWI
END APC  : Thu Dec 02 17:27:25 CET 1999</example>
      <para>You should get pretty much the same output mixed in with html if you execute upsfstats.cgi directly from a Unix shell in the cgi subdirectory as explained above for upsstats.cgi and multimon.cgi.</para>
    </subsection>
  </node>
  <node>
    <nodename>Working Example</nodename>
    <nodenext>Client Test Program</nodenext>
    <nodeprev>upsfstatus_cgi</nodeprev>
    <nodeup>Setting up and Testing the CGI Programs</nodeup>
    <subsection>
      <title>Working Example</title>
      <para><indexterm index="cp">CGI, working example</indexterm><indexterm index="cp">Example, CGI</indexterm> To see a working example of the above programs, visit <uref><urefurl>http://www.apcupsd.com/cgi-bin/multimon.cgi</urefurl><urefdesc>http://www.apcupsd.com/cgi-bin/multimon.cgi</urefdesc></uref>.</para>
    </subsection>
  </node>
  <node>
    <nodename>Client Test Program</nodename>
    <nodenext>A Tip from Carl Erhorn for Sun Systems</nodenext>
    <nodeprev>Working Example</nodeprev>
    <nodeup>Setting up and Testing the CGI Programs</nodeup>
    <subsection>
      <title>Client Test Program</title>
      <para><indexterm index="cp">Client Test program</indexterm> When your Network Information Server is up and running, you can test it using a simple program before attempting to access the server via your Web server. The test program is called <file>client.c</file> and can be found in the <file>examples</file> subdirectory of the source distribution. To build the program, when in the examples directory, use something like the following:</para>
      <example xml:space="preserve">
cc client.c ../lib/libapc.a -o client</example>
      <para>Then execute it:</para>
      <example xml:space="preserve">
./client &lt;host&gt;[:&lt;port&gt;] [&lt;command&gt;]</example>
      <para>Where <strong>host</strong> is the name of the host or the IP address of the host running the Network Information Server. The default is the local host. You may optionally specify a port address separated from the host name with a colon. You may also optionally specify a single command to be executed. If you specify a command, that command will be executed and the client program will exit. This is a very simple and useful way of pulling the <strong>status</strong> or <strong>events</strong> data into another program such as Perl.</para>
      <para>If no error messages are printed, it has most likely established contact with your server. Anything that you type as standard input will be passed to the server, and anything the server sends back will be printed to standard output. There are currently two commands recognized by the server: <strong>events</strong> and <strong>status</strong>.  Hence the following commands:</para>
      <example xml:space="preserve">
./client
status
events
xyz
^D</example>
      <para>should produce the status listing (the same as produced by <code>apcaccess status</code>), followed by the list of the last 10 events (in response to the <strong>events</strong> command), and finally <strong>Invalid command</strong> in response to the <strong>xyz</strong> input, which is not a valid command. The control-D terminates the <strong>client</strong> program.</para>
      <para>The purpose of this program is to show you how to write your own program that can determine the status of apcupsd and act any way you want (e.g. send you email messages on certain events like line voltage boost, ...).</para>
    </subsection>
  </node>
  <node>
    <nodename>A Tip from Carl Erhorn for Sun Systems</nodename>
    <nodenext>Credits</nodenext>
    <nodeprev>Client Test Program</nodeprev>
    <nodeup>Setting up and Testing the CGI Programs</nodeup>
    <subsection>
      <title>A Tip from Carl Erhorn for Sun Systems</title>
      <para><indexterm index="cp">Tip</indexterm> It is possible to run the CGI code to monitor your UPS using the answerbook HTTP server that runs on Solaris. As long as your server has the Answerbook2 web server installed and running, you can insert the cgi scripts into the cgi directory of the web server, and access the cgi using something like:</para>
      <para>http://hostname:8888/cgi/multimon.cgi</para>
    </subsection>
  </node>
  <node>
    <nodename>Credits</nodename>
    <nodenext>Security Issues</nodenext>
    <nodeprev>A Tip from Carl Erhorn for Sun Systems</nodeprev>
    <nodeup>Setting up and Testing the CGI Programs</nodeup>
    <subsection>
      <title>Credits</title>
      <para>Many thanks go to Russell Kroll &lt;rkroll at exploits.org&gt; who wrote the CGI programs to work with his UPS Monitoring system named <uref><urefurl>http://www.exploits.org/nut/library/apcsmart.html</urefurl><urefdesc>Network UPS Tools (NUT)</urefdesc></uref>. Thanks also to Jonathan Benson &lt;jbenson at technologist.com&gt; for initially adapting the upsstatus.cgi program to work with apcupsd.</para>
      <para>We have enhanced the bar graph program and hope that our changes can be useful to the original author in his project.</para>
    </subsection>
  </node>
  <node>
    <nodename>Security Issues</nodename>
    <nodeprev>Credits</nodeprev>
    <nodeup>Setting up and Testing the CGI Programs</nodeup>
    <subsection>
      <title>Security Issues</title>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para><strong>apcupsd</strong> runs as root.</para>
        </item>
        <item>
          <para>If you have <strong>NETSERVER ON</strong> in your <file>apcupsd.conf</file> file (which is the deault), be aware that anyone on the network can read the status of your UPS.  This may or may not pose a problem. If you don't consider this information privileged, as is the case for me, there is little risk. In addition, if you have a firewall between your servers and the Internet, crackers will not have access to your UPS information.  Additionally, you can restrict who can access your apcupsd server by using inted to run the sservice and using access control lists with a TCP wrapper or by configuring TCP wrappers in apcupsd (see below for TCP Wrapper details).</para>
        </item>
        <item>
          <para>If you are running master/slave networking with a single UPS powering multiple machines, be aware that it is possible for someone to simulate the master and send a shutdown request to your slaves. The slaves do check that the network address of the machine claiming to be the master is that same as the address returned by DNS corresponding to the name of the master as specified in your configuration file.</para>
        </item>
      </itemize>
      <menu>
        <menuentry>
          <menunode>TCP Wrappers</menunode>
          <menutitle>TCP Wrappers</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </subsection>
  </node>
  <node>
    <nodename>TCP Wrappers</nodename>
    <nodeup>Security Issues</nodeup>
    <subsubsection>
      <title>TCP Wrappers</title>
      <para><indexterm index="cp">Wrappers, TCP</indexterm><indexterm index="cp">TCP wrappers</indexterm> As of apcupsd version 3.8.2, TCP Wrappers are implemented if you turn them on when configuring (<code>./configure --with-libwrap</code>).  With this code enabled, you may control who may access your apcupsd via TCP connections (the Network Information Server, and the Master/Slave code). This control is done by modifying the file: <file>/etc/hosts.allow</file>. This code is implemented but untested. If you use it, please send us some feedback.</para>
    </subsubsection>
  </node>
  <node>
    <nodename>Configuring Your EEPROM</nodename>
    <nodeprev>Setting up and Testing the CGI Programs</nodeprev>
    <nodeup>Monitoring and Tuning your UPS</nodeup>
    <section>
      <title>Configuring Your EEPROM</title>
      <para><indexterm index="cp">eeprom, configuring</indexterm><indexterm index="cp">Configuring, eeprom</indexterm> If you have a SmartUPS, there are depending on the UPS at least 12 different values stored in the EEPROM that determine how the UPS reacts to various conditions such as high line voltage, low line voltage, power down grace periods, etc.</para>
      <para>In general, for the moment, we do not recommend that you change your EEPROM values unless absolutely necessary. There have been several reported cases of problems setting the Low Transfer Voltage. Consequently, if at all possible, do not attempt to change this value.</para>
      <para>If despite these warnings, you must change your EEPROM, we recommend connecting your UPS to a Windows or NT machine running PowerChute and making the changes.</para>
      <menu>
        <menuentry>
          <menunode>apcupsd No Longer Configures EEPROM</menunode>
          <menutitle>apcupsd No Longer Configures EEPROM</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Using apctest to Configure Your EEPROM</menunode>
          <menutitle>Using apctest to Configure Your EEPROM</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </section>
  </node>
  <node>
    <nodename>apcupsd No Longer Configures EEPROM</nodename>
    <nodenext>Using apctest to Configure Your EEPROM</nodenext>
    <nodeup>Configuring Your EEPROM</nodeup>
    <subsection>
      <title>apcupsd No Longer Configures EEPROM</title>
      <para>Unlike version 3.8.6, apcupsd version 3.10.x no longer has code to program the EEPROM. Instead we have implemented interactive EEPROM modification code in the apctest program. EEPROM programming must be done with apcupsd stopped so that apctest can access the UPS. In addition, EEPROM programming is currently implemented only for UPSes using the Smart protocol running in serial mode. Perhaps at a later time when the appropriate kernel modifications are standard, we will extend EEPROM programming to USB models.</para>
      <para>Before changing your EEPROM, you should make a printed copy of the current state of your UPS before any EEPROM changes so that you can check the changes that you have made. Do so by printing a copy of the output from <code>apcaccess status</code> and also print a copy of the output from <code>apcaccess eprom</code>.</para>
      <para>Once this is done, choose which values of the EEPROM you want to change. Typical output from apcaccess should look like the following:</para>
      <example xml:space="preserve">
apcaccess eeprom

Valid EPROM values for the SMART-UPS 1000

                       Config        Current  Permitted
Description              Directive     Value    Values
================================================================
Upper transfer voltage   HITRANSFER    253      253 264 271 280
Lower transfer voltage   LOTRANSFER    196      196 188 208 204
Return threshold         RETURNCHARGE  0        00 15 50 90
Output voltage on batts  OUTPUTVOLTS   230      230 240 220 225
Sensitivity              SENSITIVITY   H        H M L L
Low battery warning      LOWBATT       2        02 05 07 10
Shutdown grace delay     SLEEP         20       020 180 300 600
Alarm delay              BEEPSTATE     0        0 T L N
Wakeup delay             WAKEUP        0        000 060 180 300
Self test interval       SELFTEST      336      336 168 ON  OFF</example>
      <para>where the Current Value will depend on how your UPS is configured, and the Permitted Values will depend on what UPS model you have.</para>
    </subsection>
  </node>
  <node>
    <nodename>Using apctest to Configure Your EEPROM</nodename>
    <nodeprev>apcupsd No Longer Configures EEPROM</nodeprev>
    <nodeup>Configuring Your EEPROM</nodeup>
    <subsection>
      <title>Using apctest to Configure Your EEPROM</title>
      <para><indexterm index="cp">eeprom, apctest</indexterm><indexterm index="cp">apctest setting eeprom</indexterm> To make the EEPROM changes with apctest you must first stop the apcupsd daemon</para>
      <para>apctest is not installed during the installation process, so to use it you will need to do the following after having built apcupsd:</para>
      <example xml:space="preserve">
cd &lt;apcupsd-source&gt;/src
su
&lt;root-password&gt;
./apctest</example>
      <para>At that point, you should get output similar to the following:</para>
      <example xml:space="preserve">
2003-07-07 11:19:21 apctest 3.10.6 (07 July 2003) redhat
Checking configuration ...
Attached to driver: apcsmart
sharenet.type = DISABLE
cable.type = CUSTOM_SMART

You are using a SMART cable type, so I'm entering SMART test mode
mode.type = SMART
Setting up serial port ...
Creating serial port lock file ...
Hello, this is the apcupsd Cable Test program.
This part of apctest is for testing Smart UPSes.
Please select the function you want to perform.

1) Query the UPS for all known values
2) Perform a Battery Runtime Calibration
3) Abort Battery Calibration
4) Monitor Battery Calibration progress
5) Program EEPROM
6) Enter TTY mode communicating with UPS
7) Quit

Select function number:</example>
      <para>You might want to run option 1) just to ensure that apctest is properly talking to your UPS. It will produce quite about 70 lines of output.</para>
      <para>To program the EEPROM, select option 5), and you will get the EEPROM menu as follows:</para>
      <example xml:space="preserve">
This is the EEPROM programming section of apctest.
Please select the function you want to perform.

1) Print EEPROM values
2) Change Battery date
3) Change UPS name
4) Change sensitivity
5) Change alarm delay
6) Change low battery warning delay
7) Change wakeup delay
8) Change shutdown delay
9) Change low transfer voltage
10) Change high transfer voltage
11) Change battery return threshold percent
12) Change output voltage when on batteries
13) Change the self test interval
14) Set EEPROM with conf file values
15) Quit

Select function number:</example>
      <para>If you wish to use the old pre-3.10.x method of EEPROM programming with values specified in the <file>apcupsd.conf</file> file, select option 14). However, we recommend that you start with item 1) to see what EEPROM values apctest finds. This command can take a few minutes to run, so be patient. The values printed should be the same as what you got using apcaccess, but in addition, the EEPROM battery date and UPS Name should be displayed. For example:</para>
      <example xml:space="preserve">
Select function number: 1

Doing prep_device() ...

Valid EEPROM values for the SMART-UPS 1000

                       Config        Current  Permitted
Description              Directive     Value    Values
===================================================================
Upper transfer voltage   HITRANSFER    253      253 264 271 280
Lower transfer voltage   LOTRANSFER    196      196 188 208 204
Return threshold         RETURNCHARGE  0        00 15 50 90
Output voltage on batts  OUTPUTVOLTS   230      230 240 220 225
Sensitivity              SENSITIVITY   H        H M L L
Low battery warning      LOWBATT       2        02 05 07 10
Shutdown grace delay     SLEEP         20       020 180 300 600
Alarm delay              BEEPSTATE     0        0 T L N
Wakeup delay             WAKEUP        0        000 060 180 300
Self test interval       SELFTEST      336      336 168 ON  OFF
===================================================================
Battery date: 07/31/99
UPS Name    : UPS_IDEN</example>
      <para>At this point, you can select any item from 2) to 13) to modify the appropriate value. You will shown the existing value and prompted for the new values.</para>
      <para>We recommend that you change the EEPROM as little as is absolutely necessary since it is a somewhat delicate process that has occasionally produced problems (i.e. improper EEPROM values are displayed after the update). Fortunately this seems to be quite rare and was much more likely to occur with the old "batch" like process especially if incorrect values were supplied.</para>
    </subsection>
  </node>
  <node>
    <nodename>Maintaining Your UPS</nodename>
    <nodenext>Frequently-Asked Questions</nodenext>
    <nodeprev>Monitoring and Tuning your UPS</nodeprev>
    <nodeup>Basic User's Guide</nodeup>
    <chapter>
      <title>Maintaining Your UPS</title>
      <para><indexterm index="cp">Maintenance</indexterm> If you have your UPS long enough, you will probably have battery problems. Below, you will find some suggestions for replacing batteries. One <emph>important</emph> note of caution: at least one user purchased one of the non-APC batteries noted below and found out that they would not fit into his unit. This required cutting and soldering and other very undesirable things, so be extremely careful in measuring the batteries including every millimeter of the terminal connections which can cause problems.</para>
      <para>Although you can do a hot swap of your batteries while the computer is running, it may not be very satisfactory because the unit will not know that the batteries have been swapped and apcupsd will continue to show Low Battery.  To correct this situation, you must do a discharge and recharge of the battery followed by a battery recalibration using apctest.  At that point the battery should be calibrated better.  As noted below, Carl has found that it takes several discharge/charges before the runtime calibration is accurate.  Take care not to discharge your battery too much as it tends to shorten the battery life.</para>
      <menu>
        <menuentry>
          <menunode>What Various People Have to Say about Batteries</menunode>
          <menutitle>What Various People Have to Say about Batteries</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Where Carl Suggests You Get Batteries</menunode>
          <menutitle>Where Carl Suggests You Get Batteries</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>What Various People Have to Say about Batteries</nodename>
    <nodenext>Where Carl Suggests You Get Batteries</nodenext>
    <nodeup>Maintaining Your UPS</nodeup>
    <section>
      <title>What Various People Have to Say about Batteries</title>
      <para><indexterm index="cp">Batteries</indexterm> Here is what John Walker has to say about APC UPS batteries:</para>
      <quotation>
        <para>I thought I'd pass on some information I've obtained which you'll probably eventually need. Besides, by writing it down I'll be able to find it the next time. I started installing mine in 1995-1996. Lead-acid batteries have a finite life even if not subjected to deep discharge cycles. For the batteries used by APC, this is typically four to six years. As part of the self-test cycle, the UPS measures the voltage of the battery at full charge (which falls as the battery ages), and if it's below about 90% of the value for a new battery, it sets off the "Replace battery" alarm, which it repeats every day. [on apcupsd versions prior to 3.8.0, this message is sent once, on version 3.8.0, it is sent every 9 hours - KES]. You will occasionally get a false alarm. It's a good idea if you get an alarm to repeat the self-test the next day and see if the alarm goes away. If the alarm is persistent, you need to replace the batteries, which can be done without powering down the UPS or load-you just open up the battery door, take out the old batteries, and hook up the new ones.</para>
        <para>APC makes "Replacement Battery Units" for each of the SmartUPS models, but they sell them directly only in the U.S.</para>
        <para>It's best to wait until the low battery alarm before ordering a replacement-keeping batteries on the shelf reduces their life unless you keep them fully charged.</para>
      </quotation>
      <para>And Andre Hendrick says:</para>
      <quotation>
        <para>[For replacement batteries] You need to goto you your local Yamaha SeaDoo shop. There are 35 AMP Hour deep cycle marine batteries that are direct replacements. These are gel-cel and will double the runtime and/or cut your recharge time in half.</para>
        <example xml:space="preserve">
Jet Works
1587 Monrovia Ave.
Newport Beach CA 9266?
Tel: +1 714 548-5259

J-W Batteries, Inc.
Tel: +1 714 548-4017

WPS 49-1200
GEL-CELL KB-35 BATTERY</example>
        <para>For those that do not know what this means........ I found the best battery for APCC UPS products that use In the two systems below:</para>
        <example xml:space="preserve">
SMART-UPS 3000 10.9% is running at 327W runs for 47.0 min.
Smart-UPS 1250 22.3% is running at 279W runs for 54.0 min.

APCUPSD UPS Network Monitor
Thu Jan 18 21:55:36 PST 2001
System Model Status Battery Chg Utility UPS Load UPS Temp Batt. Run Time Data
Linux ATA Development SMART-UPS 3000 ONLINE
                    100.0 % 120.2 VAC 10.9 % 36.9 C 47.0 min. All data
Linux ATA Development II APC Smart-UPS 1250 ONLINE
                    100.0 % 119.6 VAC 22.3 % 45.9 C 54.0 min. All data</example>
        <para>Look at the numbers and see that these batteries are better and have more total running energy than standard ones.</para>
        <example xml:space="preserve">
SMART-UPS 3000 10.9% is running at 327W runs for 47.0 min.
Smart-UPS 1250 22.3% is running at 279W runs for 54.0 min.

APCUPSD UPS Network Monitor
Thu Jan 18 22:00:45 PST 2001
System Model Status Battery Chg Utility UPS Load UPS Temp Batt. Run Time Data
Linux ATA Development SMART-UPS 3000 ONLINE
                    100.0 % 120.2 VAC 19.2 % 36.9 C 27.0 min. All data
Linux ATA Development II APC Smart-UPS 1250 ONLINE
                    100.0 % 119.6 VAC 21.8 % 45.9 C 55.0 min. All data

SMART-UPS 3000 19.2% is running at 576W runs for 27.0 min.
Smart-UPS 1250 21.8% is running at 273W runs for 55.0 min.
Smart-UPS 1250 46.1% is running at 576W runs for 26.0 min.
</example>
        <para>Kind of cool.</para>
        <para>The 1250 can outrun the 3000 by a factor of two under identical percentages, or run head to head for the same time.</para>
        <para>SMART-UPS 3000 is a 48V based or 4 batteries.  Smart-UPS 1250 is a 24V based or 2 batteries.</para>
        <para>Cheers,</para>
        <example xml:space="preserve">
Andre Hedrick
Linux ATA Development</example>
      </quotation>
      <para>Finally, here is what Carl Erhorn has to say about batteries:</para>
      <quotation>
        <para>Hi, Folks.</para>
        <para>Well, Kern was absolutely right. The problem with my UPS was batteries. It was unexpected though, because there was no indication of a bad battery right up until the UPS failed entirely.</para>
        <para>For those who might encounter the same thing, and don't know what's happening (I didn't either), here's what happened.</para>
        <para>A week or so ago, I turned on one of my SmartUPS 700-NET models. The load is a small dual P-III unix server (Solaris 8, X86) and a 4MM tape drive. During the normal selftest that runs when you first turn on any APC UPS, the UPS 'freaked out'. The alarm stuttered at about 4 or 5 beeps per second, and all the panel lights flashed spasmodically, as if something was loose inside the UPS.</para>
        <para>I turned off the UPS and it's load, then turned the UPS on again. This time, everything seemed fine. I booted the system that was attached, and there were no problems. The status monitor showed 9 minutes runtime (which indicates fairly low capacity), but the batteries showed fully charged. I began to suspect a bad inverter in the UPS.</para>
        <para>However, Kern told me that he suspected the batteries. So I took the UPS offline, put an old SU-600 in it's place (just barely big enough to handle the startup peaks - I get an 'overload' lamp lit for about 2 seconds during boot), and checked out the batteries. They did indicate that they were near the end of life, so I ordered a replacement set. Those came in on Friday, and after the initial charge, a complete charge/discharge cycle to recalibrate the UPS, and some testing, I put it back in service.</para>
        <para>Surprise! (Or maybe not?) Kern was right - there is nothing wrong with the inverter or the charging circuit, and the new cells fixed everything.</para>
        <para>What confused me is that there was no 'replace battery' indication from the UPS, even when it failed, plus a fair amount of runtime indicated with a full charge. So if you see such behavior on one of your UPS models, it makes sense to replace the batteries, even if there is no indication that the batteries have failed yet.</para>
        <para>One of the things I learned during this process is that the UPS internal calibration will lose accuracy over the life of the battery. I always do a recalibrate when I install new cells, but rarely do it after that, as it's time-consuming, and you really can't use the system attached to the UPS while doing it. Since my systems are almost constantly in use, it's a pain to schedule a recal, and I tend to put it off. This time it bit me. I'd suggest that folks do a recal at least once every six months. It will make your runtime estimates much more accurate, and also allows you to keep track of the state of your batteries.</para>
        <para>For those who don't know how to do this, here's what you do. This proceedure should not be confused with the 'Recalibrate' feature in the APC PowerchutePlus software. They do not do the same thing.</para>
        <para>&gt;From APC's web site:</para>
        <para>Perform a Runtime Calibration. This is a manual procedure and should not be confused with the runtime calibration performed through PowerChute plus. The batteries inside of the Smart-UPS are controlled by a microprocessor within the UPS. Sometimes it is necessary to reset this microprocessor, especially after the installation of new batteries. Stop the PowerChute plus software from running and disconnect the serial cable. There must be at least a 30% load attached to the UPS during this procedure, but the process will cause the UPS to shut off and cut power to its outlets. Therefore, attach a non-critical load to the UPS and then force the UPS on battery by disconnecting it from utility power. Allow the unit to run on battery until it turns off completely. Make sure a 30% load is present! Plug the UPS back into the wall outlet and allow it to recharge (it will recharge more quickly turned off and with no load present). Once the unit has recharged, the "runtime remaining" calculation should be more accurate. Remember that if the unit is an older model, then the runtime will not improve significantly.</para>
        <para>Background:</para>
        <para>An APC Smart-UPS has a microprocessor which calculates runtime primarily based on the load attached to the UPS and on its battery capacity. On the right side of the front display panel there is a vertical graph of five LEDs. Each LED is an indication of battery charge in increments of twenty percent: 20, 40, 60, 80, 100% (bottom to top). For example, if the battery charge is 99%, then only four of the five LEDs are illuminated.</para>
        <para>To ensure that an operating system receives a graceful shutdown when using PowerChute plus or a SmartSlot accessory, an alert is generated by the Smart-UPS indicating that the UPS has reached a low battery condition. The alert is audible (rapid beeping), visual (flashing battery LED or LEDs), and readable through the graphical interface of PowerChute plus software (or a native UPS shutdown program within a particular operating system.) In order to calculate this "low battery condition," all Smart-UPS products have a preconfigured low battery signal warning time of two minutes (this is the factory default setting). There are a total of four user-changeable settings: 2, 5, 7, or 10 minutes. If the low battery signal warning time is set for 2 minutes, then the alerts will activate simultaneously two minutes prior to shutdown. Similarly, if the total runtime for a particular UPS is 30 minutes with a low battery signal warning time set at 10 minutes, then the UPS will run on battery for 20 minutes before the low battery alert begins.</para>
        <para>Total runtime is primarily based on two factors, battery capacity and UPS load. UPS load and runtime on battery are inversely proportional: as load increases, battery runtime decreases and vice versa. When utility power is lost, the UPS begins discharging the battery in order to support the attached load. Once power returns, the Smart-UPS will automatically begin to recharge its battery.</para>
        <para>My comments on this proceedure:</para>
        <para>I believe this proceedure works for all APC models that calulate runtime, not just the SmartUPS. It's important that you load the UPS to 30% of the UPS capacity, as reported by apcupsd or another UPS monitor program. I've found that normal house lamps of different wattages allow me to adjust the load to almost exactly what I want, which is between 30% and 35% of the UPS capacity. This is critical te getting an accurate reading (according to the APC web documents). Always bring the UPS to 100% charge first, as indicated by the front panel lamps, or your UPS monitoring software.</para>
        <para>Set the UPS shutdown time to 2 minutes, all other settings to nominal, and disconnect the serial port cable from the UPS before running the recalibration. If you leave a monitoring program running through the serial port, it will turn the UPS off early, and you don't want to do that during a recalibration run. When the run is complete, and the UPS turns off, you can reattach the serial cable, and the normal loads, and recharge the batteries normally. If you think you might have a power outage during the recharge time, allow the UPS to recharge to 20% or so (indicated by the panel lamps) before trying to use the computer system. This will allow the UPS to handle short dropouts while it recharges. Of course, if you can leave the computer off during the recharge time, the UPS will recharge much faster.</para>
        <para>As an aside, when the batteries failed, my total runtime at 100% charge and an idle state was 9 minutes, which is pretty bad. I replaced the batteries with extended capacity cells, which add about 15% to the stock capacity. Now, after two complete charge/ discharge cycles, 100% charge shows the available runtime to be 42 minutes on the system when it's idle, and 33 minutes when the system is very busy. The differences are due to the load of the computer, when the disks are busy, and the cpus are not in a halted state (my system halts the cpus when they are idle, to save power and lower heat, as do other OS like Linux), when compared to an idle state. Apcupsd indicates the load is about 27% when idle, and as much as 37% when heavily loaded.</para>
        <para>I've found that two charge/discharge cycles result in a more accurate recalibration when installing new cells. It appears that some batteries need to be put through a couple of complete cycles before they reach their full capacity. I've also noticed that the full-charge voltage is different for each battery until they have been through two cycles. On the initial charge of my new batteries, the 100% charge voltage on the two cells was almost .5 VDC apart. After two complete cycles, the batteries measure within .01 VDC of each other!</para>
        <para>I hope this information helps anyone who might encounter the problem I saw, and also shows folks how to recal their batteries. If you haven't done a complete recalibration in a year or two, I'd recommend it, so that you have warning of a low battery instead of what happened to me.</para>
        <para>Regards,</para>
        <para>&ndash;Carl</para>
      </quotation>
    </section>
  </node>
  <node>
    <nodename>Where Carl Suggests You Get Batteries</nodename>
    <nodeprev>What Various People Have to Say about Batteries</nodeprev>
    <nodeup>Maintaining Your UPS</nodeup>
    <section>
      <title>Where Carl Suggests You Get Batteries</title>
      <para><indexterm index="cp">Batteries</indexterm></para>
      <quotation>
        <para>Hi, Folks.</para>
        <para>I'm just replacing the batteries in one of my SmartUPS models, and it occurs to me that some of you may not know about the place I get them from. I have no relationship with this company, other than as a customer, but I feel they know what they are doing, their prices are fair, and they have some interesting batteries available that you can't obtain from APC.</para>
        <para>These are the reasons I use them, and I thought this information might be useful to the US list members. They will ship outside of the US. If you have questions, you can contact them through the email address listed on their web pages. They have always responded pretty quickly to my questions.</para>
        <para>The company is called Battery Wholesale Distributors, and they are located in Georgetown, Texas. If you have questions, you can reach them by phone at (800) 365-8444, 9:00AM to 5:00PM (their local time), Monday through Friday. I've gotten email from them on the weekends, although the office is not open then.</para>
        <para>I won't post prices, as you can get current pricing from their web site. They have an entire section dedicated to APC replacement batteries, and it's easy to find what you need. You can order over the web, or by phone. They accept all the usual credit cards.</para>
        <para>The web site (as you might guess) is: <uref><urefurl>http://www.batterywholesale.com</urefurl><urefdesc>www.batterywholesale.com</urefdesc></uref></para>
        <para>The thing I really like is that they have found manufacturers who make batteries in the standard case sizes, but have additional capacity over the original batteries shipped with the APC UPS models. Often, the difference is as much as 15% or so, and this can result in additional runtime. It's a nice upgrade for a minor increase in price.</para>
        <para>They are also 'green-aware', in that they encourage you to recycle your old batteries, and will accept the old batteries back from you if you cannot find a local place that recycles them. You pay the shipping, but I think other than that, there is no charge. I've never done this, as I have a battery retailer just down the street who will accept my old batteries.</para>
        <para>Anyway, if you didn't know about these folks, put the info aside where you can find it when you need replacement batteries. I won't make any guarantees, but I've been very pleased with their products, service, and pricing. I hope you find them as helpful to you as I do. I've been dealing with them since about 1994, and have never been disappointed. The owner of the place also is very good on technical issues, so if you have questions on their products, he can get as technical as you need to go.</para>
        <example xml:space="preserve">
Regards,
--Carl</example>
      </quotation>
      <para>Here is a link to the <uref><urefurl>http://www.batterywholesale.com/battery-store/APC-batteries/?PHPSESSID=10ba07023457efda6a3520af1957755f</urefurl><urefdesc>APC Battery Store</urefdesc></uref>.</para>
    </section>
  </node>
  <node>
    <nodename>Frequently-Asked Questions</nodename>
    <nodenext>Apcupsd Bugs</nodenext>
    <nodeprev>Maintaining Your UPS</nodeprev>
    <nodeup>Basic User's Guide</nodeup>
    <chapter>
      <title>Frequently-Asked Questions</title>
      <para><indexterm index="cp">FAQ</indexterm> See the bugs section of this document for a list of known bugs and solutions.</para>
      <table>
        <tableitem>
          <tableterm><anchor name="crazy"></anchor>&space;&space;Q:</tableterm>
          <item>
            <para>Why all the craziness with custom serial cables?</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;A:</tableterm>
          <item>
            <para>It was nothing more nor less than a form of customer control. For a long time APC wanted to keep other people from talking to its UPSes so it could lock out potential competition for its PowerChute software.  Scrambling the leads on its serial cables was a cheap way to accomplish this &mdash; in fact, they tended to be wired so that if you tried a straight-through cable, opening a serial link to the UPS would be interpreted as a shutdown command!</para>
            <para>(Hardware companies often think like this &mdash; they lock up interfaces by instinct, cornering a small market rather than growing a bigger one.  It's fundamentally stupid and self-defeating, but it's the kind of stupid that tends to sound good at an executive meeting.)</para>
            <para>Fortunately, APC has lost a lot of this attitude since about 2000; nowadays they even release technical information to the apcupsd maintainers.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;Q:</tableterm>
          <item>
            <para>What UPS brands does apcupsd support?</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;A:</tableterm>
          <item>
            <para>Currently apcupsd supports only APC UPSes. However, some companies such as Hewlett Packard put their own brand name on APC manufactured UPSes. Thus even if you do not have an APC branded UPS, it may work with apcupsd. You will need to know the corresponding APC model number. apcupsd supports all the popular APC models. See the installation and configurations sections of this document for more details.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;Q:</tableterm>
          <item>
            <para>Does apcupsd support Windows?</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;A:</tableterm>
          <item>
            <para>With release 3.8.0, apcupsd now runs on Win95/98, WinMe, WinNT, and Win2000 machines. All features of the Unix versions of apcupsd are implemented. The UPS EEPROM programming features of apcupsd have not been tested under Windows. Version 3.8.0 does not support simple signaling UPSes (BackUPS, etc). Version 3.8.1 does support most simple signaling UPSes, but not all cables (due to deficiencies in the Windows serial port API). Please note that we have had reports that apcupsd does not work properly on the WinXP system. If you have any information on this, please email us.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;Q:</tableterm>
          <item>
            <para>I don't have a cable, which one should I build?</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;A:</tableterm>
          <item>
            <para>First you must know if you have an apcsmart UPS or a voltage-signalling UPS. See the table of supported UPSes (see <xref><xrefnodename>type_table</xrefnodename></xref>). If you have a apcsmart UPS, we recommend building a Custom Smart (see <xref><xrefnodename>Smart-Custom Cable for SmartUPSes</xrefnodename></xref>) cable. If you have a voltage-signaling UPS, we recommend that you build a Custom Simple (see <xref><xrefnodename>Voltage-Signalling Cable for "dumb" UPSes</xrefnodename></xref>) cable.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;Q:</tableterm>
          <item>
            <para>How much CPU resources does apcupsd use?</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;A:</tableterm>
          <item>
            <para>Depending on your CPU speed, you may see more or less of the CPU consumed by apcupsd. On a 400MHz Unix system, the CPU usage should fall well below 0.1%. On slower systems, the percentage will increase proportionally to the decrease in the CPU speed. On a 400Mhz Win98 machine, the CPU usage will be on the order of 0.5-1.0%. This is higher than for Unix systems. However, compared to the 30% CPU usage by APC's PowerChute (the version on the CDROM shipped with my UPS), apcupsd's 0.5-1.0% is very modest.</para>
            <para>If you configure apcupsd to run with pthreads (<code>--with-pthreads</code> on the <code>./configure</code> line), apcupsd will run considerably faster, otherwise said, it will consume less of your CPU, and it will use approximately one third of the memory. For example, Carl Erhorn reports that on his Solaris system, "With the old 3-process version, we averaged about 4.8MB of total memory used. With the new single process, we use only about 1.7MB! That's also a very good improvement."</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;Q:</tableterm>
          <item>
            <para>What language is apcupsd written in?</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;A:</tableterm>
          <item>
            <para>It is written entirely in C.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;Q:</tableterm>
          <item>
            <para>We are using apcupsd-3.8.1-1 in RedHat 6.2. The slave, when shutting down, is reporting an error at line 436 of apcupsd.c. The error is initiated by <code>apcupsd --killpower</code>! What can we do to fix this, and is it critical?</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;A:</tableterm>
          <item>
            <para>No, the error is not serious. Unfortunately, the documentation in the area of master/slaves is not very detailed, and for that reason, your slave setup is not totally correct as explained below.</para>
            <para>On master machines, we modify <file>/etc/rc.d/init.d/halt</file> to re-invoke apcupsd with the <code>--killpower</code> option (actually the script apccontrol is called). This causes the UPS to send the codes to the UPS to make it power off.</para>
            <para>On slave machines, these modifications should not be made to the <file>/etc/rc.d/init.d/halt</file> script since the slave has no connection to the UPS.</para>
            <para>To eliminate the problem, on all your slave machines, either restore the original halt file, or simply delete all the lines containing ***apcupsd***, which were inserted by the apcupsd installation process.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;Q:</tableterm>
          <item>
            <para>To test apcupsd, I unplugged the UPS to simulate a power outage. After the machine went into the shutdown process I plugged the UPS back into the commercial power source. This caused the shutdown process to hang after the daemon tried to shut-off the ups. Have you run into this problem, and if so do you have a remedy?</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;A:</tableterm>
          <item>
            <para>Normally, once the shutdown process has begun, we cannot stop it, though there <emph>is</emph> some code that tries to do so, we don't consider it a very good idea &mdash; how do you stop a shutdown that has killed off half of the daemons running on your system? Most likely you will be left with an unusable system. In addition, when apcupsd is re-executed in the halt script after the disks are synced, it tries to shut off the UPS power, but the UPS will generally refuse to do so if the AC power is on. Since we cannot be 100% sure whether or not the UPS will shut off the power, we don't attempt to reboot the system if we detect that the power is back as it might then get caught by a delayed power off (at least for Smart UPSes).</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;Q:</tableterm>
          <item>
            <para>After running apcupsd for a while, I get the following error: "Serial communications with UPS lost." What is the problem?</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;A:</tableterm>
          <item>
            <para>We use standard Unix serial port read() and write() calls so once a connection is made, we generally have few problems. However, there have been reports that APC's SNMP Management Card can cause serial port problems. If you have such a card, we suggest that you remove it and see if the problem goes away. It is also possible that some other process such as a getty is reading the serial port.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;Q:</tableterm>
          <item>
            <para>When apcupsd starts, I get the following error: "attach_shmarea: cannot get shm area: Identifier removed." What is the problem?</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;A:</tableterm>
          <item>
            <para>This problem and the problem of <strong>cannot create shm area</strong> are due to the fact that the shared memory key that apcupsd wants to use is already in use. This happens most frequently when there is an old zombie apcupsd process still in the system.  The solution is to remove the old process.  You can often see what is going on by doing a: <code>ipcs</code> command as root when apcupsd is not running. If you see a segment with the key 0x10feed01, you can be sure there is some old apcupsd process still using it. If you cannot kill the old process, you can try using <code>ipcrm</code> (see the man pages).  Recent versions of apcupsd starting with apcupsd-3.8.2Beta6 should no longer have this problem as they will automatically try using a different key.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;Q:</tableterm>
          <item>
            <para>I get the following error: "Starting apcupsd power management.  Mar 20 21:19:40 box apcupsd[297]: apcupsd FATAL ERROR in apcserial.c at line 83. Cannot open UPS tty /dev/cua01: No such file or directory." What is the problem?</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;A:</tableterm>
          <item>
            <para>The two most likely causes of your problem are:  1. You have the wrong serial port device name in the apcupsd.conf file. 2. The device name is not defined on your system. Suggestions for proceeding:For the first item, check what your serial port device should be named. You might be able to find the name with an:</para>
            <example xml:space="preserve">
ls /dev</example>
            <para>Normally there will be hundreds or even thousands of names that print. If that doesn't produce anything useful, you can try step 2.  Perhaps your device is not defined. To get more information on your devices try man <code>MAKEDEV</code> or <code>find / -name MAKEDEV</code>.  It is often located in <code>/dev/MAKEDEV</code>.  Looking at the documentation may tell you what the correct name is, or at least allow you to create the device.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;Q:</tableterm>
          <item>
            <para>How do I ensure that the slaves shutdown before the master?</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;A:</tableterm>
          <item>
            <para>There are several strategies for getting the slaves properly shutdown before shutting down the master. The first is to make the master wait a period of time for the slaves to shutdown before doing its own shutdown. Currently, the master always waits 30 seconds before starting its own shutdown. If this is insufficient, you can add additional time by putting an appropriate <strong>sleep</strong> shell command in the <file>/etc/apcupsd/apccontrol</file> file just before the actual system shutdown command is executed (there are something like 3 places). The second strategy is to put a TIMEOUT value in the apcupsd.conf file on the slave that is sufficiently short that you are sure that the slave will shutdown before the master. If the shutdown is done with a poweroff, this will also save power so that the master can stay up longer.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;Q:</tableterm>
          <item>
            <para>How do I ensure that my database server is correctly shutdown?</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;A:</tableterm>
          <item>
            <para>You simply add whatever commands are necessary in the appropriate case statements in <file>/etc/apcupsd/apccontrol</file>, which is a standard script file that is called to actually do the shutdown. Alternatively, you can add your own script file that will be called before doing the commands in apccontrol. Your script file must have the same name as the appropriate case statement in apccontrol; it must be executable; and it must be in the same directory as apccontrol.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;Q:</tableterm>
          <item>
            <para>I have Win2k Advanced server, and when starting the service, get: Could not start the Apcupsd Server service on Local Computer. Error 1067: The process terminated unexpectedly</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;A:</tableterm>
          <item>
            <para>The most common error causing your problem is an incorrect serial port specification on your DEVICE directive. It should be:</para>
            <example xml:space="preserve">
DEVICE /dev/com2</example>
            <para>On WinNT machines, and probably Win2000 machines you MUST use <file>/dev/com2</file> unless you modify the behavior of the boot process to prevent Windows from probing the port. This is documented in our manual for WinNT. Although I imagine it is the same for Win2000, I am not sure.</para>
            <para>The second most common problem is bad placement of the files i.e. you did not install them in c:\apcupsd Unfortunately for the current release, this path is "hard coded" into the binaries.</para>
            <para>The third most common problem is that you did not run the <file>setup.bat</file> script after loading the files. This is necessary to install apcupsd as a service.</para>
            <para>If all the above fails, try starting apcupsd by hand inside a CYGWIN rxvt window if you use an rxvt window rather than a DOS window, you will see many more of the error messages.</para>
            <para>In addition, most of the apcupsd startup errors are reported in: <file>c:\apcupsd\etc\apcupsd\apcupsd.events</file></para>
            <para>Many error messages associated with Windows services will be reported in the Windows System Log.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;Q:</tableterm>
          <item>
            <para>When using USB, I get the following log messages: usb-uhci.c: interrupt, status 3, frame# 826. What does it mean?</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;A:</tableterm>
          <item>
            <para>It means one transfer worked (bit 0 in status) and another one (after that) failed (bit 1) at time frame 826. This kind of soft error is common on USB and if everything seems to be working, you can ignore it.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;Q:</tableterm>
          <item>
            <para>apcnisd doesn't work. It always gives: FATAL ERROR in apcipc.c at line 497. attach_shmarea: shared memory version mismatch (or UPS not yet ready to report)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>&space;&space;A:</tableterm>
          <item>
            <para>Unfortunately apcnisd does not work with pthreads enabled. You have the following options:</para>
            <enumerate first="1">
              <item>
                <para>If you build with pthreads enabled, apcnisd will not work no matter what you do.</para>
              </item>
              <item>
                <para>If you build with pthreads enabled, and you want to have network information from apcupsd, you must set NETSERVER ON. This is the configuration we recommend (i.e. using pthreads and NETSERVER ON).</para>
              </item>
              <item>
                <para>If you build with pthreads disabled, you have the choice of using apcnisd or the NETSERVER code. If you wish to use apcnisd, you must set NETSERVER OFF</para>
              </item>
              <item>
                <para>If you build with pthreads disabled, and you do not use apcnisd, you must set NETSERVER ON if you wish to have network information from apcupsd.</para>
              </item>
            </enumerate>
            <para>Concerning the names one sees with "ps".</para>
            <enumerate first="1">
              <item>
                <para>With pthreads enabled, on Linux machines, you will see multiple copies of apcupsd running, but they will all be called apcupsd rather than apcmain, apcser, ... They will still run as LWP, but we are unable to set the names on threads (LWP). Note, though ps shows "multiple copies" of apcupsd running, it is really one memory image but with multiple threads.</para>
              </item>
              <item>
                <para>With pthreads disabled, we are able to set the child process names (at least on Linux) so you will see apcmain, apcser, apcnis, ... in the ps output. In this case, they are really different processes each with its own memory image (the code image is most likely shared).</para>
              </item>
            </enumerate>
          </item>
        </tableitem>
      </table>
    </chapter>
  </node>
  <node>
    <nodename>Apcupsd Bugs</nodename>
    <nodeprev>Frequently-Asked Questions</nodeprev>
    <nodeup>Basic User's Guide</nodeup>
    <chapter>
      <title>Apcupsd Bugs</title>
      <para><indexterm index="cp">Bugs</indexterm> Unfortunately, it seems that every program has some bugs. We do our best to keep the bugs to a minimum by extensive testing. However, because of our inherent nature to occasionally overlook things and the fact that we don't have all the UPS models nor the APC documentation on those models, apcupsd will have some bugs.</para>
      <para>As the bugs become known to us, we will post them on the bug tracking system at SourceForge.</para>
    </chapter>
  </node>
  <node>
    <nodename>Advanced topics</nodename>
    <nodenext>Installation on Windows</nodenext>
    <nodeprev>Basic User's Guide</nodeprev>
    <nodeup>Top</nodeup>
    <majorheading>Advanced topics</majorheading>
    <para><indexterm index="cp">Advanced</indexterm></para>
    <menu>
      <menuentry>
        <menunode>Customizing Event Handling</menunode>
        <menutitle>Customizing Event Handling</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>Master/Slave Configurations</menunode>
        <menutitle>Master/Slave Configurations</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>Controlling Multiple UPSes on one Machine</menunode>
        <menutitle>Controlling Multiple UPSes on one Machine</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>Support for SNMP UPSes</menunode>
        <menutitle>Support for SNMP UPSes</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>Alternate Ways To Run The Network Information Server</menunode>
        <menutitle>Alternate Ways To Run The Network Information Server</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>apcupsd System Logging</menunode>
        <menutitle>apcupsd System Logging</menutitle>
        <menucomment></menucomment>
      </menuentry>
    </menu>
  </node>
  <node>
    <nodename>Customizing Event Handling</nodename>
    <nodenext>Master/Slave Configurations</nodenext>
    <nodeup>Advanced topics</nodeup>
    <chapter>
      <title>Customizing Event Handling</title>
      <para><indexterm index="cp">Event handling</indexterm><indexterm index="cp">Customizing event handling</indexterm></para>
      <para>When apcupsd detects anomalies from your UPS device, it will make some decisions that usually result in one or more calls to the script located in <file>/etc/apcupsd/apccontrol</file>. The <strong>apccontrol</strong> file is a shell script that acts on the first argument that apcupsd passes to it. These actions are set up by default to sane behavior for all psituations apcupsd is likely to detect from the UPS. However, you can change the apccontrol behavior for every single action.</para>
      <para>To customize, so create a file with the same name as the action, which is passed as a command line argument. Put your script in the <file>/etc/apcupsd</file> directory.</para>
      <para>These events are sent to the system log, optionally sent to the temporary events file (<file>/etc/apcupsd/apcupsd.events</file>), and they also generate a call to <file>/etc/apcupsd/apccontrol</file> which in turn will call any scripts you have placed in the <file>/etc/apcupsd</file> directory.</para>
      <para>Normally, <file>/etc/apcupsd/acpcontrol</file> is called only by apcupsd. Consequently, you should not invoke it directly.  However, it is important to understand how it functions, and in some cases, you may want to change the messages that it prints using <code>wall</code>. We recommend that you do so by writing your own script to be invoked by <code>apccontrol</code> rather than by modifying apccontrol directly. This makes it easier for you to upgrade to the next version of apcupsd</para>
      <para>In other case, you may want to write your own shell scripts that will be invoked by apccontrol. For example, when a power fail occurs, you may want to send an email message to root. At present the arguments that apccontrol recognizes are:</para>
      <para>When apcupsd detects an event, it calls the apccontrol script with four arguments as:</para>
      <para>apccontrol &lt;event&gt; &lt;ups-name&gt; &lt;connected&gt; &lt;powered&gt;</para>
      <para>where:</para>
      <table>
        <tableitem>
          <tableterm>event</tableterm>
          <item>
            <para>is the event that occurred and it may be any one of the values described in the next section.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>ups-name</tableterm>
          <item>
            <para>is the name of the UPS as specified in the configuration file (not the name in the EEPROM). For version 3.8.2, this is always set to <strong>Default</strong></para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>connected</tableterm>
          <item>
            <para>is 1 if apcupsd is connected to the UPS via a serial port (or a USB port). In most configurations, this will be the case. In the case of a Slave machine where apcupsd is not directly connected to the UPS, this value will be 0.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>powered</tableterm>
          <item>
            <para>is 1 if the computer on which apcupsd is running is powered by the UPS and 0 if not.  At the moment, this value is unimplemented and always 0.</para>
          </item>
        </tableitem>
      </table>
      <menu>
        <menuentry>
          <menunode>apccontrol Command Line Options</menunode>
          <menutitle>apccontrol Command Line Options</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>apccontrol Command Line Options</nodename>
    <nodeup>Customizing Event Handling</nodeup>
    <section>
      <title>apccontrol Command Line Options</title>
      <para>apccontrol accepts the following command line options:</para>
      <table>
        <tableitem>
          <tableterm>annoyme</tableterm>
          <item>
            <para>When a shutdown is scheduled, and the time specified on the ANNOYME directive in the apcupsd.conf file expires, this event is generated.</para>
            <para>Default &ndash; does a <code>printf "Power problems please logoff." | wall</code> then exits.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>changeme</tableterm>
          <item>
            <para>When apcupsd detects that the mains are on, but the battery is not functioning correctly, this event is generated. It is repeated every x hours.</para>
            <para>Default &ndash; does a  <code>printf "Emergency! UPS batteries have failed\nChange them NOW" | wall</code>  then exits.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>commfailure</tableterm>
          <item>
            <para>This event is generated each time the communications line with the computer is severed. This event is not detected on dumb signaling UPSes.</para>
            <para>Default -does a <code>printf "Warning serial port communications with UPS lost." | wall</code>  then exits.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>commok</tableterm>
          <item>
            <para>After a commfailure event is issued, when the communications to the computer is re-established, this event will be generated.</para>
            <para>Default &ndash; does a <code>printf "Serial communications with UPS restored." | wall</code> then exits.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>doreboot</tableterm>
          <item>
            <para>This event is depreciated and should not be used.</para>
            <para>Default - does a reboot of the system by calling <code>shutdown -h now</code></para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>doshutdown</tableterm>
          <item>
            <para>When the UPS is running on batteries and one of the limits expires (time, run, load), this event is generated to cause the machine to shutdown.</para>
            <para>Default does a shutdown of the system by calling <code>shutdown -h now</code></para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>emergency</tableterm>
          <item>
            <para>Does an emergency shutdown of the system by calling <code>shutdown -h now</code></para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>failing</tableterm>
          <item>
            <para>This event is generated when the UPS is running on batteries and the battery power is exhausted. The event following this one will be a shutdown.</para>
            <para>Default &ndash; does a <code>printf "UPS battery power exhausted. Doing shutdown.\n" | wall</code> then exits.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>loadlimit</tableterm>
          <item>
            <para>This event is generated when the battery charge is below the low limit specified in the apcupsd.conf file.</para>
            <para>Default &ndash; does a  <code>printf "UPS battery discharge limit reached. Doing shutdown.\n" | wall</code> then exits.  After completing this event, apcupsd will immediately initiate a <code>doshutdown</code> event.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>mainsback</tableterm>
          <item>
            <para>This event is generated when the mains power returns after a powerout condition. The shutdown event may or may not have been generated depending on the paramaters you have defined and the length of the power outage. A cancel of a shutdown should never be attempted as it is very unlikely to succeed and will almost surely leave your machine in a indeterminate state.</para>
            <para>Default &ndash; attempts to cancel the shutdown with a <code>shutdown -c</code> (not sure about that!!!!)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>onbattery</tableterm>
          <item>
            <para>This event is generated 5 or 6 seconds after an initial powerfailure is detected. It means that apcupsd definitely considers the UPS to be on batteries. The onset of this event can be delayed by the ONBATTERYDELAY apcupsd.conf configuration directive.</para>
            <para>Default &ndash; does a <code>printf "Power failure. Running on UPS batteries." | wall</code> then exits.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>offbattery</tableterm>
          <item>
            <para>This event is generated when the mains return only if the onbattery event has been generated.</para>
            <para>Default &ndash; does nothing.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>powerout</tableterm>
          <item>
            <para>This event is generated immediately when apcupsd detects that the UPS has switched to batteries. It may be due to a short powerfailure, an automatic selftest of the UPS, or a longer powerfailure. In many cases, you may want to inhibit the normal message sent/emailed by this event to avoid being annoyed by short power failures.</para>
            <para>Default &ndash; does a <code>printf "Warning power loss detected." | wall</code> then exits.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>remotedown</tableterm>
          <item>
            <para>This event is generated on a slave machine when it detects either that the master has shutdown, or that a onbattery situation exists and the communications line has been severed. Despite the name, you should never reboot the machine &ndash; instead always shut it down.</para>
            <para>Does a  <code>shutdown -h now</code></para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>restartme</tableterm>
          <item>
            <para>This event is depreciated and should not be used.</para>
            <para>Terminates the currently running apcupsd and then restarts it.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>runlimit</tableterm>
          <item>
            <para>This event is generated when the MINUTES value defined in the apcupsd.conf file expires while in a power fail condition. The MINUTES is the remaining runtime as internally calculated by the UPS and monitored by apcuspd.</para>
            <para>Does a <code>printf "UPS battery runtime percent reached. Doing shutdown.\n" | wall</code>  then exits.  After completing this event, apcupsd will immediately initiate a <code>doshutdown</code> event.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>timeout</tableterm>
          <item>
            <para>This event is generated when the TIMOUT value defined in the apcupsd.conf file expires while in a power fail condition. It indicates that the total time in a power failure has been exeeded and the machine should be shutdown. Normally, with smart UPSes, this value is not used, but rather one relies on the remaining runtime (MINUTES) or the battery level (BATTERYLEVEL) values specified in the conf file.</para>
            <para>Does a <code>printf "UPS battery runtime limit exceeded. Doing shutdown.\n" | wall</code> then exits. After completing this event, apcupsd will immediately initiate a <code>doshutdown</code> event.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>startselftest</tableterm>
          <item>
            <para>This event is generated when apcupsd detects a self test by the UPS. Normally due to the 6 second onbattery delay default time, self test events are not detected.</para>
            <para>This is called when apcupsd detects that the UPS is doing a self test. No action is taken.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>endselftest</tableterm>
          <item>
            <para>This event is generated when the end of a self test is detected.</para>
            <para>This is called when apcupsd determines that a self test has been completed. No action is taken.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>mastertimeout</tableterm>
          <item>
            <para>This event is generated when a slave detects that a master has not contacted it in a reasonable time, or when a slave polls a master and gets no response in 30 seconds. This event applies only to the old master/slave networking code and not to the NIS server/slave mode.</para>
            <para>No action is taken.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>masterconnect</tableterm>
          <item>
            <para>This event is generated when the slave and the master reconnect. This event applies only to the old master/slave networking code and not to the NIS server/slave mode.</para>
            <para>No action is taken.</para>
          </item>
        </tableitem>
      </table>
      <para>To write your own routine for the <strong>powerout</strong> action, you create shell script named <strong>powerout</strong> and put it in the lib directory (normally <file>/etc/apcupsd</file>).  When the <strong>powerout</strong> action is invoked by apcupsd, apccontrol will first give control to your script.  If you want apccontrol to continue with the default action, simply exit your script with an exit status of zero.  If you do not want apccontrol to continue with the default action, your script should exit with the special exit code of <strong>99</strong>.  However, in this case, please be aware that you must ensure proper shutdown of your machine if necessary.</para>
      <para>Some sample scripts (onbattery and mainsback) that email power failure messages can be found in the <file>examples</file> directory of the source code.</para>
    </section>
  </node>
  <node>
    <nodename>Master/Slave Configurations</nodename>
    <nodenext>Controlling Multiple UPSes on one Machine</nodenext>
    <nodeprev>Customizing Event Handling</nodeprev>
    <nodeup>Advanced topics</nodeup>
    <chapter>
      <title>Master/Slave Configurations</title>
      <para><indexterm index="cp">Master/Slave</indexterm> If you have two or more computers that are powered by the same UPS and they are connected by a network, you can configure apcupsd so that the computer that controls the UPS (connected by the serial port or USB port), which is called the master, can provide information to other machines powered by the UPS, called slaves. When the master detects a power failure, it will notify all the slaves (maximum of twenty). If the master detects that the battery is low, it will also notify the slave so that the slave may perform a shutdown.</para>
      <para>In addition, in cases where you wish to keep the master up longer than the slave, you can configure the slave to shut down in a predetermined time after the UPS goes on batteries.</para>
      <para>If a picture is worth a thousand words for you, please see <xref><xrefnodename>Configuration types_</xrefnodename><xrefprinteddesc>Configuration types.</xrefprinteddesc></xref>.</para>
      <menu>
        <menuentry>
          <menunode>Configuration Directives</menunode>
          <menutitle>Configuration Directives</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Master/Slave Problems</menunode>
          <menutitle>Master/Slave Problems</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Network Problems with Master/Slave or Server/Slave Configurations</menunode>
          <menutitle>Network Problems with Master/Slave or Server/Slave Configurations</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Configuration Directives</nodename>
    <nodenext>Master/Slave Problems</nodenext>
    <nodeup>Master/Slave Configurations</nodeup>
    <section>
      <title>Configuration Directives</title>
      <para><indexterm index="cp">Directives</indexterm><indexterm index="cp">Configuration, Directives</indexterm> If you are setting up a master/slave configuration, you will be required to make some modifications to the <file>apcupsd.conf</file> files after the build is done.</para>
      <para>The minimum set of configuration directive changes needed to create a proper master and slave configuration files is described in the <xref><xrefnodename>Configuration Examples</xrefnodename></xref> section of this manual.</para>
      <para>The details of these directives are explained in the <xref><xrefnodename>Configuration Directives for Sharing a UPS</xrefnodename><xrefprinteddesc>Configuration Directives for Sharing a UPS</xrefprinteddesc></xref> section of the Configuration chapter of this document.</para>
      <para>In addition, sample master and slave configuration files can be found in the <file>&lt;src&gt;/examples</file> directory (<file>apcupsd.master.conf</file> and <file>apcupsd.slave.conf</file>).</para>
    </section>
  </node>
  <node>
    <nodename>Master/Slave Problems</nodename>
    <nodenext>Network Problems with Master/Slave or Server/Slave Configurations</nodenext>
    <nodeprev>Configuration Directives</nodeprev>
    <nodeup>Master/Slave Configurations</nodeup>
    <section>
      <title>Master/Slave Problems</title>
      <para><indexterm index="cp">Master/Slave</indexterm><indexterm index="cp">Problems, Master/slave</indexterm></para>
      <menu>
        <menuentry>
          <menunode>Master/Slave Shutdown</menunode>
          <menutitle>Master/Slave Shutdown</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Server/Slave Networking using NIS and the NET Driver</menunode>
          <menutitle>Server/Slave Networking using NIS and the NET Driver</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Master/Slave Shutdown</nodename>
    <nodenext>Server/Slave Networking using NIS and the NET Driver</nodenext>
    <nodeup>Master/Slave Problems</nodeup>
    <subsection>
      <title>Master/Slave Shutdown</title>
      <para>For additional details of shutting down a master/slave configuration, please see the Master/Slave Shutdown section of the Shutdown chapter (see <xref><xrefnodename>Shutdown Sequence &lt;1&gt;</xrefnodename></xref>) of the Technical Reference.</para>
    </subsection>
  </node>
  <node>
    <nodename>Server/Slave Networking using NIS and the NET Driver</nodename>
    <nodeprev>Master/Slave Shutdown</nodeprev>
    <nodeup>Master/Slave Problems</nodeup>
    <subsection>
      <title>Server/Slave Networking using NIS and the NET Driver</title>
      <para><indexterm index="cp">NIS networking</indexterm><indexterm index="cp">Net driver</indexterm> It is also possible to implement a network of NIS server/slave apcupsds using the new 3.10.x code and the <strong>net</strong> driver. This mode of NIS server/slave networking is considerably different from the old method described at the beginning of this chapter. In the old code, there is a lot of configuration on both the master and slave side, and the master polls or sends info to the slave. Using the <strong>net</strong> driver is much simpler. However, you should carefully check that the NIS slave does a proper shutdown. In the master/slave code, the master ensures the best it can that the slave is shutdown or notified before it shuts down itself. On the other hand, using the net driver, the NIS server knows nothing about the NIS slaves that may be listening and thus takes no special precautions to ensure that the NIS slaves receive the shutdown signal. Since the NIS slave reads the master's data once per second there should be no shutdown problems, and our experience confirms this.  This question can only  be answered by carefully testing the shutdown.</para>
      <para>In this NIS server/slave mode, the NIS server is a standard stand alone configuration except that it must have <strong>NETSERVER on</strong> in the configuration file and have an <strong>NISPORT nnn</strong> defined. Thus any apcupsd running in this mode then becomes the NIS server.</para>
      <para>The NIS slave then uses the net driver to connect to the server's NIS output. In this mode, the NIS slave decides how often to poll the server for the NIS information. The NIS slave's conf file has <strong>UPSTYPE net</strong>, which will invoke the "network" driver. By setting this machine's <strong>DEVICE</strong> to be <strong>server-ip:server-NIS-port</strong> it will automatically connect to the NIS server and use the server's signals to shutdown the computer.  In the example net slave configuration file below, the slave uses the NIS information provided by the computer <strong>tibs</strong> on port <strong>3551</strong>.</para>
      <example xml:space="preserve">
## apcupsd.conf v1.1 ##
UPSCABLE ether
UPSTYPE net
# Specify the server name:port where NIS is running
DEVICE tibs:3551
LOCKFILE /var/lock
BATTERYLEVEL 5
MINUTES 3
TIMEOUT 0
ANNOY 300
ANNOYDELAY 60
NOLOGON disable
EVENTSFILE /etc/apcupsd/apcupsd.events
UPSCLASS standalone
UPSMODE disable
#
# Use this to control the poll time.
#  the default is 60 or 1 minute
#
NETTIME 30</example>
    </subsection>
  </node>
  <node>
    <nodename>Network Problems with Master/Slave or Server/Slave Configurations</nodename>
    <nodeprev>Master/Slave Problems</nodeprev>
    <nodeup>Master/Slave Configurations</nodeup>
    <section>
      <title>Network Problems with Master/Slave or Server/Slave Configurations</title>
      <para><indexterm index="cp">Problems, Master/Slave</indexterm><indexterm index="cp">Problems, networking</indexterm> When working with a master/slave or server/slave configurations (one UPS powering more than one computer), the master/server and slave communicate via the network. In many configurations, apcupsd is started before the network is initialized. In this case, it is possible that the master  will be unable to contact the slave. On apcupsd versions prior to 3.8.0, this could cause apcupsd to error off. The solution to this problem is to either force apcupsd to be started after the network and the DNS (fiddle the symbolic links in /etc/rc.d), or put the names of the slave machines in your <file>/etc/hosts</file> file, or even more preferable, use IP addresses rather than machine names. On some configurations, you may need to use fully qualified names (host.domain.xxx) rather than simple host names.</para>
      <menu>
        <menuentry>
          <menunode>Error Messages from a Master Configuration</menunode>
          <menutitle>Error Messages from a Master Configuration</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Error Messages from a Slave Configuration</menunode>
          <menutitle>Error Messages from a Slave Configuration</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Master/Slave Connection Not Working</menunode>
          <menutitle>Master/Slave Connection Not Working</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Error Messages from a Master Configuration</nodename>
    <nodenext>Error Messages from a Slave Configuration</nodenext>
    <nodeup>Network Problems with Master/Slave or Server/Slave Configurations</nodeup>
    <subsection>
      <title>Error Messages from a Master Configuration</title>
      <para>In a master/slave configuration, you can get the following error messages from a master. The error message is followed by a possible explanation:</para>
      <menu>
        <menuentry>
          <menunode>Cannot resolve slave name XXX</menunode>
          <menutitle>Cannot resolve slave name XXX</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Got slave shutdown from SSS</menunode>
          <menutitle>Got slave shutdown from SSS</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Cannot write to slave SSS</menunode>
          <menutitle>Cannot write to slave SSS</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Cannot read magic from slave SSS</menunode>
          <menutitle>Cannot read magic from slave SSS</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Connect to slave SSS failed</menunode>
          <menutitle>Connect to slave SSS failed</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Cannot open stream socket</menunode>
          <menutitle>Cannot open stream socket</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </subsection>
  </node>
  <node>
    <nodename>Cannot resolve slave name XXX</nodename>
    <nodenext>Got slave shutdown from SSS</nodenext>
    <nodeup>Error Messages from a Master Configuration</nodeup>
    <subsubsection>
      <title>Cannot resolve slave name XXX</title>
      <para>To contact the slave, the slave name given in the configuration file must be resolved to an IP address. In this case, apcupsd could not get the IP address. Either the slave name is incorrect, your DNS may not be working, or you have started apcupsd during the boot process before the network is operational.</para>
    </subsubsection>
  </node>
  <node>
    <nodename>Got slave shutdown from SSS</nodename>
    <nodenext>Cannot write to slave SSS</nodenext>
    <nodeprev>Cannot resolve slave name XXX</nodeprev>
    <nodeup>Error Messages from a Master Configuration</nodeup>
    <subsubsection>
      <title>Got slave shutdown from SSS</title>
      <para>This message should not be printed as it is not yet used.</para>
    </subsubsection>
  </node>
  <node>
    <nodename>Cannot write to slave SSS</nodename>
    <nodenext>Cannot read magic from slave SSS</nodenext>
    <nodeprev>Got slave shutdown from SSS</nodeprev>
    <nodeup>Error Messages from a Master Configuration</nodeup>
    <subsubsection>
      <title>Cannot write to slave SSS</title>
      <para>This message occurs when the master attempts to send a message to the slave SSS and gets an error. It indicates that either the slave machine is not responding (apcupsd died, the system crashed, ...) or that the network is down.</para>
    </subsubsection>
  </node>
  <node>
    <nodename>Cannot read magic from slave SSS</nodename>
    <nodenext>Connect to slave SSS failed</nodenext>
    <nodeprev>Cannot write to slave SSS</nodeprev>
    <nodeup>Error Messages from a Master Configuration</nodeup>
    <subsubsection>
      <title>Cannot read magic from slave SSS</title>
      <para>This message indicates that the master attempted to read the code key from the slave SSS and it did not match the value expected. A common cause of this problem is that the master and slave versions of apcupsd are not the same. Please be sure you are running the same version of apcupsd on all your master and slave machines.</para>
    </subsubsection>
  </node>
  <node>
    <nodename>Connect to slave SSS failed</nodename>
    <nodenext>Cannot open stream socket</nodenext>
    <nodeprev>Cannot read magic from slave SSS</nodeprev>
    <nodeup>Error Messages from a Master Configuration</nodeup>
    <subsubsection>
      <title>Connect to slave SSS failed</title>
      <para>This message is logged when the master attempts to connect to slave SSS and no connection is accepted. The most common cause of this problem is that the slave copy of apcuspd is not yet ready to accept connections or is not running. Generally, apcupsd will retry the connection a bit later. If the problem is persistent, it can indicate a network problem or the slave name on the SLAVE directive of the master's configuration file is incorrect.</para>
    </subsubsection>
  </node>
  <node>
    <nodename>Cannot open stream socket</nodename>
    <nodeprev>Connect to slave SSS failed</nodeprev>
    <nodeup>Error Messages from a Master Configuration</nodeup>
    <subsubsection>
      <title>Cannot open stream socket</title>
      <para>This indicates a fundamental networking problem on your system &mdash; either a lack of sufficient resources or you have not configured TCP/IP operations.</para>
    </subsubsection>
  </node>
  <node>
    <nodename>Error Messages from a Slave Configuration</nodename>
    <nodenext>Master/Slave Connection Not Working</nodenext>
    <nodeprev>Error Messages from a Master Configuration</nodeprev>
    <nodeup>Network Problems with Master/Slave or Server/Slave Configurations</nodeup>
    <subsection>
      <title>Error Messages from a Slave Configuration</title>
      <para>In a master/slave configuration, you can get the following error messages from a slave. The error message is followed by a possible explanation:</para>
      <menu>
        <menuentry>
          <menunode>Cannot resolve master name MMM</menunode>
          <menutitle>Cannot resolve master name MMM</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Cannot bind local address; probably already in use</menunode>
          <menutitle>Cannot bind local address, probably already in use</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Socket accept error</menunode>
          <menutitle>Socket accept error</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Unauthorized attempt from master MMM</menunode>
          <menutitle>Unauthorized attempt from master MMM</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Read failure from socket</menunode>
          <menutitle>Read failure from socket</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Bad APC magic from master; MMM</menunode>
          <menutitle>Bad APC magic from master; MMM</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Bad user magic from master; MMM</menunode>
          <menutitle>Bad user magic from master; MMM</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </subsection>
  </node>
  <node>
    <nodename>Cannot resolve master name MMM</nodename>
    <nodenext>Cannot bind local address; probably already in use</nodenext>
    <nodeup>Error Messages from a Slave Configuration</nodeup>
    <subsubsection>
      <title>Cannot resolve master name MMM</title>
      <para>This message is logged when the slave attempts to resolve the name given on the MASTER configuration directive to an IP address. It probably means that the master name MMM is not defined, your DNS is not properly working, or you have started apcupsd in the boot process before the network is initialized. Check the name MMM, or use an explicit IP address on the MASTER configuration directive in the slave's configuration file.</para>
    </subsubsection>
  </node>
  <node>
    <nodename>Cannot bind local address; probably already in use</nodename>
    <nodenext>Socket accept error</nodenext>
    <nodeprev>Cannot resolve master name MMM</nodeprev>
    <nodeup>Error Messages from a Slave Configuration</nodeup>
    <subsubsection>
      <title>Cannot bind local address, probably already in use</title>
      <para>This means that the slave has attempted to bind the port number so that it can listen for messages from the master. This can occur if already have a copy of apcupsd running, or you have previously run apcupsd in the past 5 or 10 minutes, because occasionally the operating system will not shutdown a port correctly for 5 to 10 minutes after a program exits. In this case, you can either wait a few minutes for the problem to go away, or use a different port in both your master and slave configuration files.</para>
    </subsubsection>
  </node>
  <node>
    <nodename>Socket accept error</nodename>
    <nodenext>Unauthorized attempt from master MMM</nodenext>
    <nodeprev>Cannot bind local address; probably already in use</nodeprev>
    <nodeup>Error Messages from a Slave Configuration</nodeup>
    <subsubsection>
      <title>Socket accept error</title>
      <para>The slave got an error waiting on the accept() system call. This is probably due to a fundamental networking problem.</para>
    </subsubsection>
  </node>
  <node>
    <nodename>Unauthorized attempt from master MMM</nodename>
    <nodenext>Read failure from socket</nodenext>
    <nodeprev>Socket accept error</nodeprev>
    <nodeup>Error Messages from a Slave Configuration</nodeup>
    <subsubsection>
      <title>Unauthorized attempt from master MMM</title>
      <para>The master named MMM (probably an IP address) contacted the slave but MMM is not the master that was listed on the MASTER configuration directive in /etc/apcupsd.conf, and consequently, it is not authorized to communicate with the slave. Please check that your MASTER and SLAVE names in your slave and master configuration files respectively are correct.</para>
    </subsubsection>
  </node>
  <node>
    <nodename>Read failure from socket</nodename>
    <nodenext>Bad APC magic from master; MMM</nodenext>
    <nodeprev>Unauthorized attempt from master MMM</nodeprev>
    <nodeup>Error Messages from a Slave Configuration</nodeup>
    <subsubsection>
      <title>Read failure from socket</title>
      <para>The slave got an error reading the socket open to the master. This indicates a fundamental networking problem.</para>
    </subsubsection>
  </node>
  <node>
    <nodename>Bad APC magic from master; MMM</nodename>
    <nodenext>Bad user magic from master; MMM</nodenext>
    <nodeprev>Read failure from socket</nodeprev>
    <nodeup>Error Messages from a Slave Configuration</nodeup>
    <subsubsection>
      <title>Bad APC magic from master: MMM</title>
      <para>The slave received a code key from the master that does not correspond to the one expected by the slave. The most common cause of this problem is that you are running a different version of apcupsd on the master and the slave. Please ensure that you are running the same version of apcupsd on all your master and slaves.</para>
    </subsubsection>
  </node>
  <node>
    <nodename>Bad user magic from master; MMM</nodename>
    <nodeprev>Bad APC magic from master; MMM</nodeprev>
    <nodeup>Error Messages from a Slave Configuration</nodeup>
    <subsubsection>
      <title>Bad user magic from master: MMM</title>
      <para>This message indicates that the master and slave have previously communicated, but that the code key transmitted with the most recent message from the master does not correspond to what the slave expects. This problem is probably due to a network error or some other user or machine contacting the slave on the network port.</para>
    </subsubsection>
  </node>
  <node>
    <nodename>Master/Slave Connection Not Working</nodename>
    <nodeprev>Error Messages from a Slave Configuration</nodeprev>
    <nodeup>Network Problems with Master/Slave or Server/Slave Configurations</nodeup>
    <subsection>
      <title>Master/Slave Connection Not Working</title>
      <para>Master/slave problems are usually related to one of the following items:</para>
      <enumerate first="1">
        <item>
          <para>Improper apcupsd.conf files. A good starting point are the master/slave example files in the examples subdirectory of the source.</para>
        </item>
        <item>
          <para>Master or slave IP address or name incorrect. Try ping'ing each machine from the other using the names or addresses that you have put in the respective apcupsd.conf files.</para>
        </item>
        <item>
          <para>Make sure no other program is using socket number 6666 or change the NETPORT directive in both apcupsd.conf files.</para>
        </item>
        <item>
          <para>Make sure you are using the same version of apcupsd on both the master and slave machines.</para>
        </item>
      </enumerate>
    </subsection>
  </node>
  <node>
    <nodename>Controlling Multiple UPSes on one Machine</nodename>
    <nodenext>Support for SNMP UPSes</nodenext>
    <nodeprev>Master/Slave Configurations</nodeprev>
    <nodeup>Advanced topics</nodeup>
    <chapter>
      <title>Controlling Multiple UPSes on one Machine</title>
      <para>You may want to use your server to control multiple UPSes. This is possible by proper configuration and by running one copy of apcupsd for each UPS to be controlled (recall the <xref><xrefnodename>Configuration types_</xrefnodename><xrefprinteddesc>Configuration types.</xrefprinteddesc></xref>).</para>
      <menu>
        <menuentry>
          <menunode>Configuration</menunode>
          <menutitle>Configuration</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Configuration</nodename>
    <nodeup>Controlling Multiple UPSes on one Machine</nodeup>
    <section>
      <title>Configuration</title>
      <para>The way to accomplish the above is to ensure that none of the critical files used by each of the two copies of apcupsd are the same. By using suitable configuration options, this is possible.</para>
      <menu>
        <menuentry>
          <menunode>The First Copy of apcupsd</menunode>
          <menutitle>The First Copy of apcupsd</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>The Second Copy of apcupsd</menunode>
          <menutitle>The Second Copy of apcupsd</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Important Steps after Installation of the Second Copy</menunode>
          <menutitle>Important Steps after Installation of the Second Copy</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </section>
  </node>
  <node>
    <nodename>The First Copy of apcupsd</nodename>
    <nodenext>The Second Copy of apcupsd</nodenext>
    <nodeup>Configuration</nodeup>
    <subsection>
      <title>The First Copy of apcupsd</title>
      <para>For example, assuming you have SmartUPSes in both cases, to configure and install the first copy of apcupsd, which controls a UPS and Computer A, one could use the following configuration:</para>
      <example xml:space="preserve">
./configure \
  --prefix=/usr \
  --sbindir=/sbin \
  --with-cgi-bin=/home/http/cgi-bin \
  --enable-cgi \
  --with-css-dir=/home/http/css \
  --with-log-dir=/etc/apcupsd \
  --with-serial-dev=/dev/ttyS0 \
  --enable-pthreads \
  --with-nis-port=3551 \
  --enable-powerflute</example>
      <para>This is pretty much a "normal" installation using many of the defaults. Once built and installed, this would control the first UPS and cause a shutdown of the system when the batteries are low.  This copy of apcupsd will be started and stopped automatically when the system is booted and halted.</para>
    </subsection>
  </node>
  <node>
    <nodename>The Second Copy of apcupsd</nodename>
    <nodenext>Important Steps after Installation of the Second Copy</nodenext>
    <nodeprev>The First Copy of apcupsd</nodeprev>
    <nodeup>Configuration</nodeup>
    <subsection>
      <title>The Second Copy of apcupsd</title>
      <para><indexterm index="cp">Two apcupsds</indexterm> To configure and install the second copy of apcupsd, which controls the second UPS and Computer B, you could use the following configuration:</para>
      <example xml:space="preserve">
./configure \
  --prefix=$HOME/apcupsd/bin \
  --sbindir=$HOME/apcupsd/bin \
  --enable-cgi \
  --with-cgi-bin=$HOME/apcupsd/bin \
  --with-log-dir=$HOME/apcupsd/bin \
  --with-pid-dir=$HOME/apcupsd/bin \
  --sysconfdir=$HOME/apcupsd/bin \
  --with-lock-dir=$HOME/apcupsd/bin \
  --with-pwrfail-dir=$HOME/apcupsd/bin \
  --with-serial-dev=/dev/ttyS1 \
  --enable-pthreads \
  --with-nis-port=7001 \
  --disable-install-distdir</example>
      <para>Note, in this case, we use considerably more configuration options to ensure that the system files are placed in a different directory (<file>$HOME/apcupsd/bin</file>). We have also selected a different serial port and a different NIS (Network Information Server) port. And finally, we have used the <code>--disable-install-distdir</code> option, which prevents <code>make install</code> from doing the final system installation (i.e. the modification of the halt script) since this was previously done.</para>
    </subsection>
  </node>
  <node>
    <nodename>Important Steps after Installation of the Second Copy</nodename>
    <nodeprev>The Second Copy of apcupsd</nodeprev>
    <nodeup>Configuration</nodeup>
    <subsection>
      <title>Important Steps after Installation of the Second Copy</title>
      <para>After the <code>make install</code> of the second copy of apcupsd there are a number important steps to complete. You must either remove or modify the file <file>$HOME/apcupsd/bin/apccontrol</file>, so that it will not shutdown Computer A when the battery of UPS 2 is low. One suggestion is to copy <file>examples/safe.apccontrol</file> into <file>$HOME/apcupsd/bin/apccontrol</file>. Alternatively, you could edit the <file>$HOME/apcupsd/bin/apccontrol</file> and delete all statements that attempt to shutdown the machine. Another important step is to find a way to shutdown Computer B when UPS 2's battery is low.  Probably the simplest way to do this is to edit <file>$HOME/apcupsd/bin/apcupsd.conf</file> on Computer A so that this second copy of apcupsd becomes a network master. Then install a standard slave configuration on Computer B. Please remember that if UPS 1's batteries are exhausted before UPS 2's batteries, Computer B may not be properly shutdown. And at the current time, there is no simple means to make the two copies of apcupsd running on Computer A communicate. Thus there are certain risks in such a configuration. However, these configurations can be very useful for powering electronic equipment and such.</para>
      <para>If Computer B is vitally important, it would probably be better to purchase a serial port card for it, or perhaps use a USB UPS. To ensure that it is properly shutdown if Computer A goes down, you could run a second copy of apcupsd on Computer B as a slave connected to the main copy of apcupsd on Computer A. Thus Computer B would be running two slaves, one driven by the master controlling UPS 1 and the other by the master controlling UPS 2, and Computer B could be shutdown by the first master that signaled it to do so.</para>
    </subsection>
  </node>
  <node>
    <nodename>Support for SNMP UPSes</nodename>
    <nodenext>Alternate Ways To Run The Network Information Server</nodenext>
    <nodeprev>Controlling Multiple UPSes on one Machine</nodeprev>
    <nodeup>Advanced topics</nodeup>
    <chapter>
      <title>Support for SNMP UPSes</title>
      <para><indexterm index="cp">SNMP</indexterm> <uref><urefurl>snmp</urefurl><urefdesc>snmp</urefdesc></uref> To run apcupsd with an SNMP UPS, you need the following things:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>An SNMP UPS, for example a Web/SNMP card installed into the SmartSlot.</para>
        </item>
        <item>
          <para>apcupsd version 3.10.0 or higher</para>
        </item>
        <item>
          <para><uref><urefurl>http://www.net-snmp.org/</urefurl><urefdesc>Net-SNMP</urefdesc></uref> library (previously known as ucd-snmp) installed</para>
        </item>
      </itemize>
      <menu>
        <menuentry>
          <menunode>Connecting an SNMP UPS</menunode>
          <menutitle>Connecting an SNMP UPS</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Building and Installing apcupsd &lt;1></menunode>
          <menutitle>Building and Installing apcupsd</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>SNMP Specific Information</menunode>
          <menutitle>SNMP Specific Information</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Known Problems</menunode>
          <menutitle>Known Problems</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Connecting an SNMP UPS</nodename>
    <nodenext>Building and Installing apcupsd &lt;1&gt;</nodenext>
    <nodeup>Support for SNMP UPSes</nodeup>
    <section>
      <title>Connecting an SNMP UPS</title>
      <para><indexterm index="cp">SNMP, Connecting</indexterm> The Simple Network Management Protocol provides an interface to connect to remote devices through the network. apcupsd is now capable of using the SNMP interface of an SNMP-enabled UPS to communicate with an UPS. Currently apcupsd supports only APC's PowerNet MIB. To enable the SNMP support it is enough to configure the correct device in your apcupsd.conf configuration file. The directive needed for this configuration is:</para>
      <example xml:space="preserve">
DEVICE 192.168.100.2:161:APC:private</example>
      <para>where the directive is made by four parts:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>IP address of the remote UPS</para>
        </item>
        <item>
          <para>Remote SNMP port</para>
        </item>
        <item>
          <para>Kind of remote SNMP agent, currently can only be "APC" for APC's powernet MIB</para>
        </item>
        <item>
          <para>The read-write community string, usually it is "private" for read-write access.</para>
        </item>
      </itemize>
    </section>
  </node>
  <node>
    <nodename>Building and Installing apcupsd &lt;1&gt;</nodename>
    <nodenext>SNMP Specific Information</nodenext>
    <nodeprev>Connecting an SNMP UPS</nodeprev>
    <nodeup>Support for SNMP UPSes</nodeup>
    <section>
      <title>Building and Installing apcupsd</title>
      <para>Follow the instructions in <xref><xrefnodename>Building and Installing apcupsd</xrefnodename></xref>l, being sure to include the following options (in addition to any others you need) on the <strong>./configure</strong> line:</para>
      <example xml:space="preserve">
./configure \
--with-serial-dev=&lt;your-SNMP-device&gt; \
--with-upstype=snmp \
--with-upscable=smart \
--enable-pthreads \
--enable-snmp</example>
    </section>
  </node>
  <node>
    <nodename>SNMP Specific Information</nodename>
    <nodenext>Known Problems</nodenext>
    <nodeprev>Building and Installing apcupsd &lt;1&gt;</nodeprev>
    <nodeup>Support for SNMP UPSes</nodeup>
    <section>
      <title>SNMP Specific Information</title>
      <para><indexterm index="cp">SNMP</indexterm> The SNMP connection gives less information compared to a serial smart cable. This is not a problem as the most useful information is given, together with a number of secondary parameters that are informative enough to run safely your UPS.</para>
    </section>
  </node>
  <node>
    <nodename>Known Problems</nodename>
    <nodeprev>SNMP Specific Information</nodeprev>
    <nodeup>Support for SNMP UPSes</nodeup>
    <section>
      <title>Known Problems</title>
      <para>Currently (as of 3.10.0) the code to power off the UPS needs special configuration. The killpower command for SNMP UPSes can not be issued during shutdown as typically at some time during shutdown operations the network stack is stopped. To overcome this problem it is needed to modify the <file>/etc/rc.d/apcupsd</file> system control script to tell apcupsd to issue the power down command (killpower) to the UPS immediately before apcupsd initiates the system shutdown. For this reason it is paramount to set your UPS grace time to a value greater than 120 seconds to allow for clean shutdown operations before the UPS removes the power from its plugs. To enable correct shutdown operation during powerdown do the following:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>Connect to your Web/SNMP card using your favorite web browser, go to the UPS configuration menu and change the "Shutdown Delay" parameter to 180 seconds or more, depending on how much time your system shutdown requires to umount all the filesystems.</para>
        </item>
        <item>
          <para>Change /etc/rc.d/apcupsd script adding the '&ndash;kill-on-powerfail' to the apcupsd invocation.</para>
        </item>
        <item>
          <para>Restart your apcupsd</para>
        </item>
      </itemize>
      <para>With this setup your UPS operations should be safe.</para>
    </section>
  </node>
  <node>
    <nodename>Alternate Ways To Run The Network Information Server</nodename>
    <nodenext>apcupsd System Logging</nodenext>
    <nodeprev>Support for SNMP UPSes</nodeprev>
    <nodeup>Advanced topics</nodeup>
    <chapter>
      <title>Alternate Ways To Run The Network Information Server</title>
      <para><indexterm index="cp">NIS alternate was of running</indexterm> apcupsd maintains STATUS and EVENTS data concerning the UPS and its operation. This information can be obtained over the network using either apcnisd or apcupsd's internal network information server, which is essentially the same code as apcnisd but compiled into apcupsd. Clients on the network make a connection to the information server and send requests for status or events data, which the server then transmits to them.</para>
      <para>The information served to the network by this interface should not be confused with master/slave mode that shares a UPS between two or more computers. That code is described in <xref><xrefnodename>Configuration Directives for Sharing a UPS</xrefnodename><xrefprinteddesc>Configuration Directives for Sharing a UPS</xrefprinteddesc></xref> of this documentation.</para>
      <para>There are three different ways to run the information server depending on your requirements and preferences. It can be run as 1.  a standalone program, 2. a standalone program invoked by the inetd daemon, or 3. as a thread (or child process) of apcupsd (default configuration). We recommend option 3 unless you have specific reasons to do otherwise. Option 3 is what is configured in by default.</para>
      <menu>
        <menuentry>
          <menunode>Running the server as a child of apcupsd</menunode>
          <menutitle>Running the server as a child of apcupsd</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Running apcnisd from INETD</menunode>
          <menutitle>Running apcnisd from INETD</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Running apcnisd Standalome</menunode>
          <menutitle>Running apcnisd Standalome</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Running the server as a child of apcupsd</nodename>
    <nodenext>Running apcnisd from INETD</nodenext>
    <nodeup>Alternate Ways To Run The Network Information Server</nodeup>
    <section>
      <title>Running the server as a child of apcupsd</title>
      <para>This is probably the simplest way to run the network information server. To do so, you simply make sure the <strong>NETSERVER</strong> directive in <file>/etc/apcupsd/apcupsd.conf</file> is <strong>on</strong>, and then stop and restart apcupsd. It will automatically create the server thread (or spawn an additional child process named apcnis) to handle network clients. In the case where pthreads are enabled, a new thread will be created rather than a child process to handle the network information requests. Note, the above modification should not be necessary if you use the default <file>apcupsd.conf</file>, since it is already turned on.</para>
      <para>Although this method is simple, it affords no protection from the outside world accessing your network server unless you are behind a firewall. In addition, if there is a bug in the network server code, or if a malicious user sends bad data, it may be possible for apcnis to die, in which case, though it is not supposed to, apcupsd may also exit, thus leaving your machine without shutdown protection. In addition, since apcupsd is running at root level, all threads or any child process will do so also. That being said, most of us prefer to run the server this way.</para>
      <para>With apcupsd version 3.8.2 and later, you may enable the TCP Libwrap subroutines to add additional security. In this case, access to the network server will be controlled by the statements you put in <file>/etc/hosts.allow</file>.</para>
    </section>
  </node>
  <node>
    <nodename>Running apcnisd from INETD</nodename>
    <nodenext>Running apcnisd Standalome</nodenext>
    <nodeprev>Running the server as a child of apcupsd</nodeprev>
    <nodeup>Alternate Ways To Run The Network Information Server</nodeup>
    <section>
      <title>Running apcnisd from INETD</title>
      <para>This is probably the most secure and most desirable way of running the network information server. Unfortunately, it is a bit more complicated to set up. However, once running, the server remains unexecuted until a connection is attempted, at which point, inetd will invoke apcnisd. Once apcnisd has responded to the client's requests, it will exit. None of the disadvantages of running it standalone apply since apcnisd runs only when a client is requesting data. Note, running in this manner works only if you are using the old forking code and have pthreads explicitly turned off. The pthreads version of apcupsd does not support the shared memory calls that are necessary for apcnisd to access the internal state of apcupsd.</para>
      <para>An additional advantage of this method of running the network information server is that you can call it with a TCP wrapper and thus use access control lists (ACL) such as <file>hosts.allow</file>. See the man pages for <file>hosts.allow</file> for more details.</para>
      <para>To configure apcnisd to run from INETD, you must first put an entry in <file>/etc/services</file> as follows:</para>
      <example xml:space="preserve">
apcnisd         3551/tcp</example>
      <para>This defines the port number (3551) and the service (TCP) that apcnisd will be using. This statement can go anywhere in the services file. Normally, one adds local changes such as these to the end of the file.</para>
      <para>Next, you must modify <file>/etc/inetd.conf</file> to have the following line:</para>
      <example xml:space="preserve">
apcnisd stream  tcp     nowait  root    /usr/sbin/tcpd  /sbin/apcnisd -i</example>
      <para>If you do not want to run the TCP wrapper, then the line should be entered as follows (not tested):</para>
      <example xml:space="preserve">
apcnisd stream  tcp     nowait  root    /sbin/apcnisd -i</example>
      <para>Please check that the file locations are correct for your system. Also, note that the <code>-i</code> option is necessary so that apcnisd knows that it was called by INETD. Before restarting INETD, first ensure that the <strong>NETSERVER</strong> directive in <file>/etc/apcupsd/apcupsd.conf</file> is set to <strong>off</strong>. This is necessary to prevent apcupsd from starting a child process that acts as a server. If you change <strong>NETSERVER</strong>, you must stop and restart apcupsd for the configuration change to be effective.</para>
      <para>Finally, you must restart INETD for it to listen on port 3551. On a Red Hat system, you can do so by:</para>
      <example xml:space="preserve">
/etc/rc.d/init.d/inet reload</example>
      <para>At this point, when a client attempts to make a connection on port 3551, INETD will automatically invoke apcnisd.</para>
    </section>
  </node>
  <node>
    <nodename>Running apcnisd Standalome</nodename>
    <nodeprev>Running apcnisd from INETD</nodeprev>
    <nodeup>Alternate Ways To Run The Network Information Server</nodeup>
    <section>
      <title>Running apcnisd Standalome</title>
      <para>This is probably the least desirable of the three ways to run an apcupsd network information server because if apcupsd is stopped, you must also stop apcnisd before you can restart apcupsd. This is because apcnisd, when run standalone, holds the shared memory buffer by which apcnisd and apcupsd communicate. This prevents a new execution of apcupsd from creating it.</para>
      <para>To execute apcnisd in standalone mode, first ensure that the <strong>NETSERVER</strong> directive in <strong>/etc/apcupsd/apcupsd.conf</strong> is set to <strong>off</strong>. This is necessary to prevent apcupsd from starting a child process that acts as a server. Restart apcupsd normally, then:</para>
      <example xml:space="preserve">
/sbin/apcnisd</example>
      <para>The advantage of running the network information server standalone is that if for some reason, a client causes the network server to crash, it will not affect the operation of apcupsd.</para>
    </section>
  </node>
  <node>
    <nodename>apcupsd System Logging</nodename>
    <nodeprev>Alternate Ways To Run The Network Information Server</nodeprev>
    <nodeup>Advanced topics</nodeup>
    <chapter>
      <title>apcupsd System Logging</title>
      <para><indexterm index="cp">Logging, System</indexterm><indexterm index="cp">System Logging</indexterm> The apcupsd philosophy is that all logging should be done through the <strong>syslog</strong> facility (see: <code>man syslog</code>). This is now implemented with the exceptions that <strong>STATUS</strong> logging, for compatibility, with prior versions is still done to a file, and <strong>EVENTS</strong> logging can be directed to a "temporary" file so that it can be reported by the network information server.</para>
      <menu>
        <menuentry>
          <menunode>Logging Types</menunode>
          <menutitle>Logging Types</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Implementation Details</menunode>
          <menutitle>Implementation Details</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Developers Notes</menunode>
          <menutitle>Developers Notes</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Logging Types</nodename>
    <nodenext>Implementation Details</nodenext>
    <nodeup>apcupsd System Logging</nodeup>
    <section>
      <title>Logging Types</title>
      <para><indexterm index="cp">Logging, types</indexterm> apcupsd splits its logging into four separate types called:</para>
      <enumerate first="1">
        <item>
          <para>DEBUG</para>
        </item>
        <item>
          <para>DATA</para>
        </item>
        <item>
          <para>STATUS</para>
        </item>
        <item>
          <para>EVENTS</para>
        </item>
      </enumerate>
      <para>Debug logging consists of debug messages. Normally these are turned on only by developers, and currently there exist very few of these debug messages. </para>
      <unnumberedsubsubsec>
        <title>DATA Logging</title>
        <para>Data logging consists of periodically logging important data concerning the operation of the UPS. See the Data Logging (see <xref><xrefnodename>DATA Logging</xrefnodename></xref>) section of this manual for more details.</para>
      </unnumberedsubsubsec>

      <unnumberedsubsubsec>
        <title>STATUS Logging</title>
        <para>Status logging consists of logging all available information known about your UPS as a series of ASCII records. This information is also made available by the apcupsd network information server.</para>
        <para>For more details on STATUS logging, see the Status (see <xref><xrefnodename>apcupsd Status Logging</xrefnodename></xref>) section of the Technical Reference.</para>
      </unnumberedsubsubsec>

      <unnumberedsubsubsec>
        <title>EVENTS Logging</title>
        <para>Events logging consists of logging events as they happen. For example, successful startup, power fail, battery failure, system shutdown, ...</para>
        <para>See the manual section on customizing event handling (see <xref><xrefnodename>Customizing Event Handling</xrefnodename></xref>) for more details.</para>
      </unnumberedsubsubsec>
    </section>
  </node>
  <node>
    <nodename>Implementation Details</nodename>
    <nodenext>Developers Notes</nodenext>
    <nodeprev>Logging Types</nodeprev>
    <nodeup>apcupsd System Logging</nodeup>
    <section>
      <title>Implementation Details</title>
      <para>In order to ensure that the data logged to syslog() can be directed to different files, I have assigned syslog() levels to each of our four types of data as follows:</para>
      <enumerate first="1">
        <item>
          <para>1. DEBUG logging has level LOG_DEBUG</para>
        </item>
        <item>
          <para>2. DATA logging has level LOG_INFO</para>
        </item>
        <item>
          <para>3. STATUS logging has level LOG_NOTICE</para>
        </item>
        <item>
          <para>4. EVENTS logging has levels LOG_WARNING, LOG_ERR, LOG_CRIT, and LOG_ALERT</para>
        </item>
      </enumerate>
      <para>It should be noted that more work needs to be done on the precise definitions of each of the levels for EVENTS logging. Currently, it is roughly broken down as follows:</para>
      <para>LOG_WARNING general information such as startup, etc.</para>
      <para>LOG_ERR an error condition detected, e.g. communications problem with the UPS.</para>
      <para>LOG_CRIT a serious problem has occurred such as power failure, running on UPS batteries, ...</para>
      <para>LOG_ALERT a condition that needs immediate attention such as pending system shutdown, ...</para>
      <para>The default Facility for syslog() logging is DAEMON, although this can be changed with the FACILITY directive in apcupsd.conf. In the following example, we should the facility as local0.</para>
      <para>More work needs to be done to the code to ensure that it corresponds to the above levels.</para>
      <para>As a practical example of how to setup your syslog() to use the new logging feature, suppose you wish to direct all DATA logging to a file named <file>/var/log/apcupsd.data</file>, all EVENTS to the standard <file>/var/log/messages</file> file (to be mixed with other system messages), and at the same time send all EVENTS to <file>/var/log/apcupsd.events</file>, and finally, you want to send all STATUS logging to the named pipe <file>/var/log/apcupsd.status</file></para>
      <para>First as root, you create the named pipe:</para>
      <example xml:space="preserve">
mkfifo /var/log/apcupsd.status</example>
      <para>Change its permissions as necessary or use the -m option to set them when creating the pipe.</para>
      <para>Then you modify your <file>/etc/syslog.conf</file> file to direct the appropriate levels of messages where you want them. To accomplish the above, my syslog.conf file looks like:</para>
      <example xml:space="preserve">
# exclude all apcupsd info by default
*.info;local0.none                    /var/log/messages

# Everything for apcupsd goes here
local0.info;local0.!notice             /var/log/apcupsd.data
local0.notice;local0.!warn            |/var/log/apcupsd.status
local0.warn                            /var/log/apcupsd.events
local0.warn                            /var/log/messages</example>
    </section>
  </node>
  <node>
    <nodename>Developers Notes</nodename>
    <nodeprev>Implementation Details</nodeprev>
    <nodeup>apcupsd System Logging</nodeup>
    <section>
      <title>Developers Notes</title>
      <para><indexterm index="cp">Developers Notes</indexterm> All logging functions and all error reporting are now done through the log_event() subroutine call. Exceptions to this are: initialization code where printf's are done, and writing to the status file. Once the initialization code has completed and the fork() to become a daemon is done, no printf's are used. log_event() has exactly the same format as syslog(). In fact, the subroutine consists of only a syslog() call. If anyone really wishes to log to a file, the code to do so can easily be done by adding code to log_event() in apclog.c.</para>
    </section>
  </node>
  <node>
    <nodename>Installation on Windows</nodename>
    <nodenext>Installation on Serial-Line UPSes</nodenext>
    <nodeprev>Advanced topics</nodeprev>
    <nodeup>Top</nodeup>
    <majorheading>Installation: Windows</majorheading>
    <para><indexterm index="cp">Installation, Windows</indexterm><indexterm index="cp">Windows, Installation</indexterm></para>
    <menu>
      <menuentry>
        <menunode>The Windows Version of apcupsd</menunode>
        <menutitle>The Windows Version of apcupsd</menutitle>
        <menucomment></menucomment>
      </menuentry>
    </menu>
  </node>
  <node>
    <nodename>The Windows Version of apcupsd</nodename>
    <nodeup>Installation on Windows</nodeup>
    <chapter>
      <title>The Windows Version of apcupsd</title>
      <para>The Windows version of apcupsd has been tested on Win95, Win98, WinMe, WinNT, WinXP, and Win2000 systems. This version of apcupsd has been built to run under the CYGWIN environment, which provides many of the features of Unix on Windows systems. It also permitted a rapid port with very few source code changes, which means that the Windows version is for the most part running code that has long proved stable on Unix systems. Even though the Win32 version of apcupsd is a port that relies on many Unix features, it is just the same a true Windows program. When running, it is perfectly integrated with Windows and displays its icon in the system icon tray, and provides a system tray menu to obtain additional information on how apcupsd is running (status and events dialogue boxes). If so desired, it can also be stopped by using the system tray menu, though this should normally never be necessary.</para>
      <para>Once installed apcupsd normally runs as a system service.  This means that it is immediately started by the operating system when the system is booted, and runs in the background even if there is no user logged into the system.</para>
      <menu>
        <menuentry>
          <menunode>Installation</menunode>
          <menutitle>Installation</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Installation Directory</menunode>
          <menutitle>Installation Directory</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Testing</menunode>
          <menutitle>Testing</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Upgrading</menunode>
          <menutitle>Upgrading</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Post Installation</menunode>
          <menutitle>Post Installation</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Problem Areas</menunode>
          <menutitle>Problem Areas</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Utility Functions</menunode>
          <menutitle>Utility Functions</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Disclaimer</menunode>
          <menutitle>Disclaimer</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Email Notification of Events</menunode>
          <menutitle>Email Notification of Events</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Killpower under Windows</menunode>
          <menutitle>Killpower under Windows</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Power Down During Shutdown</menunode>
          <menutitle>Power Down During Shutdown</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Command Line Options Specific to the Windows Version</menunode>
          <menutitle>Command Line Options Specific to the Windows Version</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Building the Win32 Version from the Source</menunode>
          <menutitle>Building the Win32 Version from the Source</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Installation</nodename>
    <nodenext>Installation Directory</nodenext>
    <nodeup>The Windows Version of apcupsd</nodeup>
    <section>
      <title>Installation</title>
      <para>Normally, you will install the Windows version of apcupsd from the binaries. This install is somewhat Unix like since you do many parts of the installation by hand. To install the binaries, you need <strong>WinZip</strong>.</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>Simply double click on the <file>winapcupsd-3.8.5.tar.gz</file> icon.  The actual name of the icon will vary from one release version to another.</para>
          <sp lines="1"></sp>
          <image width="" height="" name="wininstall3" extension="png"><alttext></alttext></image>
          <sp lines="1"></sp>
        </item>
        <item>
          <para>When Zip says that it has one file and asks if it should unpack it into a temporary file, respond with <strong>Yes</strong>.</para>
          <sp lines="1"></sp>
          <image width="" height="" name="wininstall4" extension="png"><alttext></alttext></image>
          <sp lines="1"></sp>
        </item>
        <item>
          <para>Ensure that you extract all files and that the extraction will go into <file>C:\</file></para>
          <sp lines="1"></sp>
          <image width="" height="" name="wininstall5" extension="png"><alttext></alttext></image>
          <sp lines="1"></sp>
        </item>
      </itemize>
      <para>If you wish to install the package elsewhere, please note that you will need to proceed with a manual installation, which is not particularly easy as you must rebuild the source and change the configuration file as well.</para>
      <para>This installation assumes that you do <strong>not</strong> have CYGWIN installed on your computer. If you do, and you use mount points, you may need to do a special manual installation.</para>
      <para>Once you have unzipped the binaries, open a window pointing to the binary installation folder (normally <file>c:\apcupsd</file>). This folder should contain folders with the name bin, etc, examples, and manual. If and when you no longer need them, the examples and manual sub-folders of the <file>c:\apcupsd</file> directory may be removed.</para>
      <para>Continuing the installation process:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>Open the directory <file>c:\apcupsd\etc\apcupsd</file> in the Windows Explorer by Clicking on the apcupsd folder then on the <file>etc</file> folder, then on the apcupsd folder. Finally double click on the file <file>apcupsd.conf</file> and edit it to contain the values appropriate for your site. In most cases, no changes will be needed, but if you are not using COM1 for your serial port, you will need to set the <strong>DEVICE</strong> configuration directive to the correct serial port. Note, if you are using WinNT or Win2000, the operating system may probe the port attempting to attach a serial mouse. This will cause apcupsd to be unable to communicate with the serial port. If this happens, or out of precaution, you can edit the <file>c:\boot.ini</file> file. Find the line that looks something like the following:</para>
          <para>multi(0)disk(0)rdisk(0)partition(1)\WINNT="Windows NT Workstation Version 4.00"</para>
          <para>and add the following to the end of the line: /NoSerialMice:COM1 (or COM2 depending on what you want to use). The new line should look similar to:</para>
          <para>multi(0)disk(0)rdisk(0)partition(1)\WINNT="Windows NT Workstation Version 4.00" /NoSerialMice:COM1</para>
          <para>where the only thing you have changed is to append to the end of the line. This addition will prevent the operating system from interferring with apcupsd</para>
        </item>
        <item>
          <para>Then return to <file>c:\apcupsd</file> and open on the <file>bin</file> folder so that you see its contents.</para>
        </item>
        <item>
          <para>To do the final step of installation, double click on the <file>setup.bat</file> program. This script will setup the appropriate mount points for the directories that apcupsd uses, it will install apcupsd in the system registry, and on Windows 98, it will start apcupsd running.</para>
          <para>If everything went well, you will get something similar to the following output in a DOS shell window:</para>
          <sp lines="1"></sp>
          <image width="" height="" name="wininstall1" extension="png"><alttext></alttext></image>
          <sp lines="1"></sp>
          <para>What is important to verify in the DOS window is that the root directory <file>\</file> is mounted on device <file>c:\</file>.</para>
          <para>The DOS window will be followed immediately by a Windows dialogue box as follows:</para>
          <sp lines="1"></sp>
          <image width="" height="" name="wininstall2" extension="png"><alttext></alttext></image>
          <sp lines="1"></sp>
        </item>
        <item>
          <para>On Windows 98, to actually start the service, either reboot the machine, which is not necessary, or open a DOS shell window, and type the following commands:</para>
          <example xml:space="preserve">
    cd c:\apcupsd\bin
    apcupsd /service
</example>
          <para>Alternatively, you can go to the <file>c:\apcupsd\bin</file> folder with the Explorer and double click on the <strong>Start</strong> icon.</para>
        </item>
        <item>
          <para>On Windows NT, to start the service, either reboot the machine, which is not necessary, or go to the Control Panel, open the Services folder and start the apcupsd daemon program by selecting the apcupsd UPS Server and then clicking on the Start button as shown below:</para>
          <sp lines="1"></sp>
          <image width="" height="" name="wininstall6" extension="png"><alttext></alttext></image>
          <sp lines="1"></sp>
          <para>If the Services dialog reports a problem, it is normally because your DEVICE statement does not contain the correct serial port name.</para>
        </item>
      </itemize>
      <para>You probably should also click on the <strong>Startup...</strong> button to ensure that the correct defaults are set. The dialogue box that appears should have <strong>Startup Type</strong> set to <strong>Automatic</strong> and <strong>Logon</strong> should be set to <strong>System Account</strong> with <strong>Allow Service to Interact with Desktop</strong> checked. If these values are not set correctly by default, please change them otherwise apcupsd will not work.</para>
      <para>For WinXP systems (and probably Win2K), the dialogs are a bit different from those shown here for WinNT, but he concept is the same. You get to the Services dialog by clicking on: <strong>Control Panel -&gt; Administrative Tools -&gt; Component Services</strong>. The apcupsd service should appear in the right hand window when you click on <strong>Services (Local)</strong> in the left hand menu window.</para>
      <para>That should complete the installation process. When the system tray icon turns from a battery <inlineimage width="" height="" name="onbatt" extension="png"><alttext></alttext></inlineimage> into a plug <inlineimage width="" height="" name="online" extension="png"><alttext></alttext></inlineimage>, right click on it and a menu will appear. Select the <strong>Events</strong> item, and the Events dialogue box should appear. There should be no error messages. By right clicking again on the system tray plug and selecting the <strong>Status</strong> item, you can verify that all the values for your UPS are correct.</para>
      <para>When the UPS switches to the battery, the battery icon will reappear in the system tray. While the UPS is online, if the battery is not at least 99% charged, the plug icon will become a plug with a lightning bolt in the middle <inlineimage width="" height="" name="charging" extension="png"><alttext></alttext></inlineimage> to indicate that the battery is charging.</para>
    </section>
  </node>
  <node>
    <nodename>Installation Directory</nodename>
    <nodenext>Testing</nodenext>
    <nodeprev>Installation</nodeprev>
    <nodeup>The Windows Version of apcupsd</nodeup>
    <section>
      <title>Installation Directory</title>
      <para><indexterm index="cp">Windows, Installation Directory</indexterm> The Win32 version of apcupsd must reside in the <file>c:\apcupsd\</file> directory, and there must be a <file>c:\tmp</file> directory on your machine. The installation will do this automatically, and we recommend that you do not attempt to place apcupsd in another directory. If you do so, you are on your own, and you will need to do a rebuild of the source.</para>
    </section>
  </node>
  <node>
    <nodename>Testing</nodename>
    <nodenext>Upgrading</nodenext>
    <nodeprev>Installation Directory</nodeprev>
    <nodeup>The Windows Version of apcupsd</nodeup>
    <section>
      <title>Testing</title>
      <para><indexterm index="cp">Windows, Testing</indexterm><indexterm index="cp">Testing, Windows</indexterm> It would be hard to overemphasize the need to do a full testing of your installation of apcupsd as there are a number of reasons why it may not behave properly in a real power failure situation.</para>
      <para>Please read <xref><xrefnodename>Testing Apcupsd</xrefnodename></xref> of this document for general instructions on testing the Win32 version. However, on Win32 systems, there is no Unix system log file, so if something goes wrong, look in the file <file>c:\apcupsd\etc\apcupsd\apcupsd.events</file> where apcupsd normally logs its events, and you will generally find more detailed information on why the program is not working. The most common cause of problems is either improper configuration of the cable type, or an incorrect address for the serial port.</para>
    </section>
  </node>
  <node>
    <nodename>Upgrading</nodename>
    <nodenext>Post Installation</nodenext>
    <nodeprev>Testing</nodeprev>
    <nodeup>The Windows Version of apcupsd</nodeup>
    <section>
      <title>Upgrading</title>
      <para><indexterm index="cp">Windows, Upgrading</indexterm><indexterm index="cp">Upgrading Windows</indexterm> On Win98 and Win95 systems, to upgrade to a new release, simply stop apcupsd by using the tray icon and selecting the <strong>Close apcupsd</strong> menu item, or by double clicking on the <strong>Stop</strong> icon located in the <file>c:\apcupsd\bin</file> directory, then apply the upgrade and restart apcupsd.</para>
      <para>On WinNT systems (and Win2000 systems), you may stop apcupsd as indicated abover or alternatively you may stop apcupsd by using the <strong>Services</strong> item in the <strong>Control Panel</strong>. In addition, at least on my system, there seems to be a WinNT bug that causes the system to prevent <strong>apcupsd.exe</strong> from being overwritten even though the file is no longer being used.  This is manifested by an error message when attempting load a new version and overwrite the old apcupsd.exe (the extract part of WinZip as described above). To circumvent this problem (if it happens to you), after shutting down the running version of apcupsd, through the <strong>Services</strong> dialogue in the <strong>Control Panel</strong>, first click on the <strong>Stop button</strong>:</para>
      <image width="" height="" name="wininstall6" extension="png"><alttext></alttext></image>
      <para>then click on the <strong>Startup ...</strong> button, and in the Startup dialogue select the <strong>Disabled</strong> button to disable apcupsd:</para>
      <image width="" height="" name="wininstall7" extension="png"><alttext></alttext></image>
      <para>After closing the dialogues, reboot the system, typical of Microsoft :-(. When the system comes back up, apcupsd will not be automatically launched as a service, and you can install the new version. To reinstate apcupsd as an automatic service, using the <strong>Control Panel</strong>: reset apcupsd to <strong>Automatic</strong> startup in the Startup dialogue, then restart apcupsd in the <strong>Services</strong> dialogue as shown above in the installation instructions. Frequently after an upgrade, you will click on the <strong>Start</strong> button and after a few seconds, the system reports that it failed to start. The cause of this problem is unknown, but the solution is simply to click again on the <strong>Start</strong> button.</para>
    </section>
  </node>
  <node>
    <nodename>Post Installation</nodename>
    <nodenext>Problem Areas</nodenext>
    <nodeprev>Upgrading</nodeprev>
    <nodeup>The Windows Version of apcupsd</nodeup>
    <section>
      <title>Post Installation</title>
      <para><indexterm index="cp">Windows, Post Installation</indexterm> After installing apcupsd and before running it, you should check the contents of two files to ensure that it is configured properly for your system. The first is <file>c:\apcupsd\etc\apcupsd\apcupsd.conf</file>. You will probably need to change your UPSCABLE directive, your UPSTYPE and possibly your DEVICE directives. Please refer to the configuration section of this manual for more details.</para>
      <para>The second file that you should examine is <file>c:\apcupsd\etc\apcupsd\apccontrol</file>. This file is called by apcupsd when events (power loss, etc) are generated. It permits the user to program handling the event. In particular, it permits the user to be notified of the events. For the Win32 version, each event is programmed to display a Windows popup dialogue box. If your machine is mostly unattended, you may want to comment out some of these popup dialogue boxes by putting a pound sign (#) in column one of the appropriate line.</para>
    </section>
  </node>
  <node>
    <nodename>Problem Areas</nodename>
    <nodenext>Utility Functions</nodenext>
    <nodeprev>Post Installation</nodeprev>
    <nodeup>The Windows Version of apcupsd</nodeup>
    <section>
      <title>Problem Areas</title>
      <para><indexterm index="cp">Problems, Windows</indexterm><indexterm index="cp">Windows, Problems</indexterm> In addition to possible problems of reinstallation or upgrade on WinNT systems, as noted above, we have discovered the following problem: On some Windows systems, the domain resolution does not seem to work if you have not configured a DNS server in the Network section of the Control Panel. This problem should be apparent only when running a master or a slave configuration. In this case, when you specify the name of the master or the slave machine(s) in your <file>apcupsd.conf</file> file, apcupsd will be unable to resolve the name to a valid IP address. To circumvent this problem, simply enter all machine addresses as an IP address rather than a domain name, or alternatively, ensure that you have a valid DNS server configured on your system (often not the case on Win32 systems).  For example, instead of using the directive "MASTER my.master.com" use something like "MASTER 192.168.1.54" where you replace the IP address with your actual IP address.</para>
      <para>Also, on WinNT systems, the PIF files in <file>/apcupsd/bin</file> used for starting and stopping apcupsd do not work. Use the services control panel instead.</para>
      <para>On Win95 systems, there are reports that the PIF files do not work. If you find that to be the case, the simplest solution is to use the batch files that we have supplied in the <file>c:/apcupsd/bin</file> directory. Also, on Win95 systems, we have an unconfirmed report that indicates that apcupsd does not start automatically as a service even though the Registry has been properly updated. If you experience this problem, a work around is to put a shortcut to apcupsd in the StartUp folder.</para>
      <para>As noted above, after an upgrade, you may need to start apcupsd several times before it will actually run.</para>
      <para>On WinNT, WinXP, and Win2K systems, you can examine the System Applications log to which apcupsd writes Windows error messages during startup.</para>
      <para>Regardless of which Windows system you are running, apcupsd logs most error messages to <file>c:\apcupsd\etc\apcupsd\apcupsd.events</file>. This type error messages such as configuration file not found, etc are written to this file.</para>
    </section>
  </node>
  <node>
    <nodename>Utility Functions</nodename>
    <nodenext>Disclaimer</nodenext>
    <nodeprev>Problem Areas</nodeprev>
    <nodeup>The Windows Version of apcupsd</nodeup>
    <section>
      <title>Utility Functions</title>
      <para>The directory <file>c:\apcupsd\bin</file> contains six utility routines (actually .pif files) that you may find useful. They are:</para>
      <example xml:space="preserve">
Start
Stop
Install
Uninstall
ups-events
ups-status</example>
      <para>Any of these utilities may be used on any system, with the exception of the Start utility, which cannot be used on WinNT and Win2000 systems. On those systems, the apcupsd service must always be started through the <strong>Services</strong> sub-dialogue of the <strong>Control Panel</strong>.</para>
      <para>The <strong>Install</strong> and <strong>Uninstall</strong> utilities install and uninstall apcupsd from the system registry only. All other pieces (files) of apcupsd remain intact. It is not absolutely necessary for apcupsd to be installed in the registry as it can run as a regular program. However, if it is not installed in the registry, it cannot be run as a service.</para>
      <para>The functions of <strong>Stop</strong>, <strong>ups-events</strong>, and <strong>ups-status</strong> can be more easily invoked by right clicking on the apcupsd icon in the system tray and selecting the desired function from the popup menu.</para>
    </section>
  </node>
  <node>
    <nodename>Disclaimer</nodename>
    <nodenext>Email Notification of Events</nodenext>
    <nodeprev>Utility Functions</nodeprev>
    <nodeup>The Windows Version of apcupsd</nodeup>
    <section>
      <title>Disclaimer</title>
      <para><indexterm index="cp">Disclaimer</indexterm> Some of the features such as EEPROM programming have not been exhaustively tested on Win32 systems. If at all possible, we recommend not to use it as a network master on Win95, Win98, and WinMe due to the instability of those operating systems.</para>
      <para>Some items to note:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>This version of apcupsd will not attempt to shut off the UPS power when the battery is exhausted. Thus if the power returns before the UPS completely shuts down, your computer may not reboot automatically. This is because we do not know how to regain control after the disks have been synced in order to shut off the UPS power.</para>
          <para>Nevertheless, it is possible to use the <code>--kill-on-powerfail</code> option on the apcupsd command line, but the use of this option could cause the power to be cut off while your machine is still running. See <xref><xrefnodename>Shutdown Sequence &lt;1&gt;</xrefnodename><xrefprinteddesc>Shutdown Sequence</xrefprinteddesc></xref> of this document for a more complete discussion of this subject. If you are still interested in trying to get this to work, please look at the code that is commented out in <file>c:\apcupsd\etc\apcupsd\apccontrol</file> under the <strong>doshutdown</strong> case.</para>
          <para>An alternative to the <code>--kill-on-powerfail</code> option is to use the KILLDELAY (see <xref><xrefnodename>KILLDELAY &lt;time in seconds&gt;</xrefnodename></xref>) configuration directive.</para>
          <para>This configuration directive is appropriate on Windows machines where apcupsd continues to run even when the machine is halted (as is the case on most NT machines).</para>
        </item>
        <item>
          <para>When apcupsd detects important events, it calls <file>c:\apcupsd\etc\apcupsd\apccontrol</file>, which is a Unix shell script. You may modify this script to suit your particular needs.  Currently, it puts a Windows dialogue on the screen with a brief explanation of the event. If these dialogues annoy you, you can remove or comment out the calls to <strong>popup</strong> from this file.</para>
        </item>
      </itemize>
    </section>
  </node>
  <node>
    <nodename>Email Notification of Events</nodename>
    <nodenext>Killpower under Windows</nodenext>
    <nodeprev>Disclaimer</nodeprev>
    <nodeup>The Windows Version of apcupsd</nodeup>
    <section>
      <title>Email Notification of Events</title>
      <para><indexterm index="cp">Email</indexterm><indexterm index="cp">Notification, Email</indexterm> On Win95/98 systems, it is possible to receive notification of apcupsd events that are passed to apccontrol. This is possible using a simple email program that unfortunately is not functioning 100% correctly. In addition, I (Kern) was not able to make this program work on WinNT while apcupsd is running as a service under the system account (it works fine with any user account).</para>
      <para>If you wish to try this program on Win95/98 systems, look at the files named <strong>changeme, commfailure, commok, onbattery, and mainsback</strong> in the directory <file>c:\apcupsd\examples</file>. To use them, you must modify the SYSADMIN variable to have a valid email address, then copy the files into the directory <file>c:\apcupsd\etc\apcupsd</file>.</para>
    </section>
  </node>
  <node>
    <nodename>Killpower under Windows</nodename>
    <nodenext>Power Down During Shutdown</nodenext>
    <nodeprev>Email Notification of Events</nodeprev>
    <nodeup>The Windows Version of apcupsd</nodeup>
    <section>
      <title>Killpower under Windows</title>
      <para><indexterm index="cp">Windows, Killpower</indexterm> If your batteries become exhausted during a power failure and you want your machine to automatically reboot when the power comes back, it is useful to implement the killpower feature of the UPS where apcupsd sends the UPS the command to shut off the power.  In doing so, the power will be cut to your PC and if your BIOS is properly setup, the machine will automatically reboot when the power comes back. This is important for servers.</para>
      <para>This feature is implemented on Unix systems by first requesting a system shutdown. As a part of the shutdown, apcupsd is terminated by the system, but the shutdown process executes a script where apcupsd is recalled after the disks are synced and the machine is idle. Apcupsd then requests the UPS to shut off the power (killpower).</para>
      <para>Unfortunately on Windows, there is no such shutdown script that we are aware of and no way for apcupsd to get control after the machine is idled. If this feature is important to you, it is possible to do it by telling apcupsd to immediately issue the killpower command after issuing the shutdown request. The danger in doing so is that if the machine is not sufficiently idled when the killpower takes place, the disks will need to be rescanned (and there is a possibility of lost data however small). Generally, UPSes have a shutdown grace period which gives sufficient time for the OS to shutdown before the power is cut.</para>
      <para>To implement this feature, you need to add the <code>-p</code> option to the apcupsd command line that is executed by the system.  Currently the procedure is manual. You do so by editing the registry and changing the line:</para>
      <example xml:space="preserve">
c:\apcupsd\apcupsd.exe /service</example>
      <para>found under the key:</para>
      <example xml:space="preserve">
HKEY_LOCAL_MACHINE Software\Microsoft\Windows\CurrentVersion\RunServices</example>
      <para>to</para>
      <example xml:space="preserve">
c:\apcupsd\apcupsd.exe /service -p</example>
      <para>If you have a Smart UPS, you can configure the kill power grace period, and you might want to set it to 3 minutes. If you have a dumb UPS, there is no grace period and you should not use this procedure. If you have a Back-UPS CS or ES, these UPSes generally have a fixed grace period of 2 minutes, which is probably sufficient.</para>
    </section>
  </node>
  <node>
    <nodename>Power Down During Shutdown</nodename>
    <nodenext>Command Line Options Specific to the Windows Version</nodenext>
    <nodeprev>Killpower under Windows</nodeprev>
    <nodeup>The Windows Version of apcupsd</nodeup>
    <section>
      <title>Power Down During Shutdown</title>
      <para><indexterm index="cp">Windows, Power down</indexterm><indexterm index="cp">Power down, Windows</indexterm> Our philosophy is to shutdown a computer but not to power it down itself (as opposed to having the UPS cut the power as described above). That is we prefer to idle a computer but leave it running. This has the advantage that in a power fail situation, if the killpower function described above does not work, the computer will continue to draw down the batteries and the UPS will hopefully shutoff before the power is restore thus permitting an automatic reboot.</para>
      <para>Nevertheless some people prefer to do a full power down. To do so, you might want to get a copy of PsShutdown, which does have a power down option. You can find it and a lot more useful software at: <uref><urefurl>http://www.sysinternals.com/ntw2k/freeware/pstools.shtml</urefurl><urefdesc>http://www.sysinternals.com/ntw2k/freeware/pstools.shtml</urefdesc></uref>. to use their shutdown program rather than the apcupsd supplied version, you simply edit:</para>
      <example xml:space="preserve">
c:\apcupsd\etc\apcupsd\apccontrol</example>
      <para>with any text editor and change our calls to shutdown to psshutdown.</para>
    </section>
  </node>
  <node>
    <nodename>Command Line Options Specific to the Windows Version</nodename>
    <nodenext>Building the Win32 Version from the Source</nodenext>
    <nodeprev>Power Down During Shutdown</nodeprev>
    <nodeup>The Windows Version of apcupsd</nodeup>
    <section>
      <title>Command Line Options Specific to the Windows Version</title>
      <para><indexterm index="cp">Windows, Options</indexterm> These options are not normally seen or used by the user, and are documented here only for information purposes. At the current time, to change the default options, you must either manually run apcupsd or you must manually edit the system registry and modify the appropriate entries.</para>
      <para>In order to avoid option clashes between the options necessary for apcupsd to run on Windows and the standard apcupsd options, all Windows specific options are signaled with a forward slash character (/), while as usual, the standard apcupsd options are signaled with a minus (-), or a minus minus (&ndash;). All the standard apcupsd options can be used on the Windows version. In addition, the following Windows only options are implemented:</para>
      <table>
        <tableitem>
          <tableterm>/servicehelper</tableterm>
          <item>
            <para>Run the service helper application</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>/service</tableterm>
          <item>
            <para>Start apcupsdas a service</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>/run</tableterm>
          <item>
            <para>Run the apcupsd application</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>/install</tableterm>
          <item>
            <para>Install apcupsd as a service in the system registry</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>/remove</tableterm>
          <item>
            <para>Uninstall apcupsd from the system registry</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>/about</tableterm>
          <item>
            <para>Show the apcupsd about dialogue box</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>/status</tableterm>
          <item>
            <para>Show the apcupsd status dialogue box</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>/events</tableterm>
          <item>
            <para>Show the apcupsd events dialogue box</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>/kill</tableterm>
          <item>
            <para>Stop any running apcupsd</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>/help</tableterm>
          <item>
            <para>Show the apcupsd help dialogue box</para>
          </item>
        </tableitem>
      </table>
      <para>It is important to note that under normal circumstances the user should never need to use these options as they are normally handled by the system automatically once apcupsd is installed. However, you may note these options in some of the .pif files that have been created for your use.</para>
    </section>
  </node>
  <node>
    <nodename>Building the Win32 Version from the Source</nodename>
    <nodeprev>Command Line Options Specific to the Windows Version</nodeprev>
    <nodeup>The Windows Version of apcupsd</nodeup>
    <section>
      <title>Building the Win32 Version from the Source</title>
      <para><indexterm index="cp">Windows, Building</indexterm><indexterm index="cp">Building, Windows</indexterm> If you have the source code, follow the standard procedures for building apcupsd on Unix in <xref><xrefnodename>Building and Installing apcupsd</xrefnodename></xref> of this manual. Please don't forget to look at the system specifics for CYGWIN.</para>
    </section>
  </node>
  <node>
    <nodename>Installation on Serial-Line UPSes</nodename>
    <nodenext>Technical Reference</nodenext>
    <nodeprev>Installation on Windows</nodeprev>
    <nodeup>Top</nodeup>
    <majorheading>Installation: Serial-Line UPSes</majorheading>
    <menu>
      <menuentry>
        <menunode>Overview of Serial-Interface UPSes</menunode>
        <menutitle>Overview of Serial-Interface UPSes</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>Connecting a Serial-Line UPS to a USB Port</menunode>
        <menutitle>Connecting a Serial-Line UPS to a USB Port</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>Connecting a APC USB UPS to either a PC USB or Serial Port</menunode>
        <menutitle>Connecting a APC USB UPS to either a PC USB or Serial Port</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>Cables</menunode>
        <menutitle>Cables</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>Testing Serial-Line UPSes</menunode>
        <menutitle>Testing Serial-Line UPSes</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>Troubleshooting Serial Line communications</menunode>
        <menutitle>Troubleshooting Serial Line communications</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>Recalibrating the UPS Runtime</menunode>
        <menutitle>Recalibrating the UPS Runtime</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>DATA Logging</menunode>
        <menutitle>DATA Logging</menutitle>
        <menucomment></menucomment>
      </menuentry>
    </menu>
  </node>
  <node>
    <nodename>Overview of Serial-Interface UPSes</nodename>
    <nodenext>Connecting a Serial-Line UPS to a USB Port</nodenext>
    <nodeup>Installation on Serial-Line UPSes</nodeup>
    <chapter>
      <title>Overview of Serial-Interface UPSes</title>
      <para><indexterm index="cp">Serial UPSes</indexterm> If you have a UPS that communicates via serial port, you need to do two things before you can even think about configuring the software. First, you need to figure out whether it's a dumb (voltage-signalling) UPS or speaks the apcsmart protocol (see this discussion (see <xref><xrefnodename>upstypes</xrefnodename></xref>)).  Second, if you have an interface cable from APC, you need to figure out what kind it is.  If you don't have such a cable, you need to build one.  A straight-through serial cable won't work (see <xref><xrefnodename>crazy</xrefnodename></xref>).</para>
      <para>According to Bill Marr the Belkin F5U109, also sold as F5U409 also works with apcupsd for kernel versions 2.4.25 or higher and kernels 2.6.1 and higher.  These newer kernels are needed to have the patch that makes the mct_u232 (Magic Control Technology) module and other adapters work with RS-232 devices that do not assert the CTS signal.</para>
    </chapter>
  </node>
  <node>
    <nodename>Connecting a Serial-Line UPS to a USB Port</nodename>
    <nodenext>Connecting a APC USB UPS to either a PC USB or Serial Port</nodenext>
    <nodeprev>Overview of Serial-Interface UPSes</nodeprev>
    <nodeup>Installation on Serial-Line UPSes</nodeup>
    <chapter>
      <title>Connecting a Serial-Line UPS to a USB Port</title>
      <para><indexterm index="cp">Serial on USB</indexterm> By using a special adaptor, you can connect your serial-line UPS to a USB port. If you would like to free up your serial port and connect your existing serial port UPS to a USB port, it is possible if you have one of the later kernels. You simply get a serial to USB adapter that is supported by the kernel, plug it in and make one minor change to your <file>apcupsd.conf</file> file and away you go. (Kern adds: Thanks to Joe Acosta for pointing this out to me.)</para>
      <para>The device that Joe Acosta and Kern are using is IOgear GUC232A USB 2 serial adapter. Bill Marr informs us that it also works with a Back-UPS Pro 650 and the 940-0095B cable.</para>
      <para>At Kern's site, running Red Hat 7.1 with kernel 2.4.9-12, he simply changed his <file>/etc/apcupsd/apcupsd.conf</file> configuration line to be:</para>
      <example xml:space="preserve">
DEVICE /dev/ttyUSB0</example>
      <para>Depending on whether or not you have <strong>hotplug</strong> working, you may need to explicitly load the kernel modules <strong>usbserial</strong> and <strong>pl2303</strong>. In Kern's case, this was not necessary.</para>
    </chapter>
  </node>
  <node>
    <nodename>Connecting a APC USB UPS to either a PC USB or Serial Port</nodename>
    <nodenext>Cables</nodenext>
    <nodeprev>Connecting a Serial-Line UPS to a USB Port</nodeprev>
    <nodeup>Installation on Serial-Line UPSes</nodeup>
    <chapter>
      <title>Connecting a APC USB UPS to either a PC USB or Serial Port</title>
      <para>An interesting fact is that the USB ports (actually an RJ45 connector) on APC UPSes not only speak USB, but also serial apcsmart and dumb voltage-signalling as well! This is something that one of our users discovered by accident. With the Custom RJ45 cable (actually a RJ45 to serial cable) described below plugged into the APC UPS USB socket at one end and the other end plugged into a serial port on your PC, any APC USB UPS (except some of the newer really low cost models) will act as a serial-line device.</para>
    </chapter>
  </node>
  <node>
    <nodename>Cables</nodename>
    <nodenext>Testing Serial-Line UPSes</nodenext>
    <nodeprev>Connecting a APC USB UPS to either a PC USB or Serial Port</nodeprev>
    <nodeup>Installation on Serial-Line UPSes</nodeup>
    <chapter>
      <title>Cables</title>
      <para><indexterm index="cp">Cables</indexterm> You can either use the cable that came with your UPS (the easiest if we support it) or you can make your own cable. We recommend that you obtain a supported cable directly from APC.</para>
      <para>If you already have an APC cable, you can determine what kind it is by examining the flat sides of the two connectors where you will find the cable number embossed into the plastic. It is generally on one side of the male connector.</para>
      <para>To make your own cable you must first know whether you have a UPS that speaks the apcsmart protocol or a "dumb" UPS that uses serial port line voltage signalling.</para>
      <para>If you have an apcmart UPS, and you build your own cable, build a <emph>Smart-Custom</emph> cable. If you have a voltage-Signalling or dumb UPS, build a <emph>Simple-Custom</emph> cable. If you have a BackUPS CS with a RJ45 connector, you can build your own <emph>Custom-RJ45</emph> cable.</para>
      <menu>
        <menuentry>
          <menunode>Smart-Custom Cable for SmartUPSes</menunode>
          <menutitle>Smart-Custom Cable for SmartUPSes</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Smart Signalling Cable for BackUPS CS Models</menunode>
          <menutitle>Smart Signalling Cable for BackUPS CS Models</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Voltage-Signalling Cable for "dumb" UPSes</menunode>
          <menutitle>Voltage-Signalling Cable for "dumb" UPSes</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Other APC Cables that apcupsd Supports</menunode>
          <menutitle>Other APC Cables that apcupsd Supports</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Voltage Signalling Features Supported by Apcupsd for Various Cables</menunode>
          <menutitle>Voltage Signalling Features Supported by Apcupsd for Various Cables</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Voltage Signalling</menunode>
          <menutitle>Voltage Signalling</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>The Back-UPS Office 500 signals</menunode>
          <menutitle>The Back-UPS Office 500 signals</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Analyses of APC Cables</menunode>
          <menutitle>Analyses of APC Cables</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Win32 Implementation Restrictions for Simple UPSes</menunode>
          <menutitle>Win32 Implementation Restrictions for Simple UPSes</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Internal Apcupsd Actions for Simple Cables</menunode>
          <menutitle>Internal Apcupsd Actions for Simple Cables</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>RS232 Wiring and Signal Conventions</menunode>
          <menutitle>RS232 Wiring and Signal Conventions</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Pin Assignment for the Serial Port [RS-232C]; 25-pin and 9-pin; Female End</menunode>
          <menutitle>Pin Assignment for the Serial Port (RS-232C), 25-pin and 9-pin, Female End</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Ioctl to RS232 Correspondence</menunode>
          <menutitle>Ioctl to RS232 Correspondence</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Smart-Custom Cable for SmartUPSes</nodename>
    <nodenext>Smart Signalling Cable for BackUPS CS Models</nodenext>
    <nodeup>Cables</nodeup>
    <section>
      <title>Smart-Custom Cable for SmartUPSes</title>
      <para><indexterm index="cp">Smart Custom Cable</indexterm><indexterm index="cp">Cables, Smart Custom</indexterm></para>
      <example xml:space="preserve">
  SMART-CUSTOM CABLE

Signal Computer                  UPS
       DB9F                     DB9M
 RxD    2   --------------------  2  TxD  Send
 TxD    3   --------------------  1  RxD  Receive
 GND    5   --------------------  9  Ground</example>
      <para>When using this cable with apcupsd specify the following in <file>apcupsd.conf</file>:</para>
      <para>If you have an OS that requires DCD or RTS to be set before you can receive input, you might try building the standard APC Smart 940-0024C cable listed below.</para>
      <example xml:space="preserve">
UPSCABLE smart
UPSTYPE apcsmart
DEVICE /dev/ttyS0 (or whatever your serial port is)</example>
      <para>If you wish to build the standard cable furnished by APC (940-0024C), use the following diagram.</para>
      <example xml:space="preserve">
  APC Smart Cable 940-0024C

Signal Computer                  UPS
       DB9F                     DB9M
 RxD    2   --------------------  2  TxD  Send
 TxD    3   --------------------  1  RxD  Receive
 DCD    1   --*
              |
 DTR    4   --*
 GND    5   --------------------  9  Ground
 RTS    7   --*
              |
 CTS    8   --*
</example>
    </section>
  </node>
  <node>
    <nodename>Smart Signalling Cable for BackUPS CS Models</nodename>
    <nodenext>Voltage-Signalling Cable for "dumb" UPSes</nodenext>
    <nodeprev>Smart-Custom Cable for SmartUPSes</nodeprev>
    <nodeup>Cables</nodeup>
    <section>
      <title>Smart Signalling Cable for BackUPS CS Models</title>
      <para><indexterm index="cp">Cables, Smart Signalling</indexterm><indexterm index="cp">Cables, BackUPS CS</indexterm> If you have a BackUPS CS, you are probably either using it with the USB cable that is supplied or with the 940-0128A supplied by APC, which permits running the UPS in dumb mode. By building your own cable, you can now run the BackUPS CS models (and perhaps also the ES models) using smart signalling and have all the same information that is available as running it in USB mode.</para>
      <para>The jack in the UPS is actually a 10 pin RJ45. However, you can just as easily use a 8 pin RJ45 connector, which is more standard (ethernet TX, and ISDN connector). It is easy to construct the cable by cutting off one end of a standard RJ45-8 ethernet cable and wiring the other end (three wires) into a standard DB9F female serial port connector.</para>
      <para>Below, you will find a diagram for the CUSTOM-RJ45 cable:</para>
      <example xml:space="preserve">
  CUSTOM-RJ45 CABLE

Signal Computer              UPS     UPS
       DB9F                 RJ45-8  RJ45-10
 RxD    2   ----------------  1      2     TxD  Send
 TxD    3   ----------------  7      8     RxD  Receive
 GND    5   ----------------  6      7     Ground
 FG  Shield ----------------  3      4     Frame Ground

The RJ45-8 pins are: looking at the end of the connector:

 8 7 6 5 4 3 2 1
___________________
| . . . . . . . . |
|                 |
-------------------
       |____|

The RJ45-10  pins are: looking at the end of the connector:

10 9 8 7 6 5 4 3 2 1
_______________________
| . . . . . . . . . . |
|                     |
-----------------------
       |____|
</example>
      <para>For the serial port DB9F connector, the pin numbers are stamped in the plastic near each pin. In addition, there is a diagram near the end of this chapter.</para>
      <para>Note, one user, Martin, has found that if the shield is not connected to the Frame Ground in the above diagram (not in our original schematic), the UPS (a BackUPS CS 500 EI) will be unstable and likely to rapidly switch from power to batteries (i.e. chatter).</para>
      <para>When using this cable with apcupsd specify the following in <file>apcupsd.conf</file>:</para>
      <example xml:space="preserve">
UPSCABLE smart
UPSTYPE apcsmart
DEVICE /dev/ttyS0 (or whatever your serial port is)</example>
      <para>The information for constructing this cable was discovered and transmitted to us by slither_man. Many thanks!</para>
    </section>
  </node>
  <node>
    <nodename>Voltage-Signalling Cable for "dumb" UPSes</nodename>
    <nodenext>Other APC Cables that apcupsd Supports</nodenext>
    <nodeprev>Smart Signalling Cable for BackUPS CS Models</nodeprev>
    <nodeup>Cables</nodeup>
    <section>
      <title>Voltage-Signalling Cable for "dumb" UPSes</title>
      <para><indexterm index="cp">Cables, dumb</indexterm><indexterm index="cp">dumb, Cables</indexterm> <strong>NOTE. YOU DO NOT HAVE THIS CABLE UNLESS YOU BUILT IT YOURSELF.  THE SIMPLE-CUSTOM CABLE IS NOT AN APC PRODUCT.</strong></para>
      <para>For "dumb" UPSes using voltage signalling, if you are going to build your own cable, we recommend to make the cable designed by the apcupsd team as follows:</para>
      <example xml:space="preserve">
       SIMPLE-CUSTOM CABLE

Signal Computer                  UPS
       DB9F   4.7K ohm          DB9M
 DTR    4   --[####]--*              DTR set to +5V by Apcupsd
                      |
 CTS    8   ----------*---------  5  Low Battery
 GND    5   --------------------  4  Ground
 DCD    1   --------------------  2  On Battery
 RTS    7   --------------------  1  Kill UPS Power
</example>
      <para>List of components one needs to make the Simple cable:</para>
      <enumerate first="1">
        <item>
          <para>One (1) male DB9 connector, use solder type connector only.</para>
        </item>
        <item>
          <para>One (1) female DB9/25F connector, use solder type connector only.</para>
        </item>
        <item>
          <para>One (1) 4.7K ohm 1/4 watt 5% resistor.</para>
        </item>
        <item>
          <para>resin core solder.</para>
        </item>
        <item>
          <para>three (3) to five (5) feet of 22AWG multi-stranded four or more conductor cable.</para>
        </item>
      </enumerate>
      <enumerate first="1">
        <item>
          <para>Solder the resistor into pin 4 of the female DB9 connector.</para>
        </item>
        <item>
          <para>Next bend the resistor so that it connects to pin 8 of the female DB9 connector.</para>
        </item>
        <item>
          <para>Pin 8 on the female connector is also wired to pin 5 on the male DB9 connector. Solder both ends.</para>
        </item>
        <item>
          <para>Solder the other pins, pin 5 on the female DB9 to pin 4 on the male connector; pin 1 on the female connector to pin 2 on the male connector; and pin 7 on the female connector to pin 1 on the male connector.</para>
        </item>
        <item>
          <para>Double check your work.</para>
        </item>
      </enumerate>
      <para>We use the DTR (pin 4 on the female connector) as our +5 volts power for the circuit. It is used as the Vcc pull-up voltage for testing the outputs on any "UPS by APC" in voltage-signalling mode.  This cable may not work on a BackUPS Pro if the default communications are in apcsmart mode. This cable is also valid for "ShareUPS" BASIC Port mode and is also reported to work on SmartUPSes. However, the Smart Cable described above is much simpler. To have a better idea of what is going on inside apcupsd, for the SIMPLE cable apcupsd reads three signals and sets three:</para>
      <example xml:space="preserve">
Reads:
CD, which apcupsd uses for the On Battery signal when high.

CTS, which apcupsd uses for the Battery Low signal when high.

RxD (SR), which apcupsd uses for the Line Down
    signal when high. This signal isn't used for much.

Sets:
DTR, which apcupsd sets when it detects a power failure (generally
     5 to 10 seconds after the CD signal goes high). It
     clears this signal if the CD signal subsequently goes low
     -- i.e. power is restored.

TxD (ST), which apcupsd clears when it detects that the CD signal
     has gone low after having gone high - i.e. power is restored.

RTS, which apcupsd sets for the killpower signal -- to cause the UPS
     to shut off the power.</example>
      <para>Please note that these actions apply only to the SIMPLE cable, the signals used on the other cables are different.</para>
      <para>Finally, here is another way of looking at the CUSTOM-SIMPLE cable:</para>
      <example xml:space="preserve">
APCUPSD SIMPLE-CUSTOM CABLE

Computer Side  |  Description of Cable           |     UPS Side
DB9f  |  DB25f |                                 |   DB9m  | DB25m
4     |   20   |  DTR (5vcc)             *below  |    n/c  |
8     |    5   |  CTS (low battery)      *below  | &lt;-  5   |   7
2     |    3   |  RxD (no line voltage)  *below  | &lt;-  3   |   2
5     |    7   |  Ground (Signal)                |     4   |  20
1     |    8   |  CD (on battery from UPS)       | &lt;-  2   |   3
7     |    4   |  RTS (kill UPS power)           | -&gt;  1   |   8
n/c   |    1   |  Frame/Case Gnd (optional)      |     9   |  22

Note: the &lt;- and -&gt; indicate the signal direction.

Optional connections of original SIMPLE-CUSTOM specification
that are not used.

              4.7K ohm
 DTR    4   --[####]--*              Note needed
                      |
 RxD    2   ----------*---------  3  Not used by Apcupsd
</example>
      <para>When using this cable with apcupsd specify the following in <file>apcupsd.conf</file>:</para>
      <example xml:space="preserve">
UPSCABLE simple
UPSTYPE dumb
DEVICE /dev/ttyS0 (or whatever your serial port is)</example>
    </section>
  </node>
  <node>
    <nodename>Other APC Cables that apcupsd Supports</nodename>
    <nodenext>Voltage Signalling Features Supported by Apcupsd for Various Cables</nodenext>
    <nodeprev>Voltage-Signalling Cable for "dumb" UPSes</nodeprev>
    <nodeup>Cables</nodeup>
    <section>
      <title>Other APC Cables that apcupsd Supports</title>
      <para>apcupsd will also support the following off the shelf cables that are supplied by APC</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>940-0020B/C Simple Signal Only, all models.</para>
        </item>
        <item>
          <para>940-0023A Simple Signal Only, all models.</para>
        </item>
        <item>
          <para>940-0119A Simple Signal Only, Back-UPS Office, and BackUPS ES.</para>
        </item>
        <item>
          <para>940-0024[B/C/G] SmartMode Only, SU and BKPro only.</para>
        </item>
        <item>
          <para>940-0095[A/B/C] PnP (Plug and Play), all models.</para>
        </item>
        <item>
          <para>940-1524C SmartMode Only</para>
        </item>
        <item>
          <para>940-0127A/B USB Cables</para>
        </item>
        <item>
          <para>940-0128A Simple Signal Only, Back-UPS CS in serial mode.</para>
        </item>
      </itemize>
    </section>
  </node>
  <node>
    <nodename>Voltage Signalling Features Supported by Apcupsd for Various Cables</nodename>
    <nodenext>Voltage Signalling</nodenext>
    <nodeprev>Other APC Cables that apcupsd Supports</nodeprev>
    <nodeup>Cables</nodeup>
    <section>
      <title>Voltage Signalling Features Supported by Apcupsd for Various Cables</title>
      <para>The following table shows the features supported by the current version of apcupsd (3.8.5 or later) for various cables running the UPS in voltage-signalling mode.</para>
      <multitable>
        <columnfraction>20</columnfraction>
        <columnfraction>20</columnfraction>
        <columnfraction>20</columnfraction>
        <columnfraction>20</columnfraction>
        <columnfraction>20</columnfraction>
        <tbody>
          <row>
            <entry>Cable</entry>
            <entry>Power Loss</entry>
            <entry>Low Battery</entry>
            <entry>Kill Power</entry>
            <entry>Cable Disconnected</entry>
          </row>
          <row>
            <entry>940-0020B</entry>
            <entry>Yes</entry>
            <entry>No</entry>
            <entry>Yes</entry>
            <entry>No</entry>
          </row>
          <row>
            <entry>940-0020C</entry>
            <entry>Yes</entry>
            <entry>Yes</entry>
            <entry>Yes</entry>
            <entry>No</entry>
          </row>
          <row>
            <entry>940-0023A</entry>
            <entry>Yes</entry>
            <entry>No</entry>
            <entry>No</entry>
            <entry>No</entry>
          </row>
          <row>
            <entry>940-0119A</entry>
            <entry>Yes</entry>
            <entry>Yes</entry>
            <entry>Yes</entry>
            <entry>No</entry>
          </row>
          <row>
            <entry>940-0127A</entry>
            <entry>Yes</entry>
            <entry>Yes</entry>
            <entry>Yes</entry>
            <entry>No</entry>
          </row>
          <row>
            <entry>940-0128A</entry>
            <entry>Yes</entry>
            <entry>Yes</entry>
            <entry>Yes</entry>
            <entry>No</entry>
          </row>
          <row>
            <entry>940-0095A/B/C</entry>
            <entry>Yes</entry>
            <entry>Yes</entry>
            <entry>Yes</entry>
            <entry>No</entry>
          </row>
          <row>
            <entry>simple</entry>
            <entry>Yes</entry>
            <entry>Yes</entry>
            <entry>Yes</entry>
            <entry>No</entry>
          </row>
        </tbody>
      </multitable>
    </section>
  </node>
  <node>
    <nodename>Voltage Signalling</nodename>
    <nodenext>The Back-UPS Office 500 signals</nodenext>
    <nodeprev>Voltage Signalling Features Supported by Apcupsd for Various Cables</nodeprev>
    <nodeup>Cables</nodeup>
    <section>
      <title>Voltage Signalling</title>
      <para><indexterm index="cp">Voltage Signalling, Cables</indexterm><indexterm index="cp">Cables, Voltage Signalling</indexterm> Apparently, all APC voltage-signalling UPSes have the same signals on the output pins of the UPS. The difference at the computer end is due to different cable configurations. Thus, by measuring the connectivity of a cable, one can determine how to program the UPS. This is to be verified.</para>
      <para>The signals presented or accepted by the UPS on its DB9 connector using the numbering scheme listed above is:</para>
      <example xml:space="preserve">
UPS Pin         Signal meaning
 1     &lt;-     Shutdown when set by computer for 1-5 seconds.
 2     -&gt;     On battery power (this signal is normally low but
                    goes high when the UPS switches to batteries).
 3     -&gt;     Mains down (line fail) See Note 1 below.
 5     -&gt;     Low battery. See Note 1 below.
 6     -&gt;     Inverse of mains down signal. See Note 2 below.
 7     &lt;-     Turn on/off power (only on advanced UPSes only)

 Note 1: these two lines are normally open, but close when the
     appropriate signal is triggered. In fact, they are open collector
     outputs which are rated for a maximum of +40VDC and 25 mA. Thus
     the 4.7K ohm resistor used in the Custom Simple cable works
     quite well.

 Note 2: the same as note 1 except that the line is normally closed,
     and opens when the line voltage fails.</example>
    </section>
  </node>
  <node>
    <nodename>The Back-UPS Office 500 signals</nodename>
    <nodenext>Analyses of APC Cables</nodenext>
    <nodeprev>Voltage Signalling</nodeprev>
    <nodeup>Cables</nodeup>
    <section>
      <title>The Back-UPS Office 500 signals</title>
      <para><indexterm index="cp">Cables, BackUPS Office</indexterm><indexterm index="cp">BackUPS Office, cables</indexterm> The Back-UPS Office UPS has a telephone type jack as output, which looks like the following:</para>
      <example xml:space="preserve">
Looking at the end of the connector:

   6 5 4 3 2 1
  _____________
 | . . . . . . |
 |             |
 |  |----------|
 |__|
</example>
      <para>It appears that the signals work as follows:</para>
      <example xml:space="preserve">
  UPS            Signal meaning
1 (brown)    &lt;-   Shutdown when set by computer for 1-5 seconds.
2 (black)    -&gt;   On battery power
3 (blue)     -&gt;   Low battery
4 (red)           Signal ground
5 (yellow)   &lt;-   Begin signalling on other pins
6 (none)          none</example>
    </section>
  </node>
  <node>
    <nodename>Analyses of APC Cables</nodename>
    <nodenext>Win32 Implementation Restrictions for Simple UPSes</nodenext>
    <nodeprev>The Back-UPS Office 500 signals</nodeprev>
    <nodeup>Cables</nodeup>
    <section>
      <title>Analyses of APC Cables</title>
      <para><indexterm index="cp">Cables</indexterm></para>
      <menu>
        <menuentry>
          <menunode>940-0020B Cable Wiring</menunode>
          <menutitle>940-0020B Cable Wiring</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>940-0020C Cable Wiring</menunode>
          <menutitle>940-0020C Cable Wiring</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>940-0023A Cable Wiring</menunode>
          <menutitle>940-0023A Cable Wiring</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>940-0095A Cable Wiring</menunode>
          <menutitle>940-0095A Cable Wiring</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>940-0095B Cable Wiring</menunode>
          <menutitle>940-0095B Cable Wiring</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>940-0119A Cable Wiring</menunode>
          <menutitle>940-0119A Cable Wiring</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>BackOffice ES</menunode>
          <menutitle>BackOffice ES</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>BackUPS ES and CS in Serial mode with Cable 940-0128A</menunode>
          <menutitle>BackUPS ES and CS in Serial mode with Cable 940-0128A</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </section>
  </node>
  <node>
    <nodename>940-0020B Cable Wiring</nodename>
    <nodenext>940-0020C Cable Wiring</nodenext>
    <nodeup>Analyses of APC Cables</nodeup>
    <subsection>
      <title>940-0020B Cable Wiring</title>
      <para><indexterm index="cp">Cables</indexterm> This diagram is for informational purposes and is not complete. Although we do not know what the black box semi-conductor contains, we believe that we understand its operation (many thanks to Lazar M. Fleysher for working this out).</para>
      <para>This cable can only be used on voltage-signalling UPSes, and provides the On Battery signal as well as kill UPS power. Most recent evidence (Lazar's analysis) indicates that this cable under the right conditions may provide the Low Battery signal. This is to be confirmed.</para>
      <example xml:space="preserve">
APC Part# - 940-0020B

Signal Computer                  UPS
       DB9F                     DB9M
 CTS    8   --------------------  2  On Battery
 DTR    4   --------------------  1  Kill power
 GND    5   ---------------*----  4  Ground
                           |
                ---        *----  9  Common
 DCD    1  ----|///|-----------   5  Low Battery
               |\\\|
 RTS    7  ----|///| (probably a
                ---   semi-conductor)</example>
      <para>Thanks to Lazar M. Fleysher.</para>
    </subsection>
  </node>
  <node>
    <nodename>940-0020C Cable Wiring</nodename>
    <nodenext>940-0023A Cable Wiring</nodenext>
    <nodeprev>940-0020B Cable Wiring</nodeprev>
    <nodeup>Analyses of APC Cables</nodeup>
    <subsection>
      <title>940-0020C Cable Wiring</title>
      <para><indexterm index="cp">Cables</indexterm> This diagram is for informational purposes and may not be complete, we don't recommend that use it to build you build one yourself.  This cable can only be used on voltage-signalling UPSes, and provides the On Battery signal, the Low Battery signal as well as kill UPS power. In apcupsd versions 3.8.2 and prior, please set your UPSCABLE to 940-0020B. In version 3.8.3 and later, you may specify the cable as 940-0020C. Please note that this diagram may not be accurate.</para>
      <example xml:space="preserve">
APC Part# - 940-0020C

Signal Computer                  UPS
       DB9F                     DB9M
 CTS    8   --------------------  2  On Battery
 DTR    4   --------------------  1  Kill power
 GND    5   ---------------*----  4  Ground
                           |
                           *----  9  Common
 RTS    7 -----[ 93.5K ohm ]----- 5  Low Battery
               or semi-conductor</example>
    </subsection>
  </node>
  <node>
    <nodename>940-0023A Cable Wiring</nodename>
    <nodenext>940-0095A Cable Wiring</nodenext>
    <nodeprev>940-0020C Cable Wiring</nodeprev>
    <nodeup>Analyses of APC Cables</nodeup>
    <subsection>
      <title>940-0023A Cable Wiring</title>
      <para><indexterm index="cp">Cables</indexterm> This diagram is for informational purposes and may not be complete, we don't recommend that use it to build you build one yourself.  This cable can only be used on voltage-signalling UPSes, and apparently only provides the On Battery signal. As a consequence, this cable is pretty much useless, and we recommend that you find a better cable because all APC UPSes support more than just On Battery. Please note that we are not sure the following diagram is correct.</para>
      <example xml:space="preserve">
APC Part# - 940-0023A

Signal Computer                  UPS
       DB9F                     DB9M
 DCD    1   --------------------  2  On Battery

              3.3K ohm
 TxD    3   --[####]-*
                     |
 DTR    4   ---------*
 GND    5   ---------------*----  4  Ground
                           |
                           *----  9  Common
</example>
    </subsection>
  </node>
  <node>
    <nodename>940-0095A Cable Wiring</nodename>
    <nodenext>940-0095B Cable Wiring</nodenext>
    <nodeprev>940-0023A Cable Wiring</nodeprev>
    <nodeup>Analyses of APC Cables</nodeup>
    <subsection>
      <title>940-0095A Cable Wiring</title>
      <para><indexterm index="cp">Cables</indexterm> This is the definitive wiring diagram for the 940-0095A cable submitted by Chris Hanson &lt;cph at zurich.ai.mit.edu&gt;, who disassembled the original cable, destroying it in the process. He then built one from his diagram and it works perfectly.</para>
      <example xml:space="preserve">
Construction and operation of the APC #940-0095A cable.
This cable is included with the APC Back-UPS Pro PNP series.


UPS end                                      Computer end
-------                                      ------------
                  47k        47k
BATTERY-LOW (5) &gt;----R1----*----R2----*----&lt; DTR,DSR,CTS (4,6,8)
                         |          |
                         |          |
                         |         /  E
                         |       |/
                         |    B  |
                         *-------|  2N3906 PNP
                                 |
                                 |\
                                   \  C
                                    |
                                    |
                                    *----&lt; DCD (1)     Low Batt
                                    |
                                    |
                                    R 4.7k
                                    3
                                    |
                             4.7k   |
SHUTDOWN (1)    &gt;----------*----R4----*----&lt; TxD (3)
                         |
                         |  1N4148
                         *----K|---------&lt; RTS (7)      Shutdown

POWER-FAIL (2)  &gt;--------------------------&lt; RxD,RI (2,9) On Batt

GROUND (4,9)    &gt;--------------------------&lt; GND (5)


Operation:

* DTR is "cable power" and must be held at SPACE.  DSR or CTS may be
used as a loopback input to determine if the cable is plugged in.

* DCD is the "battery low" signal to the computer.  A SPACE on this
line means the battery is low.  This is signalled by BATTERY-LOW
being pulled down (it is probably open circuit normally).

Normally, the transistor is turned off, and DCD is held at the MARK
voltage by TxD.  When BATTERY-LOW is pulled down, the voltage
divider R2/R1 biases the transistor so that it is turned on, causing
DCD to be pulled up to the SPACE voltage.

* TxD must be held at MARK; this is the default state when no data is
being transmitted.  This sets the default bias for both DCD and
SHUTDOWN.  If this line is an open circuit, then when BATTERY-LOW is
signalled, SHUTDOWN will be automatically signalled; this would be
true if the cable were plugged in to the UPS and not the computer,
or if the computer were turned off.

* RTS is the "shutdown" signal from the computer.  A SPACE on this
line tells the UPS to shut down.

* RxD and RI are both the "power-fail" signals to the computer.  A
MARK on this line means the power has failed.

* SPACE is a positive voltage, typically +12V.  MARK is a negative
voltage, typically -12V.  Linux appears to translate SPACE to a 1
and MARK to a 0.</example>
    </subsection>
  </node>
  <node>
    <nodename>940-0095B Cable Wiring</nodename>
    <nodenext>940-0119A Cable Wiring</nodenext>
    <nodeprev>940-0095A Cable Wiring</nodeprev>
    <nodeup>Analyses of APC Cables</nodeup>
    <subsection>
      <title>940-0095B Cable Wiring</title>
      <para><indexterm index="cp">Cables</indexterm> This diagram is for informational purposes and may not be complete, we don't recommend that use it to build one yourself.</para>
      <example xml:space="preserve">
APC Part# - 940-0095B

Signal Computer                  UPS
       DB9F                     DB9M
 DTR    4   ----*
 CTS    8   ----|
 DSR    6   ----|
 DCD    1   ----*
 GND    5   ---------------*----  4  Ground
                           |
                           *----  9  Common
 RI     9   ----*
                |
 RxD    2   ----*---------------  2  On Battery
 TxD    3   ----------[####]----  1  Kill UPS Power
                      4.7K ohm</example>
    </subsection>
  </node>
  <node>
    <nodename>940-0119A Cable Wiring</nodename>
    <nodenext>BackOffice ES</nodenext>
    <nodeprev>940-0095B Cable Wiring</nodeprev>
    <nodeup>Analyses of APC Cables</nodeup>
    <subsection>
      <title>940-0119A Cable Wiring</title>
      <para><indexterm index="cp">Cables</indexterm> This diagram is for informational purposes and may not be complete, we don't recommend that use it to build you build one yourself. This cable is used with the BackUPS Office UPSes.</para>
      <example xml:space="preserve">
APC Part# - 940-0119A

  UPS      Computer
  pins     pins      Signal             Signal meaning
1 (brown)    4,6      DSR DTR     &lt;-   Shutdown when set by computer for 1-5 seconds.
2 (black)    8,9      RI  CTS     -&gt;   On battery power
3 (blue)     1,2      CD  RxD     -&gt;   Low battery
4 (red)       5       Ground
5 (yellow)    7       RTS         &lt;-   Begin signalling on other pins
6 (none)     none
</example>
    </subsection>
  </node>
  <node>
    <nodename>BackOffice ES</nodename>
    <nodenext>BackUPS ES and CS in Serial mode with Cable 940-0128A</nodenext>
    <nodeprev>940-0119A Cable Wiring</nodeprev>
    <nodeup>Analyses of APC Cables</nodeup>
    <subsection>
      <title>BackOffice ES</title>
      <para><indexterm index="cp">Cables</indexterm><indexterm index="cp">BackOffice ES</indexterm> The BackUPS ES has a straight through serial cable with no identification on the plugs. To make it work with apcupsd, specify the <strong>UPSCABLE 940-0119A</strong> and <strong>UPSTYPE backups</strong>.  The equivalent of cable 940-0119A is done on a PCB inside the unit.  Thanks to William Stock for supplying us with the information about the straight through cable, the PCB, and the following diagram:</para>
      <example xml:space="preserve">
computer           ----------- BackUPS-ES -----------------
DB9-M              DB-9F
pin    signal      pin

 4      DSR   -&gt;    4 --+
                        |  diode   resistor
 6      DTR   -&gt;    6 --+----&gt;|----/\/\/\---o kill power

 1      DCD   &lt;-    1 --+
                        |
 2      RxD   &lt;-    2 --+----------------+--o low battery
                                         |
 7      RTS   -&gt;    7 --------+--/\/\/\--+
                              |
                              +--/\/\/\--+
                                         |
 8      RI    &lt;-    8 --+----------------+--o on battery
                        |
 9      CTS   &lt;-    9 --+

 5      GND   ---   5 ----------------------o ground

 3      TxD         3 nc
</example>
    </subsection>
  </node>
  <node>
    <nodename>BackUPS ES and CS in Serial mode with Cable 940-0128A</nodename>
    <nodeprev>BackOffice ES</nodeprev>
    <nodeup>Analyses of APC Cables</nodeup>
    <subsection>
      <title>BackUPS ES and CS in Serial mode with Cable 940-0128A</title>
      <para><indexterm index="cp">BackUPS ES</indexterm><indexterm index="cp">Cables</indexterm> Though these UPSes are USB UPSes, APC supplies a serial cable (typically with a green DB9 F connector) that has 940-0128A stamped into one side of the plastic serial port connector. The other end of the cable is a 10 pin RJ45 connector that plugs into the UPS (thanks to Dean Waldow for sending me a cable!). Apcupsd version 3.8.5 and later supports this cable when specified as <strong>UPSCABLE 940-0128A</strong> and <strong>UPSTYPE backups</strong>. However, running in this mode much of the information that would be available in USB mode is lost. In addition, when apcupsd attempts to instruct the UPS to kill the power, it begins cycling about 4 times a second between battery and line. The solution to the problem (thanks to Tom Suzda) is to unplug the UPS and while it is still chattering, press the power button (on the front of the unit) until the unit beeps and the chattering stops. After that the UPS should behave normally and power down 1-2 minutes after requested to do so.</para>
      <para>An amazing discovery by slither_man allows one to build a CUSTOM-RJ45 cable (documented above) and run the BackUPS CS (and probably also the ES) in Smart mode. Running it this way provides all the same information that you would get by running it in USB mode. As a consequence, we recommend that you either purchase (where I don't know) or build your own CUSTOM-RJ45 cable rather than use the 940-0128A cable.</para>
      <para>Thanks to all the people who have helped test this and have provided information on the cable wiring, our best guess for the cable schematic is the following:</para>
      <example xml:space="preserve">
computer      --------- Inside the Connector---------  UPS
DB9-F         |                                     |  RJ45
pin - signal  |                                     |  Pin - Color
              |                                     |
 4     DSR  -&gt;|---+                                 |
              |   |  diode   resistor               |
 6     DTR  -&gt;|---+----&gt;|----/\/\/\---o kill power  |  8  Orange
              |                                     |
 1     DCD  &lt;-|----+                                |
              |    |                                |
 2     RxD  &lt;-|----+----------------+--o low battery|  3  Brown
              |                     |               |
 7     RTS  -&gt;|----------+--/\/\/\--+               |
              |          |                          |
              |          +--/\/\/\--+               |
              |                     |               |
 8     RI   &lt;-|----+----------------+--o on battery |  2  Black
              |    |                                |
 9     CTS  &lt;-|----+                                |
              |                         signal      |
 5     GND  --|-----------------------o ground      |  7  Red
              |                                     |
 3     TxD    |                                     |
              |                         chassis     |
 Chassis/GND  |-----------------------o ground      |  4  Black
              |                                     |
              |          Not connected              |  1, 5, 6, 9, 10
              --------------------------------------

The RJ45 pins are: looking at the end of the connector:

10 9 8 7 6 5 4 3 2 1
_______________________
| . . . . . . . . . . |
|                     |
-----------------------
       |____|
</example>
      <para>From Jan Babinski jbabinsk at pulsarbeacon dot com: (many thanks)</para>
      <para>The BackUPS XS1000(BX-1000) ships with the 940-0127B usb cable and the optional 940-0128D serial cable. I'm trying to get it running under OpenBSD so usb is out of the question. I've tried smart serial with the custom cable, but that's not working, so I'm stuck with dumb serial over 940-0128D.</para>
      <para>I have noticed that this cable is not supported by apcupsd so I set out to find out how much different this cable is compared with the supported ones. After tearing the cable apart (see schematic below) I noticed that it is functionally similar to the 940-0128A cable except for NC on (6) DTR and (2) RD on the computer side.</para>
      <example xml:space="preserve">Cable 940-0128D

DB9(Computer)               RJ45-10(UPS)

 (5)     (1)                 ____________
( o o o o o )               [ oooooooooo ]
 \ o o o o /                [____________]
  (9)   (6)                 (10)  [_]  (1)


 RI(9)&lt;---+
          |
CTS(8)&lt;---+--- E   2N2222(NPN)
                \|___
           ____ /| B |
          |    C     |
          |          |
          +---vvvv---+--[&gt;|------&lt;(2)OnBatt
RTS(7)&gt;---|    2k      1N5819
          +---vvvv---+--[&gt;|------&lt;(3)LowBatt
          |          |
          +--- C     |
                \|___|
                /| B
DCD(1)&lt;------- E    2N2222(NPN)

DTR(4)&gt;--------------------------&gt;(8)KillPwr

GND(5)----------------------------(7)Signal GND
(Shield)--------------------------(4)Chassis GND


Cable 940-0127B

USB(Computer)      RJ45-10(UPS)
 _________          ____________
| = = = = |        [ oooooooooo ]
|_________|        [____________]
 (1)   (4)         (10)  [_]  (1)

  +5V(1)-----------(1)+5V
DATA+(2)-----------(9)DATA+
DATA-(3)-----------(10)DATA-
  GND(4)-----------(7)Signal GND
(Shield)-----------(4)Chassis GRND

</example>
    </subsection>
  </node>
  <node>
    <nodename>Win32 Implementation Restrictions for Simple UPSes</nodename>
    <nodenext>Internal Apcupsd Actions for Simple Cables</nodenext>
    <nodeprev>Analyses of APC Cables</nodeprev>
    <nodeup>Cables</nodeup>
    <section>
      <title>Win32 Implementation Restrictions for Simple UPSes</title>
      <para><indexterm index="cp">Cables</indexterm><indexterm index="cp">Windows</indexterm> Due to inadequacies in the Win32 API, it is not possible to set/clear/get all the serial port line signals. apcupsd can detect: CTS, DSR, RNG, and CD. It can set and clear: RTS and DTR.</para>
      <para>This imposes a few minor restrictions on the functionality of some of the cables. In particular, LineDown on the Custom Simple cable, and Low Battery on the 0023A cable are not implemented.</para>
    </section>
  </node>
  <node>
    <nodename>Internal Apcupsd Actions for Simple Cables</nodename>
    <nodenext>RS232 Wiring and Signal Conventions</nodenext>
    <nodeprev>Win32 Implementation Restrictions for Simple UPSes</nodeprev>
    <nodeup>Cables</nodeup>
    <section>
      <title>Internal Apcupsd Actions for Simple Cables</title>
      <para><indexterm index="cp">Cables</indexterm></para>
      <example xml:space="preserve">
This section describes how apcupsd 3.8.5 (March 2002)
treats the serial port line signals for simple cables.

apcaction.c:
 condition = power failure detected
 cable = CUSTOM_SIMPLE
 action = ioctl(TIOCMBIS, DTR)      set DTR (enable power bit?)

apcaction.c:
 condition = power back
 cable = CUSTOM_SIMPLE
 action = ioctl(TIOCMBIC, DTR)      clear DTR (clear power bit)
 action = ioctl(TIOCMBIC, ST)       clear ST (TxD)

apcserial.c:
 condition = serial port initialization
 cable = 0095A, 0095B, 0095C
 action = ioctl(TIOMBIC, RTS)       clear RTS (set PnP mode)

 cable = 0119A, 0127A, 0128A
 action = ioctl(TIOMBIC, DTR)       clear DTR (killpower)
 action = ioctl(TIOMBIS, RTS)       set   RTS (ready to receive)

apcserial.c:
 condition = save_dumb_status
 cable = CUSTOM_SIMPLE
 action = ioctl(TIOMBIC, DTR)       clear DTR (power bit?)
 action = ioctl(TIOMBIC, RTS)       clear RTS (killpower)

 cable = 0020B, 0020C, 0119A, 0127A, 0128A
 action = ioctl(TIOMBIC, DTR)       clear DTR (killpower)

 cable = 0095A, 0095B, 0095C
 action = ioctl(TIOMBIC, RTS)       clear RTS (killpower)
 action = ioctl(TIOMBIC, CD)        clear DCD (low batt)
 action = ioctl(TIOMBIC, RTS)       clear RTS (killpower) a second time!

apcserial.c:
 condition = check_serial

 cable = CUSTOM_SIMPLE
 action = OnBatt = CD
 action = BattLow = CTS
 action = LineDown = SR

 cable = 0020B, 0020C, 0119A, 0127A, 0128A
 action = OnBatt = CTS
 action = BattLow = CD
 action = LineDown = 0

 cable = 0023A
 action = Onbatt = CD
 action = BattLow = SR
 action = LineDown = 0

 cable = 0095A, 0095B, 0095C
 action = OnBatt = RNG
 action = BattLow = CD
 action = LineDown = 0


apcserial.c
 condition = killpower

 cable = CUSTOM_SIMPLE, 0095A, 0095B, 0095C
 action = ioctl(TIOMCBIS, RTS)      set RTS (kills power)
 action = ioctl(TIOMCBIS, ST)       set TxD

 cable = 0020B, 020C, 0119A, 0127A, 0128A
 action = ioctl(TIOMCBIS, DTR)      set DTR (kills power)
</example>
    </section>
  </node>
  <node>
    <nodename>RS232 Wiring and Signal Conventions</nodename>
    <nodenext>Pin Assignment for the Serial Port [RS-232C]; 25-pin and 9-pin; Female End</nodenext>
    <nodeprev>Internal Apcupsd Actions for Simple Cables</nodeprev>
    <nodeup>Cables</nodeup>
    <section>
      <title>RS232 Wiring and Signal Conventions</title>
      <para><indexterm index="cp">Cables</indexterm> </para>
      <multitable>
        <columnfraction>25</columnfraction>
        <columnfraction>25</columnfraction>
        <columnfraction>25</columnfraction>
        <columnfraction>25</columnfraction>
        <tbody>
          <row>
            <entry>DB-25 Pin #</entry>
            <entry>DB-9 Pin #</entry>
            <entry>Name</entry>
            <entry>DTE-DCE Description</entry>
          </row>
          <row>
            <entry>1</entry>
            <entry>&ndash;</entry>
            <entry>FG</entry>
            <entry>&mdash; Frame Ground/Chassis GND</entry>
          </row>
          <row>
            <entry>2</entry>
            <entry>3</entry>
            <entry>TD</entry>
            <entry>&mdash;&gt; Transmitted Data, TxD</entry>
          </row>
          <row>
            <entry>3</entry>
            <entry>2</entry>
            <entry>RD</entry>
            <entry>&lt;&mdash; Received Data, RxD</entry>
          </row>
          <row>
            <entry>4</entry>
            <entry>7</entry>
            <entry>RTS</entry>
            <entry>&mdash;&gt; Request To Send</entry>
          </row>
          <row>
            <entry>5</entry>
            <entry>8</entry>
            <entry>CTS</entry>
            <entry>&lt;&mdash; Clear To Send</entry>
          </row>
          <row>
            <entry>6</entry>
            <entry>6</entry>
            <entry>DSR</entry>
            <entry>&lt;&mdash; Data Set Ready</entry>
          </row>
          <row>
            <entry>7</entry>
            <entry>5</entry>
            <entry>SG</entry>
            <entry>&mdash;&ndash; Signal Ground, GND</entry>
          </row>
          <row>
            <entry>8</entry>
            <entry>1</entry>
            <entry>DCD</entry>
            <entry>&lt;&mdash; Data Carrier Detect</entry>
          </row>
          <row>
            <entry>9</entry>
            <entry>&ndash;</entry>
            <entry>&ndash;</entry>
            <entry>&mdash; Positive DC test voltage</entry>
          </row>
          <row>
            <entry>10</entry>
            <entry>&ndash;</entry>
            <entry>&ndash;</entry>
            <entry>&mdash; Negative DC test voltage</entry>
          </row>
          <row>
            <entry>11</entry>
            <entry>&ndash;</entry>
            <entry>QM</entry>
            <entry>&lt;&mdash; Equalizer mode</entry>
          </row>
          <row>
            <entry>12</entry>
            <entry>&ndash;</entry>
            <entry>SDCD</entry>
            <entry>&lt;&mdash; Secondary Data Carrier Detect</entry>
          </row>
          <row>
            <entry>13</entry>
            <entry>&ndash;</entry>
            <entry>SCTS</entry>
            <entry>&lt;&mdash; Secondary Clear To Send</entry>
          </row>
          <row>
            <entry>14</entry>
            <entry>&ndash;</entry>
            <entry>STD</entry>
            <entry>&mdash;&gt; Secondary Transmitted Data</entry>
          </row>
          <row>
            <entry>15</entry>
            <entry>&ndash;</entry>
            <entry>TC</entry>
            <entry>&lt;&mdash; Transmitter (signal) Clock</entry>
          </row>
          <row>
            <entry>16</entry>
            <entry>&ndash;</entry>
            <entry>SRD</entry>
            <entry>&lt;&mdash; Secondary Receiver Clock</entry>
          </row>
          <row>
            <entry>17</entry>
            <entry>&ndash;</entry>
            <entry>RC</entry>
            <entry>&mdash;&gt; Receiver (signal) Clock</entry>
          </row>
          <row>
            <entry>18</entry>
            <entry>&ndash;</entry>
            <entry>DCR</entry>
            <entry>&lt;&mdash; Divided Clock Receiver</entry>
          </row>
          <row>
            <entry>19</entry>
            <entry>&ndash;</entry>
            <entry>SRTS</entry>
            <entry>&mdash;&gt; Secondary Request To Send</entry>
          </row>
          <row>
            <entry>20</entry>
            <entry>4</entry>
            <entry>DTR</entry>
            <entry>&mdash;&gt; Data Terminal Ready</entry>
          </row>
          <row>
            <entry>21</entry>
            <entry>&ndash;</entry>
            <entry>SQ</entry>
            <entry>&lt;&mdash; Signal Quality Detect</entry>
          </row>
          <row>
            <entry>22</entry>
            <entry>9</entry>
            <entry>RI</entry>
            <entry>&lt;&mdash; Ring Indicator</entry>
          </row>
          <row>
            <entry>23</entry>
            <entry>&ndash;</entry>
            <entry>&ndash;</entry>
            <entry>&mdash;&gt; Data rate selector</entry>
          </row>
          <row>
            <entry>24</entry>
            <entry>&ndash;</entry>
            <entry>&ndash;</entry>
            <entry>&lt;&mdash; Data rate selector</entry>
          </row>
          <row>
            <entry>25</entry>
            <entry>&ndash;</entry>
            <entry>TC</entry>
            <entry>&lt;&mdash; Transmitted Clock</entry>
          </row>
        </tbody>
      </multitable>
    </section>
  </node>
  <node>
    <nodename>Pin Assignment for the Serial Port [RS-232C]; 25-pin and 9-pin; Female End</nodename>
    <nodenext>Ioctl to RS232 Correspondence</nodenext>
    <nodeprev>RS232 Wiring and Signal Conventions</nodeprev>
    <nodeup>Cables</nodeup>
    <section>
      <title>Pin Assignment for the Serial Port (RS-232C), 25-pin and 9-pin, Female End</title>
      <para><indexterm index="cp">Cables</indexterm></para>
      <example xml:space="preserve">
   13                         1         5         1
 _______________________________      _______________
 \  . . . . . . . . . . . . .  /      \  . . . . .  /    RS232-connectors
  \  . . . . . . . . . . . .  /        \  . . . .  /     looking into the
   ---------------------------          -----------      end of the cable.
   25                      14            9       6

The diagram above represents the Female end of the cable. The
male end is the same, but looking from inside the cable.

 DTE : Data Terminal Equipment (i.e. computer)
 DCE : Data Communications Equipment (i.e. UPS)
 RxD : Data received; 1 is transmitted "low", 0 as "high"
 TxD : Data sent; 1 is transmitted "low", 0 as "high"
 DTR : DTE announces that it is powered up and ready to communicate
 DSR : DCE announces that it is ready to communicate; low=modem hang-up
 RTS : DTE asks DCE for permission to send data
 CTS : DCE agrees on RTS
 RI  : DCE signals the DTE that an establishment of a connection is attempted
 DCD : DCE announces that a connection is established</example>
    </section>
  </node>
  <node>
    <nodename>Ioctl to RS232 Correspondence</nodename>
    <nodeprev>Pin Assignment for the Serial Port [RS-232C]; 25-pin and 9-pin; Female End</nodeprev>
    <nodeup>Cables</nodeup>
    <section>
      <title>Ioctl to RS232 Correspondence</title>
      <para><indexterm index="cp">Cables</indexterm></para>
      <example xml:space="preserve">
#define TIOCM_LE        0x001
#define TIOCM_DTR       0x002
#define TIOCM_RTS       0x004
#define TIOCM_ST        0x008
#define TIOCM_SR        0x010
#define TIOCM_CTS       0x020
#define TIOCM_CAR       0x040
#define TIOCM_RNG       0x080
#define TIOCM_DSR       0x100
#define TIOCM_CD        TIOCM_CAR
#define TIOCM_RI        TIOCM_RNG
#define TIOCM_OUT1      0x2000
#define TIOCM_OUT2      0x4000</example>
    </section>
  </node>
  <node>
    <nodename>Testing Serial-Line UPSes</nodename>
    <nodenext>Troubleshooting Serial Line communications</nodenext>
    <nodeprev>Cables</nodeprev>
    <nodeup>Installation on Serial-Line UPSes</nodeup>
    <chapter>
      <title>Testing Serial-Line UPSes</title>
      <para><indexterm index="cp">Testing, Serial</indexterm><indexterm index="cp">Serial, Testing</indexterm> If you have a serial-line UPS, there are some tests you should run before the general ones described in the Testing (see <xref><xrefnodename>Testing Apcupsd</xrefnodename></xref>) section.</para>
      <para>To test your computer's connection with a serial-line UPS, you first need to establish that the serial line is functioning, and then that the UPS is responding to commands.  This can be a bit tricky, especially with a dumb voltage-signalling interface, because it is completely quiescent when there are no commands being passed, and the command repertoire doesn't include any self-tests.</para>
      <para>Because it is easy to configure a serial cable incorrectly in such a way as to cause premature shutdowns of the UPS power, we <emph>strongly</emph> recommend, especially for voltage- signaling (dumb) UPSes, that you do most of the initial testing with your computer plugged into the wall rather than your UPS. Thus if the UPS power is suddenly shut off, your computer will continue to run. We also recommend using safe-apccontrol as described below, until you are sure that the signaling is correct.</para>
      <para>Also note that if you launch the execution of apcupsd while your voltage-signaling UPS is on battery power, it is very likely that your UPS will immediately shut off the power. This is due to the initialization of the serial port line signals, which often looks to the UPS like a shutdown command.</para>
      <para>Finally, double-check the state of your cabling and UPS indicator lights frequently during testing.  For voltage-signaling UPSes, apcupsd is not currently able to detect whether or not the serial cable is connected. In addition, some simple signaling UPSes with certain cable combinations are not able to detect the low battery condition.  For more details please see <xref><xrefnodename>Voltage Signalling Features Supported by Apcupsd for Various Cables</xrefnodename></xref>.</para>
      <menu>
        <menuentry>
          <menunode>Establishing Serial Port Connection</menunode>
          <menutitle>Establishing Serial Port Connection</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Using apctest on Serial-Line UPSses</menunode>
          <menutitle>Using apctest on Serial-Line UPSses</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Establishing Serial Port Connection</nodename>
    <nodenext>Using apctest on Serial-Line UPSses</nodenext>
    <nodeup>Testing Serial-Line UPSes</nodeup>
    <section>
      <title>Establishing Serial Port Connection</title>
      <para><indexterm index="cp">Testing, Serial</indexterm> Once you have compiled, installed, and invoked apcupsd, you should wait to allow apcupsd to configure itself and establish contact with the UPS.</para>
      <para>If you see the following message about 30 seconds after starting apcupsd:</para>
      <example xml:space="preserve">
apcupsd FATAL ERROR in apcserial.c at line 156
PANIC! Cannot communicate with UPS via serial port.</example>
      <para>it means that apcupsd tried for about 30 seconds to establish contact with the UPS via the serial port, but was unable to do so. Before continuing, you must correct this problem. Some of the possible sources of the problem are:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>You have not configured the correct serial port name on the DEVICE directive in your <file>apcupsd</file> configuration file.</para>
        </item>
        <item>
          <para>The serial port that you have chosen has logins enabled. You must disable logins on that port, otherwise, the system prevents apcupsd from using it. Normally, the file <file>/etc/inittab</file> specifies the ports for which a getty process is started (on Sun machines, the serial port program equivalent to getty is called ttymon). You must disable this for the port that you wish to use.</para>
        </item>
        <item>
          <para>Make sure you are doing your testing as <strong>root</strong> otherwise, you may have permissions problems accessing the serial port.</para>
        </item>
        <item>
          <para>You may have cabling problems, either with an incorrect cable, or the incorrect cable specification directive in the configuration file.</para>
        </item>
        <item>
          <para>You may have a problem with the <file>/etc/apcupsd/acpupsd.conf</file> file. For example, check that you have specified the correct type of UPS and the correct networking directives.  For more details, see the <xref><xrefnodename>After Installation</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>If you have a SmartUPS 5000 RM 15U or similar model, that comes with a "Web/SNMP management card" in one of the "Smart Slots", this card may interfere with the serial port operation. If you are having problems, please remove this card and try again. Supposedly V3.0 of the card firmware has been corrected to properly release the serial port.</para>
        </item>
        <item>
          <para>Ensure that you have no other programs that are using the serial port. One user reported that he had problems because the serial port mouse (gpm) was using the same port as apcupsd. This causes intermittent seemingly random problems.</para>
        </item>
        <item>
          <para>If you are using a WinNT or Win2000 machine, the OS is probably attempting to attach a serial mouse to the port you are using (COM1 or COM2). To prevent this, edit your <file>c:\boot.ini</file> file, and you will find a line that looks something like the following:</para>
          <example xml:space="preserve">
multi(0)disk(0)rdisk(0)partition(1)\WINNT="Windows NT Workstation Version 4.00"</example>
          <para role="continues">Add the following to the end of the line: <file>/NoSerialMice:COM1</file> (or COM2) so that the new line looks like:</para>
          <example xml:space="preserve">
multi(0)disk(0)rdisk(0)partition(1)\WINNT="Windows NT Workstation Version 4.00" /NoSerialMice:COM1</example>
        </item>
        <item>
          <para>If you are using a WinNT or Win2000 machine, try connecting apcupsd to COM2 rather than COM1 (be sure to change your <file>c:\apcupsd\etc\apcupsd\apcupsd.conf</file> to reflect the change).</para>
        </item>
        <item>
          <para>If you are using a Solaris machine, you may have similar problems as described above for the WinNT machine. A possible fix is documented in the Sun section of the Configuration chapter of this manual.</para>
        </item>
        <item>
          <para>Try connecting your UPS to another machine. If it works, then you probably have a bad serial port card. As unlikely as this may sound, at least two of our users have had to replace bad serial port cards.</para>
        </item>
        <item>
          <para>Try doing an <code>lsof /dev/ttyS0</code> where you replace the <strong>/dev/ttyS0</strong> with your serial port name. If you get no output, the port is free (or there is no physical port). If you get output, then another program is using the port, and you should see which one.</para>
        </item>
        <item>
          <para>Try doing a <code>dmesg | grep tty</code>. This may show you if a program has grabbed the port. (Thanks to Joe Acosta for the suggestion.)</para>
        </item>
        <item>
          <para>If all else fails, make sure your system is configured for serial port support.</para>
        </item>
        <item>
          <para>If you are running Linux, check your <file>/proc</file> file system. For example: <code>cat /proc/devices</code> should print something like <emph>4 ttyS</emph> if you have a serial port. If your serial port is working, a <code>cat /proc/interrupts</code> should show the serial port usage (e.g. <strong>4: 294553 XT-PIC serial</strong>) Also, <code>cat /proc/ioports</code> should show up something like <strong>03f8-03ff : serial(auto)</strong>. Or, <code>cat /proc/tty</code> should print a line like <strong>serial /dev/ttyS 4 64-127 serial</strong>. Finally, a <code>cat /proc/tty/driver/serial</code> should print something like the following:</para>
          <example xml:space="preserve">
serinfo:1.0 driver:5.05c revision:2001-07-08
0: uart:16550A port:3F8 irq:4 baud:9600 tx:1503168 rx:1461721 fe:8</example>
        </item>
      </itemize>
      <para>The first thing to do is to look at your log file, usually <file>/var/log/messages</file> because apcupsd writes more detailed information to the log file whenever there is an error.</para>
      <para>If you have a UPS that uses apcsmart protcol (see table of types (see <xref><xrefnodename>type_table</xrefnodename></xref>) for a list of the UPSes using these protocols), you can manually test the serial communications with the UPS by starting a serial port communications program (such as minicom, tip, or cu) with the settings 2400 8N1 (2400 baud, 8 bits, no parity, 1 stop bit). Be extremely careful what you send to your UPS as certain characters may cause it to power down or may even cause damage to the UPS. Try sending an upper case Y to the UPS (without a return at the end). It should respond with SM. If this is not the case, review the possible problems listed above. If you fat finger the Y and enter y instead, no cause for alarm, you will simply get the APC copyright notice.</para>
      <para>Once you are sure that serial port communications is working, proceed to the next test.</para>
    </section>
  </node>
  <node>
    <nodename>Using apctest on Serial-Line UPSses</nodename>
    <nodeprev>Establishing Serial Port Connection</nodeprev>
    <nodeup>Testing Serial-Line UPSes</nodeup>
    <section>
      <title>Using apctest on Serial-Line UPSses</title>
      <para><indexterm index="cp">apctest</indexterm><indexterm index="cp">Testing, with apctest</indexterm> On an apcsmart serial-line UPS, apctest will give you access to the battery of low-level tests we described in <xref><xrefnodename>apctest</xrefnodename></xref>.  If you have a voltage-signalling UPS, it enables a different test repertoire which is described here,  Among other things, if you are uncertain about what kind of cable you have, you may be able to use apctest to figure that out.</para>
      <para>Shutdown apcupsd if it is running. Make sure your <file>/etc/apcupsd/apcupsd.conf</file> file has <strong>UPSTYPE backups</strong> and <strong>UPSCABLE simple</strong> Normally apctest will have been built and installed by default, otherwise, you can explicitly build it on Unix with:</para>
      <example xml:space="preserve">
cd &lt;apcupsd-source-directory&gt;
make apctest
./apctest</example>
      <para>on Win32 systems, use:</para>
      <example xml:space="preserve">
make apctestwin32
./apctest</example>
      <para>It will present you with the following output</para>
      <example xml:space="preserve">
2001-02-07 04:08:26 apctest 3.8.5 (3 January 2002) redhat
Checking configuration ...
sharenet.type = DISABLE
cable.type = CUSTOM_SIMPLE
mode.type = BK
Setting up serial port ...
Creating serial port lock file ...
Doing prep_serial() ...
Hello, this is the apcupsd Cable Test program.
This part of apctest is for testing dumb UPSes (ones that uses signaling rather than commands.
Most tests enter a loop polling every second for 10 seconds.</example>
      <para>Then it will present you with the following list of choices:</para>
      <example xml:space="preserve">
1) Test 1 - normal mode
2) Test 2 - no cable
3) Test 3 - no power
4) Test 4 - low battery (requires test 3 first)
5) Test 5 - battery exhausted
6) Test 6 - kill UPS power
7) Test 7 - run tests 1 through 5
8) Guess which is the appropriate cable
9) quit

Select test number:</example>
      <para>Run tests 1, 2, and 3. Note, none of the currently supported cables will indicate a change for test 2. You can then run test 8 to see what cable it thinks you should be using. Finally run test 4.</para>
      <para>apctest can also be run for Smart UPSes.</para>
      <para>The print out of your testing will be written to the file <file>apctest.output</file>. If you are unable to solve your problem, you can try posting that file to the development mailing list, and perhaps we can help you. In this case, please also include information on your operating system, which version of apcupsd you are using, your UPS model, and also your <file>apcupsd.conf</file> file.</para>
      <menu>
        <menuentry>
          <menunode>Expected apctest Signals for a UPS</menunode>
          <menutitle>Expected apctest Signals for a UPS</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Expected apctest Signals for a BackUPS Pro</menunode>
          <menutitle>Expected apctest Signals for a BackUPS Pro</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Expected apctest Signals for a UPS</nodename>
    <nodenext>Expected apctest Signals for a BackUPS Pro</nodenext>
    <nodeprev>Using apctest on Serial-Line UPSses</nodeprev>
    <nodeup>Using apctest on Serial-Line UPSses</nodeup>
    <subsection>
      <title>Expected apctest Signals for a UPS</title>
      <para><indexterm index="cp">Testing</indexterm><indexterm index="cp">apctest</indexterm> If you have configured your UPS as:</para>
      <example xml:space="preserve">
UPSTYPE backups
UPSCABLE APC_940_0119A
    or APC_940_0127A
    or APC_940_0128A
    or APC_940_0020B
    or APC_940_0020C</example>
      <para>here are typical signals you would expect to see in the output from the various tests of apctest:</para>
      <example xml:space="preserve">
Test 1 normal:              RTS for cables (0119A 0127A 0128A)
Test 2 no serial cable:     not important
Test 3 no AC power:         CTS for all cables
Test 4 batteries exhausted: CTS and CD for all cables</example>
      <para>Note: <strong>RTS</strong> if set in Test 1 will probably also be set in all the other tests. This is not important, what counts is the appearance of <strong>CTS</strong> when the power fails and additionally <strong>CD</strong> when the batteries are low.</para>
    </subsection>
  </node>
  <node>
    <nodename>Expected apctest Signals for a BackUPS Pro</nodename>
    <nodeprev>Expected apctest Signals for a UPS</nodeprev>
    <nodeup>Using apctest on Serial-Line UPSses</nodeup>
    <subsection>
      <title>Expected apctest Signals for a BackUPS Pro</title>
      <para><indexterm index="cp">Testing</indexterm><indexterm index="cp">apctest</indexterm> If you have configured your UPS as:</para>
      <example xml:space="preserve">
UPSTYPE backupspro
UPSCABLE APC_940_0095A
    or APC_940_0095C</example>
      <para>here are the typical signals you would expect to see in the output from the various tests of apctest:</para>
      <example xml:space="preserve">
Test 1 normal:              RTS not set
Test 2 no serial cable:     not important
Test 3 no AC power:         RNG
Test 4 batteries exhausted: RNG and CD</example>
      <para>Note: <strong>RTS</strong> should never be set in any of the tests as it is the killpower signal. What is important is the appearance of <strong>RNG</strong> when the power fails and additionally <strong>CD</strong> when the batteries are low.</para>
    </subsection>
  </node>
  <node>
    <nodename>Troubleshooting Serial Line communications</nodename>
    <nodenext>Recalibrating the UPS Runtime</nodenext>
    <nodeprev>Testing Serial-Line UPSes</nodeprev>
    <nodeup>Top</nodeup>
    <chapter>
      <title>Troubleshooting Serial Line communications</title>
      <para><indexterm index="cp">Problems, Serial</indexterm><indexterm index="cp">Serial Problems</indexterm></para>
      <menu>
        <menuentry>
          <menunode>Determining Which Voltage-Signaling Cable You Have</menunode>
          <menutitle>Determining Which Voltage-Signaling Cable You Have</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Once you have established serial communications</menunode>
          <menutitle>Once you have established serial communications</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Determining Which Voltage-Signaling Cable You Have</nodename>
    <nodenext>Once you have established serial communications</nodenext>
    <nodeprev>Troubleshooting Serial Line communications</nodeprev>
    <nodeup>Troubleshooting Serial Line communications</nodeup>
    <section>
      <title>Determining Which Voltage-Signaling Cable You Have</title>
      <para><emph>The most frequently encountered problem with voltage-signalling UPSes (e.g. BackUPS 650) is that you have incorrectly specified which cable is being used.</emph> All cables furnished by APC have the cable number stamped on the side of the computer connector end of the cable. Using this number with apcupsd will normally work fine. If you do not know what cable you have, you can use the apctest program to determine the type of the cable.</para>
      <para>For simple signaling UPSes, you should <emph>not</emph> use <strong>simple</strong> in the cable specification (i.e. <strong>UPSCABLE simple</strong>) unless you have made the cable yourself according to the wiring diagram given in the cables chapter of this manual.</para>
    </section>
  </node>
  <node>
    <nodename>Once you have established serial communications</nodename>
    <nodeprev>Determining Which Voltage-Signaling Cable You Have</nodeprev>
    <nodeup>Troubleshooting Serial Line communications</nodeup>
    <section>
      <title>Once you have established serial communications</title>
      <para><indexterm index="cp">Testing</indexterm> Once you have established that apcupsd can talk to the UPS over the serial part, go do the series of functional tests described in the main Testing (see <xref><xrefnodename>Testing Apcupsd</xrefnodename></xref>) section.</para>
      <para>One additional note applies:</para>
      <menu>
        <menuentry>
          <menunode>Bizarre Intermittent Behavior</menunode>
          <menutitle>Bizarre Intermittent Behavior</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Bizarre Intermittent Behavior</nodename>
    <nodeprev>Once you have established serial communications</nodeprev>
    <nodeup>Once you have established serial communications</nodeup>
    <subsection>
      <title>Bizarre Intermittent Behavior</title>
      <para>In one case, a user reported that he received random incorrect values from the UPS in the status output. It turned out that gpm, the mouse control program for command windows, was using the serial port without using the standard Unix locking mechanism. As a consequence, both apcupsd and gpm were reading the serial port. Please ensure that if you are running gpm that it is not configured with a serial port mouse on the same serial port.</para>
    </subsection>
  </node>
  <node>
    <nodename>Recalibrating the UPS Runtime</nodename>
    <nodenext>DATA Logging</nodenext>
    <nodeprev>Troubleshooting Serial Line communications</nodeprev>
    <nodeup>Top</nodeup>
    <chapter>
      <title>Recalibrating the UPS Runtime</title>
      <para><indexterm index="cp">Runtime recalibration</indexterm><indexterm index="cp">Recalibration Runtime</indexterm> Note: In a future release of apcupsd this procedure will be replaced by a daemon operation that can be performed on all types of UPS.</para>
      <para>This section does not apply to voltage-signalling or dumb UPSes such as the older BackUPS models.</para>
      <para>Smart UPSes internally compute the remaining runtime, and apcupsd uses the value supplied by the UPS. As the batteries age (after say two or three years), the runtime computation may no longer be accurate since the batteries no longer hold the same charge. As a consequence, in the event of a power failure, the UPS and thus apcupsd can report a runtime of 5 minutes remaining when in fact only one minute remains. This can lead to a shutdown before you might expect it, because regardless of the runtime remaining that is reported, the UPS will always correctly detect low batteries and report it, thus causing apcupsd to correctly shutdown your computer.</para>
      <para>If you wish to have the UPS recalibrate the remaining runtime calculations, you can do so manually as the current version of apcupsd does not support this feature. To do so,</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>Shutdown apcupsd</para>
        </item>
        <item>
          <para>contact your UPS directly using some terminal program such as minicom, tip, or cu with the settings 2400 8N1 (2400 baud, 8 bits, no parity, 1 stop bit). Be extremely careful what you send to your UPS as certain characters may cause it to power down or may even cause damage to the UPS. Try sending an upper case Y to the UPS (without a return at the end). It should respond with SM. If this is not the case, read the chapter on testing. If you fat finger the Y and enter y instead, no cause for alarm, you will simply get the APC copyright notice.</para>
        </item>
        <item>
          <para>when you are sure you are properly connected send an upper case D (no cr). This will put the UPS into calibration mode, and it will drain the battery down to 25% capacity (35% for a Matrix) at which point it will go back on the mains. In doing so, it will recompute the runtime calibration.</para>
        </item>
        <item>
          <para>If you wish to abort the calibration, enter a second D command.</para>
        </item>
        <item>
          <para>When you are done, restart apcupsd.</para>
        </item>
      </itemize>
      <para>In principle, you should be able to do this with the computer powered by the UPS, but if you wish to be completely safe, you should plug your computer into the wall prior to performing the runtime calibration. In that case, you will need to artificially load the UPS with light bulbs or other means. You should supply a load of about 30 to 35% but not more than 50%. You can determine the load by looking at the output of the <code>apcaccess status</code> command while apcupsd is running.</para>
      <para>You should not run the recalibration command more than once or twice per year as discharging these kinds of batteries tends to shorten their life span.</para>
      <menu>
        <menuentry>
          <menunode>Status Logging On Serial-Line UPSes</menunode>
          <menutitle>Status Logging On Serial-Line UPSes</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Status Logging On Serial-Line UPSes</nodename>
    <nodeprev>Recalibrating the UPS Runtime</nodeprev>
    <nodeup>Recalibrating the UPS Runtime</nodeup>
    <section>
      <title>Status Logging On Serial-Line UPSes</title>
      <para>Serial-line UPSes that speak the apcsmart protocol log all of the events described in the Status Format (see <xref><xrefnodename>apcupsd Status Logging</xrefnodename></xref>) section of the Technical Reference.  Voltage-signalling UPSes, on the other hand, have a much narrower data channel.  They can only report a small handful of conditions.</para>
      <para>The following summarizes (rather sketchily, sorry) the data you can expect to get from this obsolete hardware.  All corrections and additions will be welcome.</para>
      <para>From BackUPS Pro and SmartUPS v/s:</para>
      <example xml:space="preserve">
LINEFAIL : OnlineStatus
BATTSTAT : BatteryStatus
MAINS    : LineVoltageState
LASTEVNT : LastEventObserved</example>
      <para>BackUPS and NetUPS Simple Signals</para>
      <example xml:space="preserve">
LINEFAIL : OnlineStatus
BATTSTAT : BatteryStatus</example>
    </section>
  </node>
  <node>
    <nodename>DATA Logging</nodename>
    <nodeprev>Recalibrating the UPS Runtime</nodeprev>
    <nodeup>Installation on Serial-Line UPSes</nodeup>
    <chapter>
      <title>DATA Logging</title>
      <para><indexterm index="cp">Logging, DATA</indexterm><indexterm index="cp">DATA Logging</indexterm> This feature is somewhat outdated and not often used.</para>
      <para>Data logging consists of periodically logging important data concerning the operation of the UPS. For the definitive definition of the format, see log_data() in apcreports.c. The format varies according to the UPS model and the information available from the UPS.</para>
      <para>For UPS models, NBKPRO, SMART, SHARESMART, and MATRIX, the output is written in a format very similar to what PowerChute writes. That is:</para>
      <para>MinLineVoltage, MaxLineVoltage, OutputVoltage, BatteryVoltage, LineFrequency, LoadPercent, UPSTemperature,AmbientTemperature,Humidity,LineVoltage, BatteryCharge,toggle</para>
      <para>Any value that is not supported by your UPS such as AmbientTemperature and Humidity will be blank or possibly as 0.0. In any case the commas before and after that field will still be output. The toggle value alternates from 0 to 1 on each line. This was added at user request so that no two adjacent samples are identical.</para>
      <para>An actual example from the log file is:</para>
      <example xml:space="preserve">
Nov  2 12:43:05 matou apcupsd[23439]: 224.9,227.5,226.2,27.74,50.00,100.0,30.6,,,226.2,50.0,1</example>
    </chapter>
  </node>
  <node>
    <nodename>Technical Reference</nodename>
    <nodenext>Credits &lt;1&gt;</nodenext>
    <nodeprev>Installation on Serial-Line UPSes</nodeprev>
    <nodeup>Top</nodeup>
    <majorheading>Technical Reference</majorheading>
    <para><indexterm index="cp">Technical Reference</indexterm></para>
    <menu>
      <menuentry>
        <menunode>Configuration Directive Reference</menunode>
        <menutitle>Configuration Directive Reference</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>apcupsd Status Logging</menunode>
        <menutitle>apcupsd Status Logging</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>The Shutown Sequence and its Discontents</menunode>
        <menutitle>The Shutown Sequence and its Discontents</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>APC smart protocol</menunode>
        <menutitle>APC smart protocol</menutitle>
        <menucomment></menucomment>
      </menuentry>
      <menuentry>
        <menunode>Apcupsd -- RPM Packaging FAQ</menunode>
        <menutitle>Apcupsd &ndash; RPM Packaging FAQ</menutitle>
        <menucomment></menucomment>
      </menuentry>
    </menu>
  </node>
  <node>
    <nodename>Configuration Directive Reference</nodename>
    <nodenext>apcupsd Status Logging</nodenext>
    <nodeup>Technical Reference</nodeup>
    <chapter>
      <title>Configuration Directive Reference</title>
      <para><indexterm index="cp">Reference, Directives</indexterm><indexterm index="cp">Configuration, Directives</indexterm><indexterm index="cp">Directives</indexterm> Configuration directives in <file>/etc/apcupsd/apcupsd.conf</file> control the behavior of the apcupsd daemon.  For most installations it is only necessary to set a handful of general directives. The rest can be left at their defaults unless you have an exotic configuration.</para>
      <menu>
        <menuentry>
          <menunode>General Configuration Directives</menunode>
          <menutitle>General Configuration Directives</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Configuration Directives Used by the Network Information Server</menunode>
          <menutitle>Configuration Directives Used by the Network Information Server</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Configuration Directives used during Power Failures</menunode>
          <menutitle>Configuration Directives used during Power Failures</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Configuration Directives used to Control System Logging</menunode>
          <menutitle>Configuration Directives used to Control System Logging</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Configuration Directives for Sharing a UPS</menunode>
          <menutitle>Configuration Directives for Sharing a UPS</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Configuration Directives Used to Set the UPS EPROM</menunode>
          <menutitle>Configuration Directives Used to Set the UPS EPROM</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>General Configuration Directives</nodename>
    <nodenext>Configuration Directives Used by the Network Information Server</nodenext>
    <nodeup>Configuration Directive Reference</nodeup>
    <section>
      <title>General Configuration Directives</title>
      <para><indexterm index="cp">Directives, General</indexterm><indexterm index="cp">General Directives</indexterm> In general, each of these directives is required (ecept that the DEVICE directive is ignored for UPSCABLE ether).</para>
      <table>
        <tableitem>
          <tableterm>UPSTYPE &lt;type of APC UPS you have&gt;</tableterm>
          <item>
            <para>The name of a driver.  Should be one of <samp>dumb</samp>, <samp>apcsmart</samp>, <samp>net</samp>, <samp>usb</samp>, <samp>snmp</samp>, or <samp>test</samp>. This describes your interface type.</para>
            <para>The UPSTYPE directive can be defined during installation by using the <code>--with-upstype=</code> option of the <code>./configure</code> program.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>UPSCABLE &lt;type of cable you are using&gt;&gt;</tableterm>
          <item>
            <example xml:space="preserve">
      [ simple | 940-0020B | 940-0023A ]
      [ smart | 940-0024B | 940-0024C ]
      [ 940-1524C | 940-0024G | 940-0095A | 940-0095B | 940-0095C | 940-0119A]
      [ ether | usb ]</example>
            <para>The <code>--with-upscable=</code> option of <code>./configure</code> can be used to set a default for this directive during the your build.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>DEVICE &lt;name of device&gt;</tableterm>
          <item>
            <para>Specify which device is used for UPS communications. For serial ports, it is usually something like <file>/dev/ttyS0</file>. For USB ports, you may leave the name of the device blank (no specification) and apcupsd will automatically search the standard locations for the UPS.</para>
            <para>Normally, the <code>./configure</code> program will set an appropriate default value.  You may also specify the <code>--with-serial-dev=</code> option of the <code>./configure</code> program to set this directive at build time.</para>
            <para>If you have specified <strong>UPSTYPE net</strong>, then the device name to be specified consists of <strong>hostname:port</strong> where the hostname is the fully qualified name or IP address of the host (NIS server) and the port (optional) is the port to use to contact the server.</para>
            <para>If you specified <strong>UPSTYPE snmp</strong>, then the device name becomes <strong>hostname:vendor:community</strong>. Please see the SNMP chapter (see <xref><xrefnodename>Support for SNMP UPSes</xrefnodename></xref>) in this manual for more details.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>LOCKFILE &lt;path to lockfile&gt;</tableterm>
          <item>
            <para>This option tells apcupsd where to create a lockfile for the USB or serial port in the specified directory. This is important to keep two programs from reading or writing the port at the same time. Please note that although the directive name is LOCKFILE, you are actually specifying the lock file path. apcupsd automatically appends the name of the device when creating the file. On most systems, this directive is automatically set by the <code>./configure</code> program.  You may also explicitly set it during the build process by using the <code>--with-lock-dir=</code> option of the <code>./configure</code> program.</para>
          </item>
        </tableitem>
      </table>
    </section>
  </node>
  <node>
    <nodename>Configuration Directives Used by the Network Information Server</nodename>
    <nodenext>Configuration Directives used during Power Failures</nodenext>
    <nodeprev>General Configuration Directives</nodeprev>
    <nodeup>Configuration Directive Reference</nodeup>
    <section>
      <title>Configuration Directives Used by the Network Information Server</title>
      <para><indexterm index="cp">Directives, Network</indexterm><indexterm index="cp">Network directives</indexterm> None of these directives are required for proper operation of apcupsd. For the Network Information Server to work, it must be enabled in the configuration (default) with <code>--enable-nis</code></para>
      <table>
        <tableitem>
          <tableterm>NETSERVER [on | off]</tableterm>
          <item>
            <para>This configuration directive turns the network information server on or off. If it is on, apcupsd will spawn a child process that serves STATUS and EVENTS information over the network. This information is currently used by the Web-based CGI programs. The default is on. In some cases, for added security, you may want to invoke a separate information server daemon from the inetd daemon. In that case, <emph>NETSERVER</emph> should be <emph>off</emph>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>NISIP &lt;IP-address&gt;</tableterm>
          <item>
            <para>This directive specifies an IP address on which NIS server will listen for incoming connections. Default value is 0.0.0.0 that means any incoming request will be serviced but if you want it to listen to a single subnet you can set it up to that subnet address, for example 192.168.10.0. Additionally you can listen for a single IP like 192.168.10.1. You may also use the <code>--with-nisip=</code> option of the <code>./configure</code> program to set this directive during the build.</para>
            <para>This directive does not work on Win32 machines because inet_ipton() is not implemented there.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>NISPORT &lt;port&gt;</tableterm>
          <item>
            <para>This configuration directive specifies the port to be used by the apcupsd Network Information Server. The default is platform dependent, but typically 3551, which we have received from IANA as the official apcupsd networking port. If you change this port, you must manually change the #define SERV_TCP_PORT in cgi/upsfetch.c and rebuild the CGI programs. An alternative is to use the <code>--with-nis-port=</code> option of the <code>./configure</code> program during the build. In this case, all the appropriate locations will be automatically changed.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>EVENTSFILE &lt;filename&gt;</tableterm>
          <item>
            <para>If you want the apcupsd network information server to provide the last 10 events via the network, you must specify a file where apcupsd will save these events. The default is: <file>/etc/apcupsd/apcupsd.events</file>. Currently, apcupsd will save at most the last 50 events. Periodically (once an hour by default), apcupsd will check the size of this file. When more than 50 events are recorded, apcupsd will truncate the file to the most recent 10 events. Consequently this file will not grow indefinitely. Although we do not recommend it, you may change these values by editing apcevents.c and changing the appropriate defines. Be aware that if you set these values to very large numbers, apcupsd may make excessive memory demands on the system during the data access and file truncation operations.</para>
            <para>This filename may also be specified at build time by using the <code>--with-log-dir=</code> option of the <code>./configure</code> program.</para>
          </item>
        </tableitem>
      </table>
    </section>
  </node>
  <node>
    <nodename>Configuration Directives used during Power Failures</nodename>
    <nodenext>Configuration Directives used to Control System Logging</nodenext>
    <nodeprev>Configuration Directives Used by the Network Information Server</nodeprev>
    <nodeup>Configuration Directive Reference</nodeup>
    <section>
      <title>Configuration Directives used during Power Failures</title>
      <para><indexterm index="cp">Directives, Power fail</indexterm><indexterm index="cp">Power fail directives</indexterm> In general, none of these directives are required. However, if you have a voltage-signalling (dumb) UPS with a cable that does not support the Low Battery signal, you must set the TIMEOUT directive to force a shutdown. Please see the Cables (see <xref><xrefnodename>Cables</xrefnodename></xref>) section of this manual for more details.</para>
      <table>
        <tableitem>
          <tableterm>ANNOY &lt;time in seconds&gt;</tableterm>
          <item>
            <para>Specify the time in seconds between messages requesting logged in users to get off the system during a power failure. This timer starts only when the UPS is running on batteries. The default is 300 seconds (5 minutes). apcupsd sends the annoy messages by invoking the apccontrol script with the <code>annoyme</code> argument. The default is to send a wall message on Unix systems and a popup message in Windows.</para>
            <para>The value of <strong>ANNOYDELAY</strong> must be greater than the value of <strong>ANNOY</strong> in order to receive annoy messages (this doesn't make sense, and means that the default values do not generate annoy messages: KES).</para>
            <para>Note that if <strong>NOLOGON</strong> is set to <strong>disable</strong> the annoy messages will also be disabled.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>ANNOYDELAY &lt;time in seconds&gt;</tableterm>
          <item>
            <para>Specify delay time in seconds before apcupsd begins requesting logged in users to get off the system during a power failure. This timer starts only after the UPS is running on batteries. This timer is reset when the power returns. The default is 60 seconds. Thus, the first warning to log off the system occurs after 60 seconds on batteries, assuming that <strong>NOLOGON</strong> is not set to <strong>disable</strong>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>NOLOGON &lt;specifies when apcupsd should prevent user logins&gt;</tableterm>
          <item>
            <para>[ disable | timeout | percent | minutes | always ] are valid types.</para>
            <para>The type specified allows you define the point when apcupsd will create the <file>/etc/nologin</file> file and thus when user logins are prohibited. Once the <file>/etc/nologin</file> file is created, normal users are prevented from logging in. Control of when this file is created is important for allowing systems with big UPSes to run as normally until the system administrator determines the need for preventing user logins. The feature also allows the system administrator to hold the "ANNOY" factor until the <file>/etc/nologin</file> file is created. The default is always if no NOLOGON directive is specified.</para>
            <para>As far as I can tell, the only useful types are disable and always since the difference in the time when the logout warning is given and shutdown occurs for the other types is very short (KES).</para>
            <table>
              <tableitem>
                <tableterm>disable</tableterm>
                <item>
                  <para>prevents apcupsd from creating the nologin file.  Consequently, any user can login during a power failure condition.  Also, the ANNOY feature is disabled so users will not be warned to logoff the system.</para>
                </item>
              </tableitem>
              <tableitem>
                <tableterm>timeout</tableterm>
                <item>
                  <para>specifies that apcupsd should prohibit logins after the UPS is on batteries for 90% of the time specified on the <strong>TIMEOUT</strong> configuration directive. Note! Normally you don't want to specify a TIMEOUT value, so this option is probably not too useful (KES).</para>
                </item>
              </tableitem>
              <tableitem>
                <tableterm>percent</tableterm>
                <item>
                  <para>specifies that apcupsd should prohibit logins when the remaining battery charge percentage reaches 110% or less than the value specified on the <strong>BATTERYLEVEL</strong> configuration directive. Thus if the <strong>BATTERYLEVEL</strong> is specified as 15, apcupsd will prohibit logins when the battery charge drops below 16% (15% X 110% = 16%).</para>
                </item>
              </tableitem>
              <tableitem>
                <tableterm>minutes</tableterm>
                <item>
                  <para>specifies that apcupsd should prohibit logins when the remaining runtime in minutes reaches 110% or less than the value specified on the <strong>MINUTES</strong> configuration directive.  Thus if <strong>MINUTES</strong> is set to 3, apcupsd will prohibit logins when the remaining runtime is less than 3 minutes (3 X 110% = 3).</para>
                </item>
              </tableitem>
              <tableitem>
                <tableterm>always</tableterm>
                <item>
                  <para>causes apcupsd to immediately prohibit logins when a power failure occurs. This will also enable the ANNOY feature.</para>
                </item>
              </tableitem>
            </table>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>BATTERYLEVEL &lt;percent of battery&gt;</tableterm>
          <item>
            <para>If BATTERYLEVEL is specified, during a power failure, apcupsd will halt the system when the remaining battery charge falls below the specified percentage. The default is 5 percent. This directive is ignored for dumb (voltage-signalling) UPSes. To totally disable this counter, set <strong>BATTERYLEVEL -1</strong> in your <file>apcupsd.conf</file> file.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>MINUTES &lt;battery runtime in minutes&gt;</tableterm>
          <item>
            <para>If MINUTES is specified, during a power failure, apcupsd will shutdown the system when the remaining runtime on batteries as internally calculated by the UPS falls below the time specified. The default is 3. This directive is ignored for dumb (voltage-signalling) UPSes. It should be noted that some UPSes report an incorrect value for remaining runtime when the battery is fully charged. This can be checked by examining the <strong>TIMELEFT</strong> value as printed in the output of an <code>apcaccess status</code> command. If the value is zero or otherwise unreasonable, your UPS is probably broken. In this case, we recommend that you disable this timer by setting <strong>MINUTES -1</strong> in your <file>apcupsd.conf</file> file.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>TIMEOUT &lt;time in seconds&gt;</tableterm>
          <item>
            <para>After a power failure, apcupsd will halt the system when TIMEOUT seconds have expired.  A value of zero disables this timer. Normally for all Smart UPS models and dumb UPSes with cables that support low battery detection, this should be zero so that the shutdown time will be determined by the battery level and/or remaining runtime (see above) or in the case of a voltage-signalling UPS, when the battery is exhausted.  This command is required for dumb UPSes that do not provide a battery exhausted signal (only testing can determine this point).  For more information, see the Testing (see <xref><xrefnodename>Testing Apcupsd</xrefnodename></xref>) section of this manual.  This timer can also be useful if you want some slave machines to shutdown before other machines to conserve battery power.  It is also useful for testing apcupsd because you can force a rapid shutdown by setting a small value (e.g.  60) and pulling the plug to the UPS.</para>
            <para>When apcupsd is running in master mode (UPSCLASS netmaster), and a shutdown condition is determined, apcupsd will notify each of the slaves to perform a shutdown then apcupsd will sleep for 30 seconds before issuing the shutdown of its own computer. If you need the master to wait additional time before shutting down (to allow for shutdown of slower slaves or of slaves running software that requires more time to shutdown &mdash; e.g. databases), you can do so by adding additional sleep() commands to <file>/etc/apcupsd/apccontrol</file> in each case that causes a shutdown.</para>
            <para><strong>TIMEOUT</strong>, <strong>BATTERYLEVEL</strong>, and <strong>MINUTES</strong> can be set together without problems.  apcupsd will react to the first case or test that is valid.  Normally SmartUPS users will set <strong>TIMEOUT</strong> to zero so that the system is shutdown depending on the percentage battery charge remaining (<strong>BATTERYLEVEL</strong>) or the remaining battery runtime (<strong>MINUTES</strong>).</para>
            <para><anchor name="KILLDELAY <time in seconds>"></anchor></para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>KILLDELAY &lt;time in seconds&gt;</tableterm>
          <item>
            <para>If killdelay is set, apcupsd will continue running after a shutdown has been requested, and after the specified time in seconds, apcupsd will attempt to shut off the UPS the power. This directive should normally be disabled by setting the value to zero, but on some systems such as Win32 systems apcupsd cannot regain control after a shutdown to force the UPS to shut off the power.  In this case, with proper consideration for the timing, the <strong>KILLDELAY</strong> directive can be useful.  Please be aware, if you cause apcupsd to kill the power to your computer too early, the system and the disks may not have been properly prepared.  In addition, apcupsd must continue running after the shutdown is requested, and on Unix systems, this is not normally the case as the system will terminate all processes during the shutdown.</para>
          </item>
        </tableitem>
      </table>
    </section>
  </node>
  <node>
    <nodename>Configuration Directives used to Control System Logging</nodename>
    <nodenext>Configuration Directives for Sharing a UPS</nodenext>
    <nodeprev>Configuration Directives used during Power Failures</nodeprev>
    <nodeup>Configuration Directive Reference</nodeup>
    <section>
      <title>Configuration Directives used to Control System Logging</title>
      <para><indexterm index="cp">Directives Logging</indexterm><indexterm index="cp">Logging, directives</indexterm></para>
      <table>
        <tableitem>
          <tableterm>STATTIME&lt;time&gt;</tableterm>
          <item>
            <para>This directive supplies the time interval between writes to the STATUS file. If set to zero, the STATUS file will not be written. Please note that in a future version of apcupsd the STATUS file code will disappear since its functionality has been replaced by the Network Information Server and by <strong>apcaccess status</strong>, as a consequence, it is normally disabled by setting it to zero.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>STATFILE &lt;file&gt;</tableterm>
          <item>
            <para>This directive specifies the file to be used when writing the STATUS information. The default is <file>/etc/apcupsd/apcupsd.status</file>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>DATATIME&lt;time&gt;</tableterm>
          <item>
            <para>This directives supplies the time interval between writes of PowerChute&amp;tm; like data information to the log file. See the Data (see <xref><xrefnodename>DATA Logging</xrefnodename></xref>) section of this manual for additional details.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>FACILITY&lt;log-facility&gt;</tableterm>
          <item>
            <para>The facility directive can be used to change the system logging class or facility. The default is <strong>DAEMON</strong>. This parameter can be useful if you wish to direct the apcupsd system logging information to other than your system default files. See the Logging section of this manual for additional details.</para>
          </item>
        </tableitem>
      </table>
    </section>
  </node>
  <node>
    <nodename>Configuration Directives for Sharing a UPS</nodename>
    <nodenext>Configuration Directives Used to Set the UPS EPROM</nodenext>
    <nodeprev>Configuration Directives used to Control System Logging</nodeprev>
    <nodeup>Configuration Directive Reference</nodeup>
    <section>
      <title>Configuration Directives for Sharing a UPS</title>
      <para><indexterm index="cp">Directives Sharing</indexterm> The following directives apply to the master/slave networking mode of apcupsd where multiple machines can be powered by the same UPS. One machine, the master, will have a serial port connection to the UPS, and the other machines, the slaves, will obtain their information via the network from the master.</para>
      <para>Note, as of version 3.10.x, the old master/slave code is by default turned off in the configuration. You must explicitly enable it by including a <code>--enable-master-slave</code> option on your <code>./configure</code> command before building the source.</para>
      <para>In addition to the old master/slave code, there is now a new network driver enabled with <code>--enable-net</code> (default disabled) that can be used to control a slave from any version of apcupsd running NIS. This is a much more flexible system of controlling slaves because a slave machine that also has NIS turned on can thus act as a master for another slave with <code>--enable-net</code> turned on. With this mode turned on, the slave obtains the address of the master from the <strong>DEVICE</strong> directive, which takes the form <strong>hostname[:port]</strong> as a consequence, none of the directives apply for this form of networking. In addition, for this mode to work, you must specify <strong>UPSTYPE net</strong> so that the proper driver is loaded.</para>
      <para>The remainder of this section presents directives that apply to the old master/slave code that must be enabled by the <strong>enable-master-slave</strong> configuration option.</para>
      <table>
        <tableitem>
          <tableterm>UPSCLASS &lt;class of operation&gt;</tableterm>
          <item>
            <para>[ standalone | shareslave | sharemaster ] and [ netslave | netmaster ] are valid types. [ standalone | netslave | netmaster ] are tested classes. [ shareslave | sharemaster ] classes are being tested.</para>
            <para>The default is <strong>standalone</strong> and should be used for all machines powered by the UPS and having a serial port connection to the UPS, but where there are no other computers dependent on power from the same UPS. This is the normal case.</para>
            <para>Use <strong>netmaster</strong>, if and only if you have a serial port connection to the UPS and there are other machines deriving power from the same UPS. This is required in all master configuration files.</para>
            <para>Use <strong>netslave</strong> if and only if you have no serial port connection to the UPS, but you derive power from it. This is required in all slave configuration files, and in this case, you will also have UPSCABLE set to ether.</para>
            <para>Use <strong>shareslave</strong> if and only if you are using a ShareUPS and connected to a BASIC Port with Simple Signal. This code is not fully tested.</para>
            <para>Use <strong>sharemaster</strong>, if and only if you are using a ShareUPS and connected to the ADVANCED Port Smart Signal control. This code is not fully tested.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>UPSMODE [disable | share | net | sharenet ] are valid types.</tableterm>
          <item>
            <para>[ disable | net ] are the only known and tested classes.</para>
            <para>[ share | sharenet ] classes are being tested.</para>
            <para>For normal standalone operations, you will set UPSMODE to disable to indicate that you are disabling the master/slave networking.</para>
            <para>However, if you are using a single UPS to power several computers and you have configured master and slave computers, then set this value to net.</para>
            <para>Use share for two or seven (2/7) additional simple signal ports on a SmartAccessories(tm) (internal/external box) for SmartUPSes. The share and sharenet code is not fully tested.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>NETTIME &lt;time in seconds&gt;</tableterm>
          <item>
            <para>The interval in seconds that the master uses to send information to slave machines. This rate is automatically set to 1 second if the UPS goes on batteries and reset to your specified value when the mains power returns. A typical value might be 60 seconds.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>NETPORT &lt;IP port number&gt;</tableterm>
          <item>
            <para>This port number is used for communications in the master/slave networking code. Note that the master and each slave must have the same port number specified on the NETPORT directive in the configuration file. This port may also be specified during installation by using the <code>--with-net-port=</code> option of the <code>./configure</code> program.</para>
            <para>The NETPORT should not be confused with the port number for the Network Information Server which is specified with the <strong>SERVERPORT</strong> configuration directive.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>MASTER &lt;name of the master&gt; for slave machines.</tableterm>
          <item>
            <para>Used in slave configuration files, this is the network name of the master which is authorized to send commands to this slave. In all cases (of which I am aware), when you specify a <strong>MASTER</strong> directive, you will also specify <strong>UPSCABLE ether</strong> since your information about the UPS will come via the network from a master.</para>
            <para>The slave machine will be shutdown whichever occurs first: either at the request of the master when it does a shutdown or when the values you have specified for TIMEOUT, BATTERYLEVEL, or MINUTES expire (these should work but have not been fully tested). Consequently, if you want the slaves to begin shutting down before the master, you can do so by adjusting the values in the configuration file. If you want the slave to remain up until the master shuts down, you should set TIMEOUT, BATTERYLEVEL, and MINUTES all to zero.</para>
            <para>For proper functioning of the slave, you must specify the same <strong>UPSTYPE</strong> in the slave configuration file as is in the master configuration file.</para>
            <para>It should be noted that the master and slaves continue to communicate over the network even after the master has issued a shutdown command to the slaves. This is because the master apcupsd continues to run until it receives the shutdown signal from the system. This is important to ensure that all the slaves have been properly notified of the shutdown.</para>
            <para>We recommend that the machine names used on the <strong>MASTER</strong> and <strong>SLAVE</strong> directives be put in your <file>/etc/hosts</file> file so that apcupsd will be able to resolve the machine name during startup and shutdown even if DNS is not running. Alternatively, you can use IP addresses on the <strong>MASTER</strong> and <strong>SLAVE</strong> directives, but this is less flexible.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>SLAVE &lt;name of slave(s)&gt; used only in MASTER   configuration files.</tableterm>
          <item>
            <para>Used in master configuration files, this is the name of a slave machine that depends on this master. There can be a maximum of 20 slaves attached to one master. Thus you can specify multiple SLAVE directives in a master configuration file. Only one slave name can be specified per SLAVE directive, thus for multiple slaves, specify multiple SLAVE directives.</para>
            <para>As noted above the master and slaves continue to communicate over the network even after the master has issued a shutdown command to the slaves. This is because the master apcupsd continues to run until it receives the shutdown signal from the system. This is important to ensure that all the slaves have been properly notified of the shutdown.</para>
            <para>We recommend that the machine names used on the <strong>MASTER</strong> and <strong>SLAVE</strong> directives be put in your <file>/etc/hosts</file> file so that apcupsd will be able to resolve the machine name during startup and shutdown even if DNS is not running. Alternatively, you can use IP addresses on the <strong>MASTER</strong> and <strong>SLAVE</strong> directives, but this is less flexible.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>USERMAGIC &lt; user defined magic&gt; used only in   SLAVE configuration files.</tableterm>
          <item>
            <para>The USERMAGIC directive is a sort of password that gives a second level of identification security in a slave configuration file. It is a character string up to 17 characters in length. It should be unique for each slave. When the slave makes initial contact with the master, this string is passed to the master. Then on each transmission from the master to the slave, the string is passed back to the slave, which checks that it is the correct string before accepting the master's information. This string should be different for each and every slave on the network. This directive is not required.</para>
          </item>
        </tableitem>
      </table>
    </section>
  </node>
  <node>
    <nodename>Configuration Directives Used to Set the UPS EPROM</nodename>
    <nodeprev>Configuration Directives for Sharing a UPS</nodeprev>
    <nodeup>Configuration Directive Reference</nodeup>
    <section>
      <title>Configuration Directives Used to Set the  UPS EPROM</title>
      <para><indexterm index="cp">Directives EEPROM</indexterm><indexterm index="cp">EEPROM directives</indexterm> NOTE. THESE ARE DEPRECIATED AND NO LONGER WORK IN APCUPSD PLEASE USE APCTEST</para>
      <para>The values specified with the following directives are only used if the <code>--configure</code> option is specified on the apcupsd command line, and the UPS is capable of internal EPROM programming.  In that case, apcupsd attempts to set the values into the UPSes EPROM.</para>
      <para>Under normal operations, the values for these parameters specified in the configuration file are not used. Instead, they are read from the UPS EPROM by apcupsd.  See <xref><xrefnodename>Configuration Directives Used to Set the UPS EPROM</xrefnodename><xrefprinteddesc>Configuration Directives Used to Set the UPS EPROM</xrefprinteddesc></xref> of this manual for further details before attempting to reprogram your EEPROM.</para>
      <table>
        <tableitem>
          <tableterm>SENSITIVITY &lt;sets sensitivity level&gt;</tableterm>
          <item>
            <para>(H)igh, (M)edium, (L)ow</para>
            <para>This value determine how sensitive the UPS is to the mains quality and voltage fluctuations. The more sensitive it is, the quicker the UPS will switch to battery power when the mains line quality is bad. Normally, this should be set to H, but if you find your UPS switching to batteries frequently, you might want to try a less sensitive setting, providing that your computer equipment tolerates the poor quality mains. This value is written to the UPS EPROM when the  configure option is specified.</para>
            <para>Under normal apcupsd operations (no <code>--configure</code> option), apcupsd will read the value stored in the UPS and display it in the STATUS output.</para>
            <para><anchor name="WAKEUP <set wakeup delay>"></anchor></para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>WAKEUP &lt;set wakeup delay&gt;</tableterm>
          <item>
            <para>The UPS power restart delay value in [0,60,180,300] in seconds after the UPS has shut down during a power failure. This is to prevent the power from coming back on too quickly after a power down, and is important for those who have high rpm drives that need to spin down before powering them up again. Some older SCSI models are very sensitive to this problem. Default is zero. This value is written to the UPS EPROM when the <code>--configure</code> option is specified.</para>
            <para>Under normal apcupsd operations (no <code>--configure</code> option), apcupsd will read the value stored in the UPS and display it in the STATUS output.</para>
            <para><anchor name="SLEEP <set sleep delay>"></anchor></para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>SLEEP &lt;set sleep delay&gt;</tableterm>
          <item>
            <para>The UPS delay or grace period in [20,180,300,600] seconds before the UPS cuts the power to your equipment. The default is 20 seconds. This value is written to the UPS EPROM when the <code>--configure</code> option is specified.</para>
            <para>Under normal apcupsdoperations (no <code>--configure</code> option), apcupsd will read the value stored in the UPS and display it in the STATUS output.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>LOTRANSFER &lt;lower limit of ups batt. transfer&gt;</tableterm>
          <item>
            <para>This sets the low line voltage point at which to switch over to batteries. Different values are permitted based on the UPS model, classification, and manufacture date. Use <code>apcaccess eeprom</code> to show you which values are permitted. This value is written to the UPS EPROM when the <code>--configure</code> option is specified.</para>
            <para>Under normal apcupsdoperations (no <code>--configure</code> option), apcupsd will read the value stored in the UPS and display it in the STATUS output.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>HITRANSFER &lt;upper limit of ups batt. transfer&gt;</tableterm>
          <item>
            <para>This sets the high line voltage point to switch over to batteries. Different values are permitted based on the UPS model, classification, and manufacture date. Use <code>apcaccess eeprom</code> to show you which values are permitted. This value is written to the UPS EPROM when the <code>--configure</code> option is specified.</para>
            <para>Under normal apcupsdoperations (no <code>--configure</code> option), apcupsd will read the value stored in the UPS and display it in the STATUS output.</para>
            <para><anchor name="RETURNCHARGE <min_ batt_ charge level>"></anchor></para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>RETURNCHARGE &lt;min. batt. charge level&gt;</tableterm>
          <item>
            <para>This parameter specifies what battery percentage charge is necessary before the UPS will supply power to your equipment after a power down. Different values are permitted based on the UPS model, classification, and manufacture date. Use <code>apcaccess eeprom</code> to show you which values are permitted. This value is written to the UPS EPROM when the <code>--configure</code> option is specified.</para>
            <para>Under normal apcupsdoperations (no <code>--configure</code> option), apcupsd will read the value stored in the UPS and display it in the STATUS output.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>BEEPSTATE &lt;alarm beep state&gt;</tableterm>
          <item>
            <para>This parameter tells the UPS when it can sound its audio alarm. These settings are based on discrete events related to the remaining capacity of the UPS.</para>
            <table>
              <tableitem>
                <tableterm>0</tableterm>
                <item>
                  <para>immediately upon power failure</para>
                </item>
              </tableitem>
              <tableitem>
                <tableterm>T</tableterm>
                <item>
                  <para>power failure + 30 seconds</para>
                </item>
              </tableitem>
              <tableitem>
                <tableterm>L</tableterm>
                <item>
                  <para>low battery power</para>
                </item>
              </tableitem>
              <tableitem>
                <tableterm>N</tableterm>
                <item>
                  <para>never</para>
                </item>
              </tableitem>
            </table>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>UPSNAME  &lt;string&gt;</tableterm>
          <item>
            <para>This is an eight character string. This is the UPS name that will be stored in the UPS EPROM.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>BATTDATE &lt;string&gt;</tableterm>
          <item>
            <para>This is an eight character string that is the last date the batteries were changed.</para>
          </item>
        </tableitem>
      </table>
    </section>
  </node>
  <node>
    <nodename>apcupsd Status Logging</nodename>
    <nodenext>The Shutown Sequence and its Discontents</nodenext>
    <nodeprev>Configuration Directive Reference</nodeprev>
    <nodeup>Top</nodeup>
    <chapter>
      <title>apcupsd Status Logging</title>
      <para><indexterm index="cp">Logging, Status</indexterm><indexterm index="cp">Status logging</indexterm> There is a good deal of information available about the UPS and apcupsd's status. This document describes the format of that information.  Normally you will get at it via apcaccess, but there are other ways as well.</para>
      <menu>
        <menuentry>
          <menunode>Status report format</menunode>
          <menutitle>Status report format</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Status Report Example</menunode>
          <menutitle>Status Report Example</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Status Report Fields</menunode>
          <menutitle>Status Report Fields</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Logging the STATUS Information</menunode>
          <menutitle>Logging the STATUS Information</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Status report format</nodename>
    <nodenext>Status Report Example</nodenext>
    <nodeprev>apcupsd Status Logging</nodeprev>
    <nodeup>apcupsd Status Logging</nodeup>
    <section>
      <title>Status report format</title>
      <para><indexterm index="cp">Status Report</indexterm><indexterm index="cp">Report, Status</indexterm> The STATUS output is in ASCII format with a single data value or piece of information on each line output. Because not all UPSes supply the same information, the output varies based on the type of UPS that you are using. In general, if the information is not available for your UPS, the data portion of the output record will contain an <strong>N/A</strong> indicating that the information is not available.</para>
      <para>Status logging consists of periodically logging ALL available information concerning the UPS. Since the volume of data is rather large (over 1000 bytes per status), the STATUS data is not automatically sent to the system log file, instead, it is written as a series of data records to a specific file (normally <file>/etc/apcupsd/apcupsd.status</file>).</para>
      <para>After each write, the file is rewound so that the size of the file remains constant. At the current time, this file is 1135 bytes. The format of this file is very similar to the old apcupsd procfs file. The STATUS file is kept for backward compatibility and will be eliminated in a future version of apcupsd. The preferred method for obtaining this information is from apcaccess or by using the CGI interface (see <xref><xrefnodename>apcupsd Network Monitoring [CGI] Programs</xrefnodename></xref>).</para>
      <para>To make reading the status data reliable via a named pipe, the first record written contains a version number, the number of records that follow the first record, and the total number of bytes in those subsequent records. An actual example of such a status file (/etc/apcupsd/apcupsd.status) is:</para>
      <para>Consequently, the first record always consists of 24 bytes (23 characters followed by a newline). This record starts with APC and as indicated in the example above is followed by 28 records consisting of 675 bytes. The last record begins with END APC and contains the date and time matching the DATE record.</para>
      <para>Documentation of each record needs to be written. In the coming weeks, I plan to add additional records and possibly change the names of some of the fields.</para>
      <para>When this data is written to a file, it is written as two records, the first record, and all the other records together. In reading the file, it can be either be read a record at a time, or in one big read.</para>
      <para>When this data is written to syslog(), it is written a record at a time. The first record is the first 24 bytes. By having the number of records and the size in the first record, the complete status can be reliably reassembled.</para>
    </section>
  </node>
  <node>
    <nodename>Status Report Example</nodename>
    <nodenext>Status Report Fields</nodenext>
    <nodeprev>Status report format</nodeprev>
    <nodeup>apcupsd Status Logging</nodeup>
    <section>
      <title>Status Report Example</title>
      <para><indexterm index="cp">Examples, Status Report</indexterm><indexterm index="cp">Status</indexterm> An example of output from an international SmartUPS 1000 follows:</para>
      <example xml:space="preserve">
DATE     : Wed Sep 27 17:30:23 CEST 2000
HOSTNAME : polymatou.sibbald.com
RELEASE  : 3.7.3-20000925
CABLE    : Custom Cable Smart
MODEL    : SMART-UPS 1000
UPSMODE  : Stand Alone
STARTTIME: Wed Sep 27 10:39:23 CEST 2000
UPSNAME  : UPS_IDEN
STATUS   : ONLINE
LINEV    : 235.3 Volts
LOADPCT  :   9.3 Percent Load Capacity
BCHARGE  : 100.0 Percent
TIMELEFT : 130.0 Minutes
MBATTCHG : 5 Percent
MINTIMEL : 3 Minutes
MAXTIME  : 0 Seconds
MAXLINEV : 239.2 Volts
MINLINEV : 234.0 Volts
OUTPUTV  : 236.6 Volts
SENSE    : High
DWAKE    : 000 Seconds
DSHUTD   : 020 Seconds
DLOWBATT : 02 Minutes
LOTRANS  : 196.0 Volts
HITRANS  : 253.0 Volts
RETPCT   : 000.0 Percent
ITEMP    : 32.8 C Internal
ALARMDEL : 5 seconds
BATTV    : 27.9 Volts
LINEFREQ : 50.0 Hz
LASTXFER : Line voltage notch or spike
NUMXFERS : 0
XONBATT  : N/A
TONBATT  : 0 seconds
CUMONBATT: 0 seconds
XOFFBATT : N/A
SELFTEST : NO
STESTI   : 336
STATFLAG : 0x08 Status Flag
DIPSW    : 0x00 Dip Switch
REG1     : 0x00 Register 1
REG2     : 0x00 Register 2
REG3     : 0x00 Register 3
MANDATE  : 07/31/99
SERIALNO : QS9931125245
BATTDATE : 07/31/99
NOMOUTV  : 230
NOMBATTV :  24.0
HUMIDITY : N/A
AMBTEMP  : N/A
EXTBATTS : 0
BADBATTS : N/A
FIRMWARE : 60.11.I
APCMODEL : IWI
END APC  : Wed Sep 27 17:30:31 CEST 2000</example>
    </section>
  </node>
  <node>
    <nodename>Status Report Fields</nodename>
    <nodenext>Logging the STATUS Information</nodenext>
    <nodeprev>Status Report Example</nodeprev>
    <nodeup>apcupsd Status Logging</nodeup>
    <section>
      <title>Status Report Fields</title>
      <para><indexterm index="cp">Status</indexterm> The meaning of the above variables are:</para>
      <table>
        <tableitem>
          <tableterm>APC</tableterm>
          <item>
            <para>is the header record indicating the STATUS format revision level, the number of records that follow the APC statement, and the number of bytes that follow the record.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>DATE</tableterm>
          <item>
            <para>is the date and time that the information was last obtained from the UPS.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>HOSTNAME</tableterm>
          <item>
            <para>is the name of the machine that collected the UPS data.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>RELEASE</tableterm>
          <item>
            <para>is the apcupsd release number.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>CABLE</tableterm>
          <item>
            <para>is the cable as specified in the configuration file.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>MODEL</tableterm>
          <item>
            <para>is the UPS model as derived from information from the UPS.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>UPSMODE</tableterm>
          <item>
            <para>is the mode in which apcupsd is operating.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>STARTTIME</tableterm>
          <item>
            <para>is the time/date that apcupsd was started.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>UPSNAME</tableterm>
          <item>
            <para>is the name of the UPS as stored in the EEPROM.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>STATUS</tableterm>
          <item>
            <para>is the current status of the UPS (ONLINE, CHARGING, ONBATT,...)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>MASTERUPD</tableterm>
          <item>
            <para>is the last time the master sent an update to the slave. This value is present only in slave configurations.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>LINEV</tableterm>
          <item>
            <para>is the current line voltage as returned by the UPS.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>LOADPCT</tableterm>
          <item>
            <para>is the percentage of load capacity as estimated by the UPS.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>BCHARGE</tableterm>
          <item>
            <para>is the percentage charge on the batteries.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>TIMELEFT</tableterm>
          <item>
            <para>is the remaining runtime left on batteries as estimated by the UPS.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>MBATTCHG</tableterm>
          <item>
            <para>if the battery charge percentage (BCHARGE) drops below this value, apcupsd will shutdown your system.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>MINTIMEL</tableterm>
          <item>
            <para>apcupsd will shutdown your system if the remaining runtime equals or is below this point.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>MAXTIME</tableterm>
          <item>
            <para>apcupsd will shutdown your system if the time on batteries exceeds this value. A value of zero disables the feature.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>MAXLINEV</tableterm>
          <item>
            <para>is the maximum line voltage since the last STATUS as returned by the UPS.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>MINLINEV</tableterm>
          <item>
            <para>is the minimum line voltage since the last STATUS as returned by the UPS.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>OUTPUTV</tableterm>
          <item>
            <para>is the voltage the UPS is supplying to your equipment.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>SENSE</tableterm>
          <item>
            <para>is the sensitivity level of the UPS to line voltage fluctuations.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>DWAKE</tableterm>
          <item>
            <para>is the amount of time the UPS will wait after a power off condition when the power is restored.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>DSHUTD</tableterm>
          <item>
            <para>is the grace delay that the UPS gives after receiving a power down command from apcupsd before it powers off your equipment.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>DLOWBATT</tableterm>
          <item>
            <para>is the remaining runtime below which the UPS sends the low battery signal. At this point apcupsd will force an immediate emergency shutdown.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>LOTRANS</tableterm>
          <item>
            <para>is the line voltage below which the UPS will switch to batteries.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>HITRANS</tableterm>
          <item>
            <para>is the line voltage above which the UPS will switch to batteries.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>RETPCT</tableterm>
          <item>
            <para>is the percentage charge that the batteries must have after a power off condition before the UPS will restore power to your equipment.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>STATFLAG</tableterm>
          <item>
            <para>is a status flag indicating the UPS status. See STATUS.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>ITEMP</tableterm>
          <item>
            <para>is the internal UPS temperature as supplied by the UPS.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>ALARMDEL</tableterm>
          <item>
            <para>is the delay period for the UPS alarm.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>BATTV</tableterm>
          <item>
            <para>is the battery voltage as supplied by the UPS.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>LINEFREQ</tableterm>
          <item>
            <para>is the line frequency in Hertz as given by the UPS.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>LASTXFER</tableterm>
          <item>
            <para>is the reason for the last transfer to batteries.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>NUMXFERS</tableterm>
          <item>
            <para>the number of transfers to batteries since apcupsd startup.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>XONBATT</tableterm>
          <item>
            <para>time and date of last transfer to batteries, or N/A.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>TONBATT</tableterm>
          <item>
            <para>time in seconds currently on batteries, or 0.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>CUMONBATT</tableterm>
          <item>
            <para>total (cumulative) time on batteries in seconds since apcupsd startup.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>XOFFBATT</tableterm>
          <item>
            <para>time and date of last transfer from batteries, or N/A.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>SELFTEST</tableterm>
          <item>
            <para>is the results of the last self test, and may have the following values: OK - self test indicates good battery BT - self test failed due to insufficient battery capacity NG - self test failed due to overload NO - No results (i.e. no self test performed in the last 5 minutes).</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>STESTI</tableterm>
          <item>
            <para>is the interval in hours between automatic self tests.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>STATFLAG</tableterm>
          <item>
            <para>status flag. English version is given by STATUS.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>DIPSW</tableterm>
          <item>
            <para>is the dip switch settings.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>REG1</tableterm>
          <item>
            <para>is the value from the UPS fault register 1.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>REG2</tableterm>
          <item>
            <para>is the value from the UPS fault register 2.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>REG3</tableterm>
          <item>
            <para>is the value from the UPS fault register 3.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>MANDATE</tableterm>
          <item>
            <para>is the date the UPS was manufactured.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>SERIALNO</tableterm>
          <item>
            <para>is the UPS serial number.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>BATTDATE</tableterm>
          <item>
            <para>is the date that batteries were last replaced.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>NOMOUTV</tableterm>
          <item>
            <para>is the output voltage that the UPS will attempt to supply when on battery power.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>NOMBATTV</tableterm>
          <item>
            <para>is the nominal battery voltage.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>HUMIDITY</tableterm>
          <item>
            <para>is the humidity as measured by the UPS.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>AMBTEMP</tableterm>
          <item>
            <para>is the ambient temperature as measured by the UPS.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>EXTBATTS</tableterm>
          <item>
            <para>is the number of external batteries as defined by the user. A correct number here helps the UPS compute the remaining runtime more accurately.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>BADBATTS</tableterm>
          <item>
            <para>is the number of bad battery packs.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>FIRMWARE</tableterm>
          <item>
            <para>is the firmware revision number.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>APCMODEL</tableterm>
          <item>
            <para>is the old APC model identification code.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>END APC</tableterm>
          <item>
            <para>is the time and date that the STATUS record was written.</para>
          </item>
        </tableitem>
      </table>
    </section>
  </node>
  <node>
    <nodename>Logging the STATUS Information</nodename>
    <nodeprev>Status Report Fields</nodeprev>
    <nodeup>apcupsd Status Logging</nodeup>
    <section>
      <title>Logging the STATUS Information</title>
      <para><indexterm index="cp">Logging Status</indexterm><indexterm index="cp">Status, Logging</indexterm> If specified in the configuration file, the STATUS data will also be written to the system log file. Please note, that it would not normally be wise to write this data to a normal system log file as there is no mechanism in syslog() to rewind the file and hence the log file would quickly become enormous. However, in two cases, it can be very useful to use syslog() to write this information.</para>
      <para>The first case is to set up your <file>syslog.conf</file> file so that the data is written to a named pipe. In this case, normally not more than about 8192 bytes of data will be kept before it is discarded by the system.</para>
      <para>The second case is to setup your syslog.conf file so that the status data is sent to another machine, which presumably then writes it to a named pipe. Consequently, with this mechanism, provides a simple means of networking apcupsd STATUS information.</para>
      <para>Although we mention system logging of STATUS information, we strongly recommend that you use  apcaccess or the CGI interface to get this information.</para>
    </section>
  </node>
  <node>
    <nodename>The Shutown Sequence and its Discontents</nodename>
    <nodenext>APC smart protocol</nodenext>
    <nodeprev>apcupsd Status Logging</nodeprev>
    <nodeup>Top</nodeup>
    <chapter>
      <title>The Shutown Sequence and its Discontents</title>
      <para><indexterm index="cp">Shutdown Sequence</indexterm></para>
      <menu>
        <menuentry>
          <menunode>Shutdown Sequence &lt;1></menunode>
          <menutitle>Shutdown Sequence</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Shutdown Problems</menunode>
          <menutitle>Shutdown Problems</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Master/Slave Shutdown &lt;1></menunode>
          <menutitle>Master/Slave Shutdown</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Startup</menunode>
          <menutitle>Startup</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Windows Considerations</menunode>
          <menutitle>Windows Considerations</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Shutdown Sequence &lt;1&gt;</nodename>
    <nodenext>Shutdown Problems</nodenext>
    <nodeprev>The Shutown Sequence and its Discontents</nodeprev>
    <nodeup>The Shutown Sequence and its Discontents</nodeup>
    <section>
      <title>Shutdown Sequence</title>
      <para>If you experienced so problems with the testing procedures, or if you are porting apcupsd to another system, or you are simply curious, you may want to know exactly what is going on during the shutdown process.</para>
      <para>The shutdown sequence is as follows:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>apcupsd detects that there is a power problem and it calls <code>/etc/apcupsd/apccontrol powerout</code>, which normally sends a message to all users informing them of a potential problem.</para>
        </item>
        <item>
          <para>After approximately 5 seconds in the power problem mode, apcupsd calls <code>/etc/apcupsd/apccontrol onbattery</code>, which normally sends a message to all users informing them that the UPS is on batteries.</para>
        </item>
        <item>
          <para>When one of the conditions listed below occurs, apcupsd issues a shutdown command by calling <code>/etc/apcupsd/apccontrol doshutdown</code>, which should perform a shutdown of your system using the system shutdown(8) command. You can modify the behavior by editing the <file>/etc/apcupsd/apccontrol</file> script, but doing so will make it more complicated to upgrade to the next apcupsd version.</para>
          <para>The conditions that trigger the shutdown can be: running time on batteries have expired (TIMEOUT), the battery runtime remaining is below the configured value (BATTERYLEVEL), the estimated remaining runtime is below the configured value (MINUTES), or the UPS signals that the batteries are exhausted.</para>
          <para>A shutdown could also be initiated if apcupsd detects that the batteries are no longer functioning correctly. This case, though very unusual, can happen at any time even if there is proper mains voltage, and <code>/etc/apcupsd/apccontrol emergency</code> is called.</para>
          <para>Just before initiating any shutdown through the apccontrol script, apcupsd will create the file <file>/etc/apcupsd/powerfail</file>. This file will be used later in the shutdown sequence to recall apcupsd after syncing of the disks to initiate a power off of the UPS.</para>
          <para>If the <file>/etc/nologin</file> file has not already been created, it will normally be created during the shutdown sequence to prevent additional users from logging in (see the NOLOGIN configuration directive).</para>
          <para>Even though apcupsd has requested the system to perform a shutdown, it continues running. If it is a master with slaves, it will inform the slaves to do a shutdown. They perform their shutdown by calling <code>/etc/apcupsd/apccontrol remotedown</code>.</para>
        </item>
        <item>
          <para>When the system signals apcupsd to do exit, it does so.  This is part of the normal system shutdown (at least on Unix and Linux systems) and the exact time that apcupsd receives the termination signal depends on how the shutdown links (usually in <file>/etc/rc.d</file>) are set.</para>
          <para>Note that on Windows NT systems, apcupsd apparently continues to run as a Service even though the machine is "shutdown".</para>
        </item>
        <item>
          <para>During the shutdown of the system after apcupsd has been forced to exit, one of the last things done by the system shutdown is to call the halt script, which is usually in <file>/etc/rc.d/halt</file> or <file>/etc/rc.d/init.d/halt</file>, or possibly in <file>/sbin/init.d/rc.0</file> depending on your system. If apcupsd was properly installed, this standard halt script was modified to include a bit of new logic just before the final halt of the system. It first tests if the file <file>/etc/apcupsd/powerfail</file> exists, and if it does, it executes <code>/etc/apcupsd/apccontrol killpower</code>. It is this last step that will cause apcupsd to be re-executed with the <code>--killpower</code> option on the command line. This option tells apcupsd to inform the UPS to kill the power.</para>
          <para>This final step is important if you want to ensure that your system will automatically reboot when the power comes back on. The actual code used on the Red Hat version is:</para>
          <example xml:space="preserve">
# See if this is a powerfail situation.                             # ***apcupsd***
if [ -f /etc/apcupsd/powerfail ]; then                              # ***apcupsd***
 echo                                                               # ***apcupsd***
 echo "APCUPSD will now power off the UPS"                          # ***apcupsd***
 echo                                                               # ***apcupsd***
 /etc/apcupsd/apccontrol killpower                                  # ***apcupsd***
 echo                                                               # ***apcupsd***
 echo "Please ensure that the UPS has powered off before rebooting" # ***apcupsd***
 echo "Otherwise, the UPS may cut the power during the reboot!!!"   # ***apcupsd***
 echo                                                               # ***apcupsd***
fi                                                                  # ***apcupsd***</example>
        </item>
      </itemize>
      <para>The above code must be inserted as late as possible in the halt script. On many systems, such as Red Hat, all the disk drives were unmounted, then remounted read-only, thus permitting access to the <file>/etc</file> files and the apcupsd executable. If your system does not explicitly remount the disks, you must remount them in read-only mode in the code that you add. Examples of code fragments that do this can be found in the <file>distributions/suse</file> subdirectory of the source.</para>
      <para>If you are not able to insert the above code in your halt script because there is no halt script, or because your halt script calls the init program as some Unix systems do, you can either just forget about powering off the UPS, which means that your machine will not automatically reboot after a power failure, or there is yet another alternative, though not at all as satisfying as inserting code in the halt script.</para>
      <para>Only if you cannot insert the appropriate code in the halt script, when you start apcupsd, normally from the <file>/etc/rc.d/init.d/apcupsd</file> script, use the <code>--kill-on-powerfail</code> option. This will cause apcupsd to program the UPS to shutoff the power just before it (apcupsd) does the system shutdown. Please note that this is not the most ideal solution. Read on to understand why.</para>
      <para>A very important consideration is that you must set the EEPROM in your UPS so that it waits a sufficient time for the system to halt before it shuts off the UPS power. The current value as well as the permitted values for your UPS can be determined by executing:</para>
      <example xml:space="preserve">
apcaccess eeprom</example>
      <para>The output should look something like the following:</para>
      <example xml:space="preserve">
apcaccess eeprom

Valid EPROM values for the SMART-UPS 1000

                       Config        Current  Permitted
Description              Directive     Value    Values
===================================================================
Upper transfer voltage   HITRANSFER    253      253 264 271 280
Lower transfer voltage   LOTRANSFER    196      196 188 208 204
Return threshold         RETURNCHARGE  0        00 15 50 90
Output voltage on batts  OUTPUTVOLTS   230      230 240 220 225
Sensitivity              SENSITIVITY   H        H M L L
Low battery warning      LOWBATT       2        02 05 07 10
Shutdown grace delay     SLEEP         20       020 180 300 600
Alarm delay              BEEPSTATE     0        0 T L N
Wakeup delay             WAKEUP        0        000 060 180 300
Self test interval       SELFTEST      336      336 168 ON  OFF
</example>
      <para>The line of interest for you is the <strong>Shutdown grace delay</strong>, which can be changed using the SLEEP (see <xref><xrefnodename>SLEEP &lt;set sleep delay&gt;</xrefnodename></xref>) directive in your <strong>apcupsd.conf</strong> file. The default value is 20 seconds, but generally, you can set it to 180, 300, or 600 seconds depending on your UPS. See the EEPROM (see <xref><xrefnodename>Configuring Your EEPROM</xrefnodename></xref>) this manual for further details on how to change this EPROM value.</para>
      <para>If you use the <code>--kill-on-powerfail</code> option, you run the risk of having the computer power cut before the system has shutdown. Even if the grace period is rather long, if something goes wrong in the shutdown, well, it is up to you to decide.</para>
      <para>If apcupsd has successfully shutdown your computer and powered off the UPS during a power outage, you can control whether or not your computer is automatically rebooted when the power returns.</para>
      <para>The UPS contains two internal EPROM values that determine when it will restore power to your computer after a full power shutdown. They are the RETURNCHARGE (see <xref><xrefnodename>RETURNCHARGE &lt;min_ batt_ charge level&gt;</xrefnodename></xref>) percentage and the WAKEUP (see <xref><xrefnodename>WAKEUP &lt;set wakeup delay&gt;</xrefnodename></xref>) delay. Briefly, the <strong>RETURNCHARGE</strong> specifies what percentage charge the battery must have before the power is restored. Higher values are recommended in regions where the power goes up and down frequently. The <strong>WAKEUP</strong> delay is a simple time delay. Most sites will have both of these at zero, or perhaps the <strong>RETURNCHARGE</strong> set to 15. Please follow the links to the <strong>Configuration</strong> section of this manual for more information.  See the EEPROM (see <xref><xrefnodename>Configuring Your EEPROM</xrefnodename></xref>) of this manual for further details on how to change these EPROM values.</para>
    </section>
  </node>
  <node>
    <nodename>Shutdown Problems</nodename>
    <nodenext>Master/Slave Shutdown &lt;1&gt;</nodenext>
    <nodeprev>Shutdown Sequence &lt;1&gt;</nodeprev>
    <nodeup>The Shutown Sequence and its Discontents</nodeup>
    <section>
      <title>Shutdown Problems</title>
      <para>Obviously if your halt script is not properly modified, apcupsd will not be able to shut off the power to the UPS, and if the power returns before the batteries are exhausted your system will not automatically reboot. In any case, your machine should have been cleanly shut down.</para>
    </section>
  </node>
  <node>
    <nodename>Master/Slave Shutdown &lt;1&gt;</nodename>
    <nodenext>Startup</nodenext>
    <nodeprev>Shutdown Problems</nodeprev>
    <nodeup>The Shutown Sequence and its Discontents</nodeup>
    <section>
      <title>Master/Slave Shutdown</title>
      <para>In master/slave configurations, however, the master cannot be 100 percent sure that the slaves have all shutdown before it performs the power off. As a consequence, it is possible that the master will shut off the power before the slave has finished shutdown. If this is the case, the best procedure is to put an appropriate sleep command in the <file>/etc/apcupsd/apccontrol</file> file on the master. For example to give the slaves 30 additional seconds to shutdown, one would add:</para>
      <example xml:space="preserve">
sleep 30</example>
      <para>just after the line that reads</para>
      <example xml:space="preserve">
doshutdown)</example>
      <para>in the <file>apccontrol</file> file (approximately line 79 &mdash; depending on your system version).</para>
      <para>Also, on a slave machine, you do not want to use the modified halt script since it will recall apcupsd, which will detect that it is a slave (i.e. no connection to the UPS) and will complain that it cannot do the killpower. This situation is not harmful just annoying and possibly confusing.</para>
      <para>One possible problem during shutdown can be caused by remnants of old versions. Please be sure to delete or rename all prior versions (<file>/usr/local/sbin/apcupsd</file> or <file>/sbin/powersc</file>).</para>
    </section>
  </node>
  <node>
    <nodename>Startup</nodename>
    <nodenext>Windows Considerations</nodenext>
    <nodeprev>Master/Slave Shutdown &lt;1&gt;</nodeprev>
    <nodeup>The Shutown Sequence and its Discontents</nodeup>
    <section>
      <title>Startup</title>
      <para><indexterm index="cp">Startup</indexterm> Normally, apcupsd is automatically started when your system is rebooted. This normally occurs because the startup script apcupsd is linked into the appropriate places in <file>/etc/rc.d</file>. On most Linux systems, there is a program called chkconfig(8) that will automatically link the startup script.  This program is invoked by the <code>make install</code> scripts, or it is explicitly done for those systems that do not have chkconfig(8). If this is not the case, you can either link it in appropriately yourself or explicitly call it from your rc.local file. The appropriate manual way to startup apcupsd is by executing:</para>
      <example xml:space="preserve">
&lt;path&gt;/apcupsd start</example>
      <para>where &lt;path&gt; is normally <file>/etc/rc.d</file> or <file>/etc/rc.d/init.d</file> depending on your system (isn't Unix wonderful? :-)). Using this script is important so that any files remaining around after a power failure are removed. Likewise, shutting down apcupsd should be done with the same script:</para>
      <example xml:space="preserve">
&lt;path&gt;/apcupsd stop</example>
    </section>
  </node>
  <node>
    <nodename>Windows Considerations</nodename>
    <nodeprev>Startup</nodeprev>
    <nodeup>The Shutown Sequence and its Discontents</nodeup>
    <section>
      <title>Windows Considerations</title>
      <para><indexterm index="cp">Windows Considerations</indexterm> Please see the end of Windows chapter (see <xref><xrefnodename>Installation on Windows</xrefnodename></xref>) of this manual for conderations pertaining to shutdown and killpower on Windows.</para>
    </section>
  </node>
  <node>
    <nodename>APC smart protocol</nodename>
    <nodenext>Apcupsd -- RPM Packaging FAQ</nodenext>
    <nodeprev>The Shutown Sequence and its Discontents</nodeprev>
    <nodeup>Top</nodeup>
    <chapter>
      <title>APC smart protocol</title>
      <para><indexterm index="cp">Smart protocol</indexterm><indexterm index="cp">Protocol Smart</indexterm> The APC UPS protocol was originally analyzed by Pavel Korensky with additions from Andre H. Hendrick beginning in 1995, and we want to give credit for good, hard work, where credit is due. After having said that, you will see that Steven Freed built much of the orginal apcupsd information file. [Comment inserted by Riccardo Facchetti]</para>
      <para>The start of this chapter of the apcupsd manual in HTML format was pulled from the <uref><urefurl>http://www.exploits.org/nut/library/apcsmart.html</urefurl><urefdesc>Network UPS Tools (NUT)</urefdesc></uref> site. It has been an invaluable tool in improving apcupsd, and I consider it the <strong>Bible</strong> of APC UPS programming. In the course of using it, I have added information gleaned from apcupsd and information graciously supplied by APC. Hopefully, the additions made herein can benefit the original author and his <uref><urefurl>http://www.exploits.org/nut</urefurl><urefdesc>programming project</urefdesc></uref>, and maybe some day, the apcupsd project and the <strong>NUT</strong> project can join forces.</para>
      <menu>
        <menuentry>
          <menunode>Description</menunode>
          <menutitle>Description</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>RS-232 differences</menunode>
          <menutitle>RS-232 differences</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Diagram for cable hackers</menunode>
          <menutitle>Diagram for cable hackers</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>The Smart Protocol</menunode>
          <menutitle>The Smart Protocol</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Dip switch info</menunode>
          <menutitle>Dip switch info</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Status bits</menunode>
          <menutitle>Status bits</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Alert messages</menunode>
          <menutitle>Alert messages</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Register 1</menunode>
          <menutitle>Register 1</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Register 2</menunode>
          <menutitle>Register 2</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Register 3</menunode>
          <menutitle>Register 3</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Interpretation of the Old Firmware Revision</menunode>
          <menutitle>Interpretation of the Old Firmware Revision</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Interpretation of the New Firmware Revision</menunode>
          <menutitle>Interpretation of the New Firmware Revision</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>EEPROM Values</menunode>
          <menutitle>EEPROM Values</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Programming the UPS EEPROM</menunode>
          <menutitle>Programming the UPS EEPROM</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Acknowledgements</menunode>
          <menutitle>Acknowledgements</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Description</nodename>
    <nodenext>RS-232 differences</nodenext>
    <nodeprev>APC smart protocol</nodeprev>
    <nodeup>APC smart protocol</nodeup>
    <section>
      <title>Description</title>
      <para>Here's the information on the elusive APC smart signaling protocol used by their higher end units (Back-UPS Pro, Smart-UPS, Matrix-UPS, etc). What you see here has been collected from a variety of sources. Some people analyzed the chatter between PowerChute and their hardware. Others sent various characters to the UPS and figured out what the results meant.</para>
    </section>
  </node>
  <node>
    <nodename>RS-232 differences</nodename>
    <nodenext>Diagram for cable hackers</nodenext>
    <nodeprev>Description</nodeprev>
    <nodeup>APC smart protocol</nodeup>
    <section>
      <title>RS-232 differences</title>
      <para>Normal 9 pin serial connections have TxD on 3 and RxD on 2. APC's smart serial ports put TxD on pin 1 and RxD on pin 2. This means you go nowhere if you use a normal straight through serial cable. In fact, you might even power down the load if you plug one of those cables in. This is due to the odd routing of pins - DTR and RTS from the PC usually wind up driving the on/off line. So, when you open the port, they go high and *poof* your computer dies.</para>
      <para>Originally this evil hack was used to connect the UPS to the PC when this page was first being built. As you can see, I cheated and neglected the ground (only 2 wires!) and it still worked. This method can be used for playing around, but for professional systems this is obviously not a viable option.</para>
      <para>That hack didn't work out so well (damned cats), so it was retired quite awhile back. The most practical solution was to go out and BUY the DOS/Win version of PowerChute just for the black (smart) cable. I recommend doing the same thing if you actually care about this thing working properly. Of course, if you have one of the newer packages that came with PowerChute, you already have the cable you need.</para>
    </section>
  </node>
  <node>
    <nodename>Diagram for cable hackers</nodename>
    <nodenext>The Smart Protocol</nodenext>
    <nodeprev>RS-232 differences</nodeprev>
    <nodeup>APC smart protocol</nodeup>
    <section>
      <title>Diagram for cable hackers</title>
      <para>If you are handy with cable creation tools, check out the <uref><urefurl>http://www.exploits.org/nut/library/940-0024C.jpg</urefurl><urefdesc>940-0024C clone diagram</urefdesc></uref>. That's the black "smart" cable normally provided with APC models sold after 1996. The loopback pins on that diagram are used to keep PowerChute happy by allowing cable detection. If you use the <uref><urefurl>http://www.exploits.org/nut/</urefurl><urefdesc>NUT</urefdesc></uref> apcsmart driver, those pins don't matter.</para>
      <para>Many thanks to Steve Draper for providing this scan.</para>
      <para>For additional information on cables, see the section on custom cables (see <xref><xrefnodename>Cables</xrefnodename></xref>) in this manual.</para>
    </section>
  </node>
  <node>
    <nodename>The Smart Protocol</nodename>
    <nodenext>Dip switch info</nodenext>
    <nodeprev>Diagram for cable hackers</nodeprev>
    <nodeup>APC smart protocol</nodeup>
    <section>
      <title>The Smart Protocol</title>
      <para>Despite the lack of official information from APC, this table has been constructed. It's standard RS-232 serial communications at 2400 bps/8N1. Don't rush the UPS while transmitting or it may stop talking to you. This isn't a problem with the normal single character queries, but it really does matter for multi-char things like "@000". Sprinkle a few calls to usleep() in your code and everything will work a lot better.</para>
      <para>The following table describes the single character <strong>Code</strong> or command that you can send to the UPS, its meaning, and what sort of response the UPS will provide. Typically, the response shown below is followed by a newline (\n in C) and a carriage return (\r in C). If you send the UPS a command that it does not recognize or that is not available on your UPS, it will normally respond by "NA" for not available, otherwise the response is given in the "Typical results" column. &gt;</para>
      <multitable>
        <columnfraction>20</columnfraction>
        <columnfraction>20</columnfraction>
        <columnfraction>20</columnfraction>
        <columnfraction>20</columnfraction>
        <columnfraction>20</columnfraction>
        <tbody>
          <row>
            <entry>Code</entry>
            <entry>Meaning</entry>
            <entry>Typical results</entry>
            <entry></entry>
          </row>
          <row>
            <entry>^A</entry>
            <entry>Model string</entry>
            <entry>SMART-UPS 700</entry>
            <entry></entry>
          </row>
          <row>
            <entry>^N</entry>
            <entry>Turn on UPS (send twice, with &gt; 1.5s delay between chars) Only on 3rd gen SmartUPS and Black Back-UPS Pros</entry>
            <entry>n/a</entry>
            <entry></entry>
          </row>
          <row>
            <entry>^Z</entry>
            <entry>Permitted EEPROM Values</entry>
            <entry>A large string (254 chars) that gives the EEPROM permitted values for your model. For details see below.</entry>
            <entry></entry>
          </row>
          <row>
            <entry>A</entry>
            <entry>Front panel test</entry>
            <entry>Light show + "OK" (and 2s beep)</entry>
            <entry></entry>
          </row>
          <row>
            <entry>B</entry>
            <entry>Battery voltage</entry>
            <entry>Ranges - typical "27.87"</entry>
            <entry></entry>
          </row>
          <row>
            <entry>C</entry>
            <entry>Internal temperature (degrees C)</entry>
            <entry>Ranges - typical "036.0"</entry>
            <entry></entry>
          </row>
          <row>
            <entry>D</entry>
            <entry>Runtime calibration - runs until battery is below 25% (35% for Matrix) This updates the 'j' values - only works at 100% battery charge. Can be aborted with a second "D"</entry>
            <entry>! when on battery, $ on line</entry>
            <entry></entry>
          </row>
          <row>
            <entry>E</entry>
            <entry>Automatic self test intervals</entry>
            <entry>Default = 336 (336 hours = 14 days) (336=14 days, 168=7 days, ON=power on, OFF=never)</entry>
            <entry></entry>
          </row>
          <row>
            <entry>F</entry>
            <entry>Line frequency, Hz</entry>
            <entry>60.00 (50.0 in Europe)</entry>
            <entry></entry>
          </row>
          <row>
            <entry>G</entry>
            <entry>Cause of transfer</entry>
            <entry>R = unacceptable utility voltage rate of change, H = high utility voltage, L = low utility voltage, T = line voltage notch or spike, O = no transfers yet (since turnon), S = transfer due to serial port U command or activation of UPS test from front panel, NA = transfer reason still not available (read again).</entry>
            <entry></entry>
          </row>
          <row>
            <entry>K&ndash;K</entry>
            <entry>Shutdown with grace period (set with 'p') - need &gt; 1.5s between first and second K</entry>
            <entry>Matrix/3rd gen SmartUPS/Black Back-UPS Pros: "OK", all others: "*"</entry>
            <entry></entry>
          </row>
          <row>
            <entry>L</entry>
            <entry>Input line voltage</entry>
            <entry>Ranges - typical "118.3" or "228.8" in Europe</entry>
            <entry></entry>
          </row>
          <row>
            <entry>M</entry>
            <entry>Maximum line voltage received since last M query</entry>
            <entry>Ranges - typical "118.9" or "230.1" in Europe</entry>
            <entry></entry>
          </row>
          <row>
            <entry>N</entry>
            <entry>Minimum line voltage received since last N query</entry>
            <entry>Ranges - typical "118.9" or "226.2" in Europe</entry>
            <entry></entry>
          </row>
          <row>
            <entry>O</entry>
            <entry>Output voltage</entry>
            <entry>Ranges - typical "118.3" or "228.8" in Europe</entry>
            <entry></entry>
          </row>
          <row>
            <entry>P</entry>
            <entry>Power load %</entry>
            <entry>Ranges - typical "011.4" depends on what you have plugged in.</entry>
            <entry></entry>
          </row>
          <row>
            <entry>Q</entry>
            <entry>Status flags</entry>
            <entry>Bitmapped, see below</entry>
            <entry></entry>
          </row>
          <row>
            <entry>R</entry>
            <entry>Turn dumb Only on 3rd gen SmartUPS, SmartUPS v/s, BackUPS Pro</entry>
            <entry>"BYE"</entry>
            <entry></entry>
          </row>
          <row>
            <entry>S</entry>
            <entry>Soft shutdown after 'p' delay, return online when power returns Only works when UPS is on battery</entry>
            <entry>OK</entry>
            <entry></entry>
          </row>
          <row>
            <entry>U</entry>
            <entry>Simulate power failure</entry>
            <entry>!! when switching to battery, then $ when back on line</entry>
            <entry></entry>
          </row>
          <row>
            <entry>V</entry>
            <entry>Old firmware revision</entry>
            <entry>"GWD" or "IWI" The last character indicates the locale (Domestic, International).</entry>
            <entry></entry>
          </row>
          <row>
            <entry>W</entry>
            <entry>Self test (battery), results stored in "X"</entry>
            <entry>"OK"</entry>
            <entry></entry>
          </row>
          <row>
            <entry>X</entry>
            <entry>Results of last self test</entry>
            <entry>"OK" - good battery, "BT" - failed due to insufficient capacity, "NG" - failed due to overload, "NO" - no results available (no test performed in last 5 minutes)</entry>
            <entry></entry>
          </row>
          <row>
            <entry>Y</entry>
            <entry>Enter smart mode</entry>
            <entry>"SM"</entry>
            <entry></entry>
          </row>
          <row>
            <entry>Z&ndash;Z</entry>
            <entry>Shutdown immediately (no delay) - need &gt; 1.5s between first and second Z</entry>
            <entry>N/A</entry>
            <entry></entry>
          </row>
          <row>
            <entry>a</entry>
            <entry>Show protocol version.alert messages.valid commands (delimited by periods)</entry>
            <entry> "3.!$%+?=#|.^A^N^Z+-789&lt;@ABCDEFGKLMNOPQRSUVWXYZ'abcefgjklmnopqrsuvzy~^?" - Link-Level.alert-messages.commands</entry>
            <entry></entry>
          </row>
          <row>
            <entry>b</entry>
            <entry>Firmware revision</entry>
            <entry>"50.9.D" - 50 = SKU (variable length), 9 = firmware revision, D = country code (D=USA, I=International, A=Asia, J=Japan, M=Canada)</entry>
            <entry></entry>
          </row>
          <row>
            <entry>c</entry>
            <entry>UPS local id</entry>
            <entry>UPS_IDEN (you can program any 8 characters here)</entry>
            <entry></entry>
          </row>
          <row>
            <entry>e</entry>
            <entry>Return threshold</entry>
            <entry>% battery charge threshold for return (00=00%, 01=15%, 02=25%, 03=90%)</entry>
            <entry></entry>
          </row>
          <row>
            <entry>f</entry>
            <entry>Battery level %</entry>
            <entry>Ranges - typical "100.0" when fully charged as should normally be the case</entry>
            <entry></entry>
          </row>
          <row>
            <entry>g</entry>
            <entry>Nominal battery voltage (not actual voltage - see B)</entry>
            <entry>"012" or "024" or "048".</entry>
            <entry></entry>
          </row>
          <row>
            <entry>h</entry>
            <entry>Measure-UPS: ambient humidity (%)</entry>
            <entry>"nnn.n" - percentage</entry>
            <entry></entry>
          </row>
          <row>
            <entry>i</entry>
            <entry>Measure-UPS: dry contacts</entry>
            <entry>10 = contact 1, 20 = 2, 40 = 3, 80 = 4</entry>
            <entry></entry>
          </row>
          <row>
            <entry>j</entry>
            <entry>Estimated runtime at current load (minutes)</entry>
            <entry>"0112:" (note, it is terminated with a colon)</entry>
            <entry></entry>
          </row>
          <row>
            <entry>k</entry>
            <entry>Alarm delay</entry>
            <entry>0(zero) = 5 second delay after fail, T = 30 second delay, L = alarm at low battery only, N = no alarm</entry>
            <entry></entry>
          </row>
          <row>
            <entry>l</entry>
            <entry>Low transfer voltage</entry>
            <entry>Default "103" or "208" in Europe</entry>
            <entry></entry>
          </row>
          <row>
            <entry>m</entry>
            <entry>Manufacturing date</entry>
            <entry>Unique within groups of UPSes (production runs)</entry>
            <entry></entry>
          </row>
          <row>
            <entry>n</entry>
            <entry>Serial number</entry>
            <entry>Unique for each UPS</entry>
            <entry></entry>
          </row>
          <row>
            <entry>o</entry>
            <entry>Nominal Output Voltage</entry>
            <entry>The Nominal Output Voltage when running on batteries. Default "115" or "230" in Europe.</entry>
            <entry></entry>
          </row>
          <row>
            <entry>p</entry>
            <entry>Shutdown grace delay, seconds</entry>
            <entry>Default "020" (020/180/300/600)</entry>
            <entry></entry>
          </row>
          <row>
            <entry>q</entry>
            <entry>Low battery warning, minutes</entry>
            <entry>Default "02"</entry>
            <entry></entry>
          </row>
          <row>
            <entry>r</entry>
            <entry>Wakeup delay (time) - seconds</entry>
            <entry>Default "000" (000/060/180/300)</entry>
            <entry></entry>
          </row>
          <row>
            <entry>s</entry>
            <entry>Sensitivity</entry>
            <entry>"H" - highest, "M" - medium, "L" - lowest, "A" - autoadjust (Matrix only)</entry>
            <entry></entry>
          </row>
          <row>
            <entry>u</entry>
            <entry>Upper transfer voltage</entry>
            <entry>Default "132" or "253" in Europe</entry>
            <entry></entry>
          </row>
          <row>
            <entry>t</entry>
            <entry>Measure-UPS: ambient temperature (degrees C)</entry>
            <entry>"nn.nn"</entry>
            <entry></entry>
          </row>
          <row>
            <entry>x</entry>
            <entry>Last battery change</entry>
            <entry>Eight characters. Varies typically dd/mm/yy - 31/12/99</entry>
            <entry></entry>
          </row>
          <row>
            <entry>y</entry>
            <entry>Copyright notice</entry>
            <entry>"(C) APCC" - only works if firmware letter (from "V") is later than O</entry>
            <entry></entry>
          </row>
          <row>
            <entry>z</entry>
            <entry>Reset the EEPROM to factory settings (but not ident or batt replacement date) Not on SmartUPS v/s or BackUPS Pro</entry>
            <entry>"CLEAR"</entry>
            <entry></entry>
          </row>
          <row>
            <entry>+</entry>
            <entry>Capability cycle</entry>
            <entry>Cycle forward through possible values ("|" from UPS afterward to confirm change). Do not use this unless you know how to program your UPS EEPROM or you may damage your UPS.</entry>
            <entry></entry>
          </row>
          <row>
            <entry>-</entry>
            <entry>Capability cycle</entry>
            <entry>Cycle backward through possible values ("|" from UPS afterward to confirm change)Do not use this unless you know how to program your UPS EEPROM or you may damage your UPS.</entry>
            <entry></entry>
          </row>
          <row>
            <entry>@nnn</entry>
            <entry>Shutdown (after delay 'p') with delayed wakeup of nnn tenths of an hour (after 'r' time)</entry>
            <entry>Matrix/3rd gen UPS: "OK", others "*"</entry>
            <entry></entry>
          </row>
          <row>
            <entry>0x7f (DEL key)</entry>
            <entry>Abort shutdown - use to abort @, S, K&ndash;K</entry>
            <entry>"OK"</entry>
            <entry></entry>
          </row>
          <row>
            <entry>~</entry>
            <entry>Register #1</entry>
            <entry>See below</entry>
            <entry></entry>
          </row>
          <row>
            <entry>'</entry>
            <entry>Register #2</entry>
            <entry>See below</entry>
            <entry></entry>
          </row>
          <row>
            <entry>0</entry>
            <entry>Battery constant</entry>
            <entry>Set to A0 on SmartUPS 1000 with new battery</entry>
            <entry></entry>
          </row>
          <row>
            <entry>4</entry>
            <entry>???</entry>
            <entry>Prints 35 on SmartUPS 1000</entry>
            <entry></entry>
          </row>
          <row>
            <entry>5</entry>
            <entry>???</entry>
            <entry>Prints EF on SmartUPS 1000</entry>
            <entry></entry>
          </row>
          <row>
            <entry>6</entry>
            <entry>???</entry>
            <entry>Prints F9 on SmartUPS 1000</entry>
            <entry></entry>
          </row>
          <row>
            <entry>7</entry>
            <entry>Dip switch positions (if applicable)</entry>
            <entry>See below</entry>
            <entry></entry>
          </row>
          <row>
            <entry>8</entry>
            <entry>Register #3</entry>
            <entry>See below</entry>
            <entry></entry>
          </row>
          <row>
            <entry>9</entry>
            <entry>Line quality</entry>
            <entry>"FF" acceptable, "00" unacceptable</entry>
            <entry></entry>
          </row>
          <row>
            <entry>&gt;</entry>
            <entry>Number of external battery packs attached</entry>
            <entry>SmartCell models: "nnn" where nnn is how many external packs are connected Non-SmartCell units: whatever has been set with &gt;+ and &gt;- by the user</entry>
            <entry></entry>
          </row>
          <row>
            <entry>Matrix UPS (and possibly Symmetra) specific commands</entry>
            <entry></entry>
          </row>
          <row>
            <entry>^</entry>
            <entry>Run in bypass mode</entry>
            <entry>If online, "BYP" is received as bypass mode starts If already in bypass, "INV" is received and UPS goes online "ERR" received if UPS is unable to transfer</entry>
            <entry></entry>
          </row>
          <row>
            <entry>&lt;</entry>
            <entry>Number of bad battery packs</entry>
            <entry>"nnn" - count of bad packs connected to the UPS</entry>
            <entry></entry>
          </row>
          <row>
            <entry>/</entry>
            <entry>Load current</entry>
            <entry>"nn.nn" - true RMS load current drawn by UPS</entry>
            <entry></entry>
          </row>
          <row>
            <entry>\</entry>
            <entry>Apparent load power</entry>
            <entry>"nnn.nn" - output load as percentage of full rated load in VA.</entry>
            <entry></entry>
          </row>
          <row>
            <entry>^V</entry>
            <entry>Output voltage selection (editable)</entry>
            <entry>"A" - automatic according to input tap, "M" - 208 VAC, "I" - 240 VAC</entry>
            <entry></entry>
          </row>
          <row>
            <entry>^L</entry>
            <entry>Front panel language</entry>
            <entry>"E" - English, "F" - French, "G" - German, "S" - Spanish, "1" "2" "3" "4" - ?</entry>
            <entry></entry>
          </row>
          <row>
            <entry>w</entry>
            <entry>Run time conservation</entry>
            <entry>"NO" (disabled) or "02" "05" "08" - minutes of runtime to leave in battery (UPS shuts down "early")</entry>
            <entry></entry>
          </row>
        </tbody>
      </multitable>
    </section>
  </node>
  <node>
    <nodename>Dip switch info</nodename>
    <nodenext>Status bits</nodenext>
    <nodeprev>The Smart Protocol</nodeprev>
    <nodeup>APC smart protocol</nodeup>
    <section>
      <title>Dip switch info</title>
      <multitable>
        <columnfraction>33</columnfraction>
        <columnfraction>33</columnfraction>
        <columnfraction>33</columnfraction>
        <tbody>
          <row>
            <entry>Bit</entry>
            <entry>Switch</entry>
            <entry>Option when bit=1</entry>
          </row>
          <row>
            <entry>0</entry>
            <entry>4</entry>
            <entry>Low battery alarm changed from 2 to 5 mins. Autostartup disabled on SU370ci and 400</entry>
          </row>
          <row>
            <entry>1</entry>
            <entry>3</entry>
            <entry>Audible alarm delayed 30 seconds</entry>
          </row>
          <row>
            <entry>2</entry>
            <entry>2</entry>
            <entry>Output transfer set to 115 VAC (from 120 VAC) or to 240 VAC (from 230 VAC)</entry>
          </row>
          <row>
            <entry>3</entry>
            <entry>1</entry>
            <entry>UPS desensitized - input voltage range expanded</entry>
          </row>
          <row>
            <entry>4-7</entry>
            <entry>-</entry>
            <entry>Unused at this time</entry>
          </row>
        </tbody>
      </multitable>
    </section>
  </node>
  <node>
    <nodename>Status bits</nodename>
    <nodenext>Alert messages</nodenext>
    <nodeprev>Dip switch info</nodeprev>
    <nodeup>APC smart protocol</nodeup>
    <section>
      <title>Status bits</title>
      <para>This is probably the most important register of the UPS, which indicates the overall UPS status. Some common things you'll see:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>08 = On line, battery OK</para>
        </item>
        <item>
          <para>10 = On battery, battery OK</para>
        </item>
        <item>
          <para>50 = On battery, battery low</para>
        </item>
        <item>
          <para>SM = Status bit is still not available (retry reading)</para>
        </item>
      </itemize>
      <multitable>
        <columnfraction>33</columnfraction>
        <columnfraction>33</columnfraction>
        <columnfraction>33</columnfraction>
        <tbody>
          <row>
            <entry>Bit</entry>
            <entry>Hex Bit</entry>
            <entry>Meaning</entry>
          </row>
          <row>
            <entry>0</entry>
            <entry>0x01</entry>
            <entry>1 = Runtime calibration occurring Not reported by Smart UPS v/s and BackUPS Pro</entry>
          </row>
          <row>
            <entry>1</entry>
            <entry>0x02</entry>
            <entry>1 = SmartTrim Not reported by 1st and 2nd generation SmartUPS models</entry>
          </row>
          <row>
            <entry>2</entry>
            <entry>0x04</entry>
            <entry>1 = SmartBoost</entry>
          </row>
          <row>
            <entry>3</entry>
            <entry>0x08</entry>
            <entry>1 = On line (this is the normal condition)</entry>
          </row>
          <row>
            <entry>4</entry>
            <entry>0x10</entry>
            <entry>1 = On battery</entry>
          </row>
          <row>
            <entry>5</entry>
            <entry>0x20</entry>
            <entry>1 = Overloaded output</entry>
          </row>
          <row>
            <entry>6</entry>
            <entry>0x40</entry>
            <entry>1 = Battery low</entry>
          </row>
          <row>
            <entry>7</entry>
            <entry>0x80</entry>
            <entry>1 = Replace battery</entry>
          </row>
        </tbody>
      </multitable>
    </section>
  </node>
  <node>
    <nodename>Alert messages</nodename>
    <nodenext>Register 1</nodenext>
    <nodeprev>Status bits</nodeprev>
    <nodeup>APC smart protocol</nodeup>
    <section>
      <title>Alert messages</title>
      <para>These single character messages are sent by the UPS any time there is an Alert condition. All other responses indicated above are sent by the UPS only in response to a query or action command.</para>
      <multitable>
        <columnfraction>50</columnfraction>
        <columnfraction>50</columnfraction>
        <tbody>
          <row>
            <entry>Character</entry>
            <entry>Description</entry>
          </row>
          <row>
            <entry>!</entry>
            <entry>Line Fail - sent when the UPS goes on-battery, repeated every 30 seconds until low battery condition reached. Sometimes occurs more than once in the first 30 seconds.</entry>
          </row>
          <row>
            <entry>$</entry>
            <entry>Return from line fail - UPS back on line power, only sent if a ! has been sent.</entry>
          </row>
          <row>
            <entry>%</entry>
            <entry>Low battery - Sent to indicate low battery, but not on SmartUPS v/s or BackUPS Pro models</entry>
          </row>
          <row>
            <entry>+</entry>
            <entry>Return from low battery - Sent when the battery has been recharged to some level only if a % has been sent previously</entry>
          </row>
          <row>
            <entry>?</entry>
            <entry>Abnormal condition - sent for conditions such as "shutdown due to overload" or "shutdown due to low battery capacity". Also occurs within 10 minutes of turnon.</entry>
          </row>
          <row>
            <entry>=</entry>
            <entry>Return from abnormal condition - Sent when the UPS returns from an abnormal condition where ? was sent, but not a turn-on. Not implemented on SmartUPS v/s or BackUPS Pro models.</entry>
          </row>
          <row>
            <entry>*</entry>
            <entry>About to turn off - Sent when the UPS is about to switch off the load. No commands are processed after this character is sent. Not implemented on SmartUPS v/s, BackUPS Pro, or 3rd generation SmartUPS models.</entry>
          </row>
          <row>
            <entry>#</entry>
            <entry>Replace battery - Sent when the UPS detects that the battery needs to be replaced. Sent every 5 hours until a new battery test is run or the UPS is shut off. Not implemented on SmartUPS v/s or BackUPS Pro models.</entry>
          </row>
          <row>
            <entry>&amp;</entry>
            <entry>Check alarm register for fault (Measure-UPS) - sent to signal that temp or humidity out of set limits. Also sent when one of the contact closures changes states. Sent every 2 minutes, stops when the alarm conditions are reset. Only sent for alarms enabled with I. Cause of alarm may be determined with J. Not on SmartUPS v/s or BackUPS Pro.</entry>
          </row>
          <row>
            <entry>|</entry>
            <entry>Variable change in EEPROM - Sent whenever any EEPROM variable is changed. Only supported on Matrix UPS and 3rd generation SmartUPS models.</entry>
          </row>
        </tbody>
      </multitable>
    </section>
  </node>
  <node>
    <nodename>Register 1</nodename>
    <nodenext>Register 2</nodenext>
    <nodeprev>Alert messages</nodeprev>
    <nodeup>APC smart protocol</nodeup>
    <section>
      <title>Register 1</title>
      <para>All bits are valid on the Matrix UPS. SmartUPS models only support bits 6 and 7. Other models do not respond.</para>
      <multitable>
        <columnfraction>33</columnfraction>
        <columnfraction>33</columnfraction>
        <columnfraction>33</columnfraction>
        <tbody>
          <row>
            <entry>Bit</entry>
            <entry>Hex Bit</entry>
            <entry>Meaning</entry>
          </row>
          <row>
            <entry>0</entry>
            <entry>0x01</entry>
            <entry>In wakeup mode (typically lasts &lt; 2s)</entry>
          </row>
          <row>
            <entry>1</entry>
            <entry>0x02</entry>
            <entry>In bypass mode due to internal fault - see register 2 or 3</entry>
          </row>
          <row>
            <entry>2</entry>
            <entry>0x04</entry>
            <entry>Going to bypass mode due to command</entry>
          </row>
          <row>
            <entry>3</entry>
            <entry>0x08</entry>
            <entry>In bypass mode due to command</entry>
          </row>
          <row>
            <entry>4</entry>
            <entry>0x10</entry>
            <entry>Returning from bypass mode</entry>
          </row>
          <row>
            <entry>5</entry>
            <entry>0x20</entry>
            <entry>In bypass mode due to manual bypass control</entry>
          </row>
          <row>
            <entry>6</entry>
            <entry>0x40</entry>
            <entry>Ready to power load on user command</entry>
          </row>
          <row>
            <entry>7</entry>
            <entry>0x80</entry>
            <entry>Ready to power load on user command or return of line power</entry>
          </row>
        </tbody>
      </multitable>
    </section>
  </node>
  <node>
    <nodename>Register 2</nodename>
    <nodenext>Register 3</nodenext>
    <nodeprev>Register 1</nodeprev>
    <nodeup>APC smart protocol</nodeup>
    <section>
      <title>Register 2</title>
      <para>Matrix UPS models report bits 0-5. SmartUPS models only support bits 4 and 6. SmartUPS v/s and BackUPS Pro report bits 4, 6, 7. Unused bits are set to 0. Other models do not respond.</para>
      <multitable>
        <columnfraction>50</columnfraction>
        <columnfraction>50</columnfraction>
        <tbody>
          <row>
            <entry>Bit</entry>
            <entry>Meaning</entry>
          </row>
          <row>
            <entry>0</entry>
            <entry>Fan failure in electronics, UPS in bypass</entry>
          </row>
          <row>
            <entry>1</entry>
            <entry>Fan failure in isolation unit</entry>
          </row>
          <row>
            <entry>2</entry>
            <entry>Bypass supply failure</entry>
          </row>
          <row>
            <entry>3</entry>
            <entry>Output voltage select failure, UPS in bypass</entry>
          </row>
          <row>
            <entry>4</entry>
            <entry>DC imbalance, UPS in bypass</entry>
          </row>
          <row>
            <entry>5</entry>
            <entry>Command sent to stop bypass with no battery connected - UPS still in bypass</entry>
          </row>
          <row>
            <entry>6</entry>
            <entry>Relay fault in SmartTrim or SmartBoost</entry>
          </row>
          <row>
            <entry>7</entry>
            <entry>Bad output voltage</entry>
          </row>
        </tbody>
      </multitable>
    </section>
  </node>
  <node>
    <nodename>Register 3</nodename>
    <nodenext>Interpretation of the Old Firmware Revision</nodenext>
    <nodeprev>Register 2</nodeprev>
    <nodeup>APC smart protocol</nodeup>
    <section>
      <title>Register 3</title>
      <para>All bits are valid on the Matrix UPS and 3rd generation SmartUPS models. SmartUPS v/s and BackUPS Pro models report bits 0-5. All others report 0-4. State change of bits 1,2,5,6,7 are reported asynchronously with ? and = messages.</para>
      <multitable>
        <columnfraction>50</columnfraction>
        <columnfraction>50</columnfraction>
        <tbody>
          <row>
            <entry>Bit</entry>
            <entry>Meaning</entry>
          </row>
          <row>
            <entry>0</entry>
            <entry>Output unpowered due to shutdown by low battery</entry>
          </row>
          <row>
            <entry>1</entry>
            <entry>Unable to transfer to battery due to overload</entry>
          </row>
          <row>
            <entry>2</entry>
            <entry>Main relay malfunction - UPS turned off</entry>
          </row>
          <row>
            <entry>3</entry>
            <entry>In sleep mode from @ (maybe others)</entry>
          </row>
          <row>
            <entry>4</entry>
            <entry>In shutdown mode from S</entry>
          </row>
          <row>
            <entry>5</entry>
            <entry>Battery charger failure</entry>
          </row>
          <row>
            <entry>6</entry>
            <entry>Bypass relay malfunction</entry>
          </row>
          <row>
            <entry>7</entry>
            <entry>Normal operating temperature exceeded</entry>
          </row>
        </tbody>
      </multitable>
    </section>
  </node>
  <node>
    <nodename>Interpretation of the Old Firmware Revision</nodename>
    <nodenext>Interpretation of the New Firmware Revision</nodenext>
    <nodeprev>Register 3</nodeprev>
    <nodeup>APC smart protocol</nodeup>
    <section>
      <title>Interpretation of the Old Firmware Revision</title>
      <para>The Old Firmware Revision is obtained with the "V" command, which gives a typical response such as "GWD" or "IWI", and can be interpreted as follows:</para>
      <example xml:space="preserve">
Old Firmware revision and model ID String for SmartUPS &amp; MatrixUPS

This is a three character string XYZ

   where X == Smart-UPS or Matrix-UPS ID Code.
     range 0-9 and A-P
       1 == unknown
       0 == Matrix 3000
       5 == Matrix 5000
     the rest are Smart-UPS and Smart-UPS-XL
       2 == 250       3 == 400       4 == 400
       6 == 600       7 == 900       8 == 1250
       9 == 2000      A == 1400      B == 1000
       C == 650       D == 420       E == 280
       F == 450       G == 700       H == 700XL
       I == 1000      J == 1000XL    K == 1400
       L == 1400XL    M == 2200      N == 2200XL
       O == 3000      P == 5000

   where Y == Possible Level of Smart Features, unknown???
       G == Stand Alone
       T == Stand Alone
               V == ???
       W == Rack Mount

   where Z == National Model Use Only Codes
       D == Domestic        115 Volts
       I == International   230 Volts
       A == Asia ??         100 Volts
       J == Japan ??        100 Volts</example>
    </section>
  </node>
  <node>
    <nodename>Interpretation of the New Firmware Revision</nodename>
    <nodenext>EEPROM Values</nodenext>
    <nodeprev>Interpretation of the Old Firmware Revision</nodeprev>
    <nodeup>APC smart protocol</nodeup>
    <section>
      <title>Interpretation of the New Firmware Revision</title>
      <example xml:space="preserve">
New Firmware revison and model ID String in NN.M.L is the format

    where NN == UPS ID Code.
        12 == Back-UPS Pro 650
        13 == Back-UPS Pro 1000
        52 == Smart-UPS 700
        60 == SmartUPS 1000
        72 == Smart-UPS 1400

        where NN now Nn has possible meanings.
            N  == Class of UPS
            1n == Back-UPS Pro
            5n == Smart-UPS
            7n == Smart-UPS NET

             n == Level of intelligence
            N1 == Simple Signal, if detectable WAG(*)
            N2 == Full Set of Smart Signals
            N3 == Micro Subset of Smart Signals

    where M == Possible Level of Smart Features, unknown???
        1 == Stand Alone
        8 == Rack Mount
        9 == Rack Mount

    where L == National Model Use Only Codes
        D == Domestic        115 Volts
        I == International   230 Volts
        A == Asia ??         100 Volts
        J == Japan ??        100 Volts
        M == North America   208 Volts (Servers)</example>
    </section>
  </node>
  <node>
    <nodename>EEPROM Values</nodename>
    <nodenext>Programming the UPS EEPROM</nodenext>
    <nodeprev>Interpretation of the New Firmware Revision</nodeprev>
    <nodeup>APC smart protocol</nodeup>
    <section>
      <title>EEPROM Values</title>
      <para>Upon sending a ^Z, your UPS will probably spit back approximately 254 characters something like the following (truncated here for the example):</para>
      <para>#uD43132135138129uM43229234239224uA43110112114108 ....</para>
      <para>It looks bizarre and ugly, but is easily parsed. The # is some kind of marker/ident character. Skip it. The rest fits this form:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>Command character - use this to select the value</para>
        </item>
        <item>
          <para>Locale - use 'b' to find out what yours is (the last character), '4' applies to all</para>
        </item>
        <item>
          <para>Number of choices - '4' means there are 4 possibilities coming up</para>
        </item>
        <item>
          <para>Choice length - '3' means they are all 3 chars long</para>
        </item>
      </itemize>
      <para>Matrix-UPS models have ## between each grouping for some reason.</para>
      <para>Here is an example broken out to be more readable:</para>
      <example xml:space="preserve">
 CMD DFO RSP FSZ FVL
 u   D   4   3   127 130 133 136
 u   M   4   3   229 234 239 224
 u   A   4   3   108 110 112 114
 u   I   4   3   253 257 261 265
 l   D   4   3   106 103 100 097
 l   M   4   3   177 172 168 182
 l   A   4   3   092 090 088 086
 l   I   4   3   208 204 200 196
 e   4   4   2   00   15  50  90
 o   D   1   3   115
 o   J   1   3   100
 o   I   1   3   230 240 220 225
 o   M   1   3   208
 s   4   4   1     H   M   L   L
 q   4   4   2    02  05  07  10
 p   4   4   3   020 180 300 600
 k   4   4   1     0   T   L   N
 r   4   4   3   000 060 180 300
 E   4   4   3   336 168  ON OFF

 CMD == UPSlink Command.
       u = upper transfer voltage
       l = lower transfer voltage
       e = return threshold
       o = output voltage
       s = sensitivity
       p = shutdown grace delay
       q = low battery warning
       k = alarm delay
       r = wakeup delay
       E = self test interval

 DFO == (4)-all-countries (D)omestic (I)nternational (A)sia (J)apan
        (M) North America - servers.
 RSP == Total number possible answers returned by a given CMD.
 FSZ == Max. number of field positions to be filled.
 FVL == Values that are returned and legal.
</example>
    </section>
  </node>
  <node>
    <nodename>Programming the UPS EEPROM</nodename>
    <nodenext>Acknowledgements</nodenext>
    <nodeprev>EEPROM Values</nodeprev>
    <nodeup>APC smart protocol</nodeup>
    <section>
      <title>Programming the UPS EEPROM</title>
      <para>There are at this time a maximum of 12 different values that can be programmed into the UPS EEPROM. They are:</para>
      <multitable>
        <columnfraction>33</columnfraction>
        <columnfraction>33</columnfraction>
        <columnfraction>33</columnfraction>
        <tbody>
          <row>
            <entry>Item</entry>
            <entry>Command</entry>
            <entry>Meaning</entry>
          </row>
          <row>
            <entry>1.</entry>
            <entry>c</entry>
            <entry>The UPS Id or name</entry>
          </row>
          <row>
            <entry>2.</entry>
            <entry>x</entry>
            <entry>The last date the batteries were replaced</entry>
          </row>
          <row>
            <entry>3.</entry>
            <entry>u</entry>
            <entry>The Upper Transfer Voltage</entry>
          </row>
          <row>
            <entry>4.</entry>
            <entry>l</entry>
            <entry>The Lower Transfer Voltage</entry>
          </row>
          <row>
            <entry>5.</entry>
            <entry>e</entry>
            <entry>The Return Battery Charge Percentage</entry>
          </row>
          <row>
            <entry>6.</entry>
            <entry>o</entry>
            <entry>The Output Voltage when on Batteries</entry>
          </row>
          <row>
            <entry>7.</entry>
            <entry>s</entry>
            <entry>The Sensitivity to Line Quality</entry>
          </row>
          <row>
            <entry>8.</entry>
            <entry>p</entry>
            <entry>The Shutdown Grace Delay</entry>
          </row>
          <row>
            <entry>9.</entry>
            <entry>q</entry>
            <entry>The Low Battery Warning Delay</entry>
          </row>
          <row>
            <entry>10.</entry>
            <entry>k</entry>
            <entry>The Alarm Delay</entry>
          </row>
          <row>
            <entry>11.</entry>
            <entry>r</entry>
            <entry>The Wakeup Delay</entry>
          </row>
          <row>
            <entry>12.</entry>
            <entry>E</entry>
            <entry>The Automatic Self Test Interval</entry>
          </row>
        </tbody>
      </multitable>
      <para>The first two cases (Ident and Batt date) are somewhat special in that you tell the UPS you want to change the value, then you supply 8 characters that are saved in the EEPROM. The last ten item are programmed by telling the UPS that you want it to cycle to the next permitted value.</para>
      <para>In each case, you indicate to the UPS that you want to change the EEPROM by first sending the appropriate query command (e.g. "c" for the UPS ID or "u" for the Upper Transfer voltage. This command is then immediately followed by the cycle EEPROM command or "-". In the case of the UPS Id or the battery date, you follow the cycle command by the eight characters that you want to put in the EEPROM. In the case of the other ten items, there is nothing more to enter.</para>
      <para>The UPS will respond by "OK" and approximately 5 seconds later by a vertical bar (|) to indicate that the EEPROM was changed.</para>
    </section>
  </node>
  <node>
    <nodename>Acknowledgements</nodename>
    <nodeprev>Programming the UPS EEPROM</nodeprev>
    <nodeup>APC smart protocol</nodeup>
    <section>
      <title>Acknowledgements</title>
      <para>The apcupsd has a rather long and tormented history. Many thanks to the guys that, with time, contributed to the general public knowledge.</para>
      <para>Pavel Korensky &lt;pavelk at dator3.anet.cz&gt;, Andre M. Hedrick &lt;hedrick at suse.de&gt;, Christopher J. Reimer &lt;reimer at doe.carleton.ca&gt;, Kevin D. Smolkowski &lt;kevins at trigger.oslc.org&gt;, Werner Panocha &lt;wpanocha at t-online.de&gt;, Steven Freed, <uref><urefurl>http://www.exploits.org/~rkroll/contact.html</urefurl><urefdesc>Russell Kroll</urefdesc></uref>.</para>
      <para>additions by: <uref><urefurl>http://www.apcupsd.com</urefurl><urefdesc>Kern Sibbald &lt;apcupsd-users at lists.sourceforge.net&gt;</urefdesc></uref></para>
    </section>
  </node>
  <node>
    <nodename>Apcupsd -- RPM Packaging FAQ</nodename>
    <nodeprev>APC smart protocol</nodeprev>
    <nodeup>Technical Reference</nodeup>
    <chapter>
      <title>Apcupsd &ndash; RPM Packaging FAQ</title>
      <menu>
        <menuentry>
          <menunode>Answers</menunode>
          <menutitle>Answers</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Answers</nodename>
    <nodeup>Apcupsd -- RPM Packaging FAQ</nodeup>
    <section>
      <title>Answers</title>
      <table>
        <tableitem>
          <tableterm><strong>How do I build Apcupsd for platform xxx?</strong></tableterm>
          <item>
            <para>The apcupsd spec file contains defines to build for several platforms: RedHat 7.x (rh7), RedHat 8.0 (rh8), RedHat 9 (rh9), Fedora Core 1 (fc1), and Whitebox Enterprise Linux 3.0 (wb3).  The package build is controlled by a define set at the beginning of the file. These defines basically just control the dependancy information that gets coded into the finished rpm package.  So while you could technically build a package without defining a platform, or with an incorrect platform, and have it install and run it would not contain correct dependancy information for the rpm database.  The platform define may be edited in the spec file directly (by default all defines are set to 0 or "not set").  For example, to build the RedHat 7.x package find the line in the spec file which reads</para>
            <example xml:space="preserve">    %define rh7 0</example>
            <para>and edit it to read</para>
            <example xml:space="preserve">    %define rh7 1</example>
            <para>Alternately you may pass the define on the command line when calling rpmbuild:</para>
            <example xml:space="preserve">
    rpmbuild -ba --define "build_rh7 1" apcupsd.spec
    rpmbuild --rebuild --define build_rh7 1" apcupsd-x.x.x-x.src.rpm</example>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>How do I control whether usb support gets built?</strong></tableterm>
          <item>
            <para>By default standard serial port support will be built and the apcupsd-std package will be produced. To get the usb package and support either set the</para>
            <example xml:space="preserve">    %define usb 0</example>
            <para role="continues">to</para>
            <example xml:space="preserve">    %define usb 1</example>
            <para role="continues">in the spec file directly or pass it to rpmbuild on the command line:</para>
            <example xml:space="preserve">    rpmbuild -ba --define "build_rh7 1" --define "build_usb 1" apcupsd.spec</example>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>other defines are used?</strong></tableterm>
          <item>
            <para>The only other define is for the initdir for the daemon control script. On RedHat systems this is set to /etc/rc.d/init.d/.  You would only need to edit this if packaging for a platform with uses a different directory.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>I'm getting errors about not having permission when</strong></tableterm>
          <item>
            <para>I try to build the packages.  Do I need to be root? No, you do not need to be root and, in fact, it is better practice to build rpm packages as a non-root user.  Apcupds packages are designed to be built by a regular user but you must make a few changes on your system to do this.  If you are building on your own system then the simplest method is to add write permissions for all to the build directory (/usr/src/redhat/).  To accomplish this execute the following command as root:</para>
            <example xml:space="preserve">    chmod -R 777 /usr/src/redhat</example>
            <para role="continues">If you are working on a shared system where you can not use the method above then you need to recreate the /usr/src/redhat directory tree with all of it's subdirectories inside your home directory. Then create a file named</para>
            <example xml:space="preserve">    .rpmmacros</example>
            <para role="continues">in your home directory (or edit the file if it already exists) and add the following line:</para>
            <example xml:space="preserve">    %_topdir /home/myuser/redhat</example>
          </item>
        </tableitem>
      </table>
    </section>
  </node>
  <node>
    <nodename>Credits &lt;1&gt;</nodename>
    <nodeprev>Technical Reference</nodeprev>
    <nodeup>Top</nodeup>
    <appendix>
      <title>Credits</title>
      <image width="" height="" name="thanks" extension="png"><alttext></alttext></image>
      <para>The success of apcupsd is due to the many people that helped in development, testing and in many other ways.</para>
      <para>Thank all the developers that worked hard to make APCUPSDone of the best piece of software for UPSmanagement.</para>
      <menu>
        <menuentry>
          <menunode>Contributors</menunode>
          <menutitle>Contributors</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Disclaimer; NO WARRANTY</menunode>
          <menutitle>Disclaimer; NO WARRANTY</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </appendix>
  </node>
  <node>
    <nodename>Contributors</nodename>
    <nodenext>Disclaimer; NO WARRANTY</nodenext>
    <nodeup>Credits &lt;1&gt;</nodeup>
    <section>
      <title>Contributors</title>
      <table>
        <tableitem>
          <tableterm>Current Code Maintainer and Project Manager:</tableterm>
          <item>
            <para>Kern Sibbald (kern at sibbald dot com)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>RPM Packager:</tableterm>
          <item>
            <para>D. Scott Barninger (barninger at fairfieldcomputers dot com)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>Super USB bug fixer:</tableterm>
          <item>
            <para>Adam Kropelin (akropel1 at rochester dot rr dot com)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>CGI and HTML fixer:</tableterm>
          <item>
            <para>William King (wrking at dadaboom dot com)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>Project Starter and Former Code Maintainer:</tableterm>
          <item>
            <para>Andre Hedrick (andre at linux-ide.org)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>Former Code Maintainer and Project Manager:</tableterm>
          <item>
            <para>Riccardo Facchetti (riccardo at master.oasi.gpa.it)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>Serial Communications:</tableterm>
          <item>
            <para>Andre Hedrick (andre at linux-ide.org)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>2.0 User's Manual:</tableterm>
          <item>
            <para>Eric S. Raymond (esr at thyrsus.com)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>Alpha Port:</tableterm>
          <item>
            <para>Kern Sibbald (kern at sibbald dot com)</para>
            <para>J. Rochate (jrochate at ualg.pt) testing and machine loan</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>Caldera:</tableterm>
          <item>
            <para>John Pinner (john at clocksoft.com)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>HP-UX Port</tableterm>
          <item>
            <para>Carl Erhorn (Carl_Erhorn at hyperion.com)</para>
            <para>Robert K Nelson (rnelson at airflowsciences.com)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>SOLARIS Port:</tableterm>
          <item>
            <para>Carl Erhorn (Carl_Erhorn at hyperion.com)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>OpenBSD Port:</tableterm>
          <item>
            <para>Devin Reade (gdr at gno.org)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>NetBSD Port:</tableterm>
          <item>
            <para>Neil Darlow (neil at darlow.co.uk)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>Win32 Port:</tableterm>
          <item>
            <para>Kern Sibbald (kern at sibbald dot com)</para>
            <para>Paul Z. Stagner (paul.stagner at charterco.com) testing</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>WEB Interfaces:</tableterm>
          <item>
            <para>Kern Sibbald (kern at sibbald dot com)</para>
            <para>Joseph Acosta (joeja at mindspring.com)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>Apcupsd Support and Knowledge Base:</tableterm>
          <item>
            <para>Brian Schau (Brian.Schau at compaq.com)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>Hard Core Coders:</tableterm>
          <item>
            <para>Riccardo Facchetti (riccardo at master.oasi.gpa.it)</para>
            <para>Kern Sibbald (kern at sibbald dot com)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>Part Time Coders:</tableterm>
          <item>
            <para>Jonathan H N Chin (jc254 at newton.cam.ac.uk)</para>
            <para>Andre Hedrick (andre at linux-ide.org)</para>
            <para>Brian Schau (Brian.Schau at compaq.com)</para>
            <para>Carl Erhorn (Carl_Erhorn at hyperion.com)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>Distribution Maintainers:</tableterm>
          <item>
            <para>Alpha: Kern Sibbald (kern at sibbald dot com) temp</para>
            <para>Debian: Leon Breedt (ljb at debian.org)</para>
            <para>FreeBSD/BSDi: Jeff Palmer (scorpio at drkshdw.org)</para>
            <para>NetBSD: Neil Darlow (neil at darlow.co.uk)</para>
            <para>HP-UX: Carl Erhorn (Carl_Erhorn at hyperion.com), Robert K Nelson (rnelson at airflowsciences.com)</para>
            <para>OpenBSD: Devin Reade (gdr at gno.org)</para>
            <para>RedHat: Kern Sibbald (kern at sibbald dot com)</para>
            <para>Slackware: Devin Reade (gdr at gno.org)</para>
            <para>Sparc Solaris: Carl Erhorn (Carl_Erhorn at hyperion.com)</para>
            <para>SUSE: Riccardo Facchetti (riccardo at master.oasi.gpa.it)</para>
            <para>Win32: Kern Sibbald (kern at sibbald dot com)</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>Project Discussions:</tableterm>
            <para><uref><urefurl>&lt;item&gt; wb_mailto:apcupsd-users@lists.sourceforge.net</urefurl><urefdesc>APCUPSD Mailing List</urefdesc></uref></para>
          </item>
        </tableitem>
      </table>
      <para>Thanks to American Power Conversion (APC) who helped in giving technical information on their UPSes.</para>
      <para>A special thanks to APC who gave me (Riccardo) a Smart UPS1400 INET when my old Back UPS v/s 650's battery died.  Thank you guys, your help has been invaluable.</para>
      <para>Thanks to all the users that send bug reports and suggestions:we need your help.</para>
      <para>Thanks to every one I forgot here. If you feel Ihave forgot your name, please don't hesitate to tell me.</para>
      <para>Miquel van Smoorenburg, The Doctor What, Pavel Korensky, and Russell Kroll &lt;rkroll at exploits.org&gt; for the CGI programs. Jonathan Benson &lt;jbenson at technologist.com&gt; for adapting the upsstatus.cgi program to work with apcupsd</para>
      <para>The gd 1.2 Image Library used in our CGI programs is copyright 1994, 1995, Quest Protein Database Center, Cold Spring Harbor Labs. Permission granted to copy and distribute this work provided that this notice remains intact. Credit for the library must be given to the Quest Protein Database Center, Cold Spring Harbor Labs, in all derived works. This does not affect your ownership of the derived work itself, and the intent is to assure proper credit for Quest, not to interfere with your use of gd.</para>
      <para>gd 1.2 was written by Thomas Boutell and is currently distributed by boutell.com, Inc.</para>
      <para>Parts of the VNC project by ATT (cool code) were used as templates for our Win32 code, see: <uref><urefurl>http://www.uk.research.att.com/vnc</urefurl><urefdesc>http://www.uk.research.att.com/vnc</urefdesc></uref></para>
    </section>
  </node>
  <node>
    <nodename>Disclaimer; NO WARRANTY</nodename>
    <nodenext>Kernel Config</nodenext>
    <nodeprev>Contributors</nodeprev>
    <nodeup>Credits &lt;1&gt;</nodeup>
    <section>
      <title>Disclaimer: NO WARRANTY</title>
      <para><indexterm index="cp">Disclaimer</indexterm> BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</para>
      <para>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</para>
    </section>
  </node>
  <node>
    <nodename>Kernel Config</nodename>
    <nodenext>Index</nodenext>
    <nodeprev>Disclaimer; NO WARRANTY</nodeprev>
    <nodeup>Top</nodeup>
    <appendix>
      <title>Kernel Config</title>
      <para>A typical USB section of a .config file might be:</para>
      <para><indexterm index="cp">Kernel config</indexterm><indexterm index="cp">config, Kernel</indexterm></para>
      <example xml:space="preserve">
#
# USB support
#
CONFIG_USB=m
CONFIG_USB_DEBUG=y

#
# Miscellaneous USB options
#
CONFIG_USB_DEVICEFS=y
# CONFIG_USB_BANDWIDTH is not set
# CONFIG_USB_DYNAMIC_MINORS is not set

#
# USB Host Controller Drivers
#
# CONFIG_USB_EHCI_HCD is not set
# CONFIG_USB_OHCI_HCD is not set
CONFIG_USB_UHCI_HCD=m

#
# USB Device Class drivers
#
# CONFIG_USB_BLUETOOTH_TTY is not set
# CONFIG_USB_ACM is not set
# CONFIG_USB_PRINTER is not set
CONFIG_USB_STORAGE=m
# CONFIG_USB_STORAGE_DEBUG is not set
# CONFIG_USB_STORAGE_DATAFAB is not set
# CONFIG_USB_STORAGE_FREECOM is not set
# CONFIG_USB_STORAGE_ISD200 is not set
# CONFIG_USB_STORAGE_DPCM is not set
# CONFIG_USB_STORAGE_HP8200e is not set
# CONFIG_USB_STORAGE_SDDR09 is not set
# CONFIG_USB_STORAGE_SDDR55 is not set
# CONFIG_USB_STORAGE_JUMPSHOT is not set

#
# USB Human Interface Devices (HID)
#
CONFIG_USB_HID=m
CONFIG_USB_HIDINPUT=y
# CONFIG_HID_FF is not set
CONFIG_USB_HIDDEV=y

#
# USB HID Boot Protocol drivers
#
# CONFIG_USB_KBD is not set
# CONFIG_USB_MOUSE is not set
# CONFIG_USB_AIPTEK is not set
# CONFIG_USB_WACOM is not set
# CONFIG_USB_KBTAB is not set
# CONFIG_USB_POWERMATE is not set
# CONFIG_USB_MTOUCH is not set
# CONFIG_USB_XPAD is not set
# CONFIG_USB_ATI_REMOTE is not set

#
# USB Imaging devices
#
# CONFIG_USB_MDC800 is not set
# CONFIG_USB_MICROTEK is not set
# CONFIG_USB_HPUSBSCSI is not set

#
# USB Multimedia devices
#
# CONFIG_USB_DABUSB is not set

#
# Video4Linux support is needed for USB Multimedia device support
#

#
# USB Network adaptors
#
# CONFIG_USB_CATC is not set
# CONFIG_USB_KAWETH is not set
# CONFIG_USB_PEGASUS is not set
# CONFIG_USB_RTL8150 is not set
# CONFIG_USB_USBNET is not set

#
# USB port drivers
#
# CONFIG_USB_USS720 is not set

#
# USB Serial Converter support
#
# CONFIG_USB_SERIAL is not set

#
# USB Miscellaneous drivers
#
# CONFIG_USB_EMI62 is not set
# CONFIG_USB_EMI26 is not set
# CONFIG_USB_TIGL is not set
# CONFIG_USB_AUERSWALD is not set
# CONFIG_USB_RIO500 is not set
# CONFIG_USB_LEGOTOWER is not set
# CONFIG_USB_LCD is not set
# CONFIG_USB_LED is not set
# CONFIG_USB_CYTHERM is not set
# CONFIG_USB_TEST is not set

#
# USB Gadget Support
#
# CONFIG_USB_GADGET is not set</example>
      <para>Interpretation of /proc/usb info on 2.4 kernels:</para>
      <example xml:space="preserve">
/proc/bus/usb filesystem output
===============================
(version 2002.03.18)


The /proc filesystem for USB devices provides /proc/bus/usb/drivers
and /proc/bus/usb/devices, as well as /proc/bus/usb/BBB/DDD files.


**NOTE**: If /proc/bus/usb appears empty, and a host controller
          driver has been linked, then you need to mount the
          filesystem.  Issue the command (as root):

      mount -t usbfs none /proc/bus/usb

          An alternative and more permanent method would be to add

      none  /proc/bus/usb  usbfs  defaults  0  0

          to /etc/fstab.  This will mount usbfs at each reboot.
          You can then issue `cat /proc/bus/usb/devices` to extract
          USB device information, and user mode drivers can use usbfs
          to interact with USB devices.

          There are a number of mount options supported by usbfs.
          Consult the source code (linux/drivers/usb/inode.c) for
          information about those options.

**NOTE**: The filesystem has been renamed from "usbdevfs" to
          "usbfs", to reduce confusion with "devfs".  You may
          still see references to the older "usbdevfs" name.

For more information on mounting the usbfs file system, see the
"USB Device Filesystem" section of the USB Guide. The latest copy
of the USB Guide can be found at http://www.linux-usb.org/


THE /proc/bus/usb/BBB/DDD FILES:
--------------------------------
Each connected USB device has one file.  The BBB indicates the bus
number.  The DDD indicates the device address on that bus.  Both
of these numbers are assigned sequentially, and can be reused, so
you can't rely on them for stable access to devices.  For example,
it's relatively common for devices to re-enumerate while they are
still connected (perhaps someone jostled their power supply, hub,
or USB cable), so a device might be 002/027 when you first connect
it and 002/048 sometime later.

These files can be read as binary data.  The binary data consists
of first the device descriptor, then the descriptors for each
configuration of the device.  That information is also shown in
text form by the /proc/bus/usb/devices file, described later.

These files may also be used to write user-level drivers for the USB
devices.  You would open the /proc/bus/usb/BBB/DDD file read/write,
read its descriptors to make sure it's the device you expect, and then
bind to an interface (or perhaps several) using an ioctl call.  You
would issue more ioctls to the device to communicate to it using
control, bulk, or other kinds of USB transfers.  The IOCTLs are
listed in the linux/usbdevice_fs.h file, and at this writing the
source code (linux/drivers/usb/devio.c) is the primary reference
for how to access devices through those files.

Note that since by default these BBB/DDD files are writable only by
root, only root can write such user mode drivers.  You can selectively
grant read/write permissions to other users by using "chmod".  Also,
usbfs mount options such as "devmode=0666" may be helpful.



THE /proc/bus/usb/drivers FILE:
-------------------------------
Each of the USB device drivers linked into your kernel (statically,
or dynamically using "modprobe") is listed in the "drivers" file.
Here's an example from one system:

         usbdevfs
         hub
  0- 15: usblp
         usbnet
         serial
         usb-storage
         pegasus

If you see this file, "usbdevfs" and "hub" will always be listed,
since those are part of the "usbcore" framework.

Drivers that use the USB major number (180) to provide character devices
will include a range of minor numbers, as shown above for the "usblp"
(actually "printer.o") module.  USB device drivers can of course use any
major number, but it's easy to use the USB range since there's explicit
support for subdividing it in the USB device driver framework.


THE /proc/bus/usb/devices FILE:
-------------------------------
In /proc/bus/usb/devices, each device's output has multiple
lines of ASCII output.
I made it ASCII instead of binary on purpose, so that someone
can obtain some useful data from it without the use of an
auxiliary program.  However, with an auxiliary program, the numbers
in the first 4 columns of each "T:" line (topology info:
Lev, Prnt, Port, Cnt) can be used to build a USB topology diagram.

Each line is tagged with a one-character ID for that line:

T = Topology (etc.)
B = Bandwidth (applies only to USB host controllers, which are
    virtualized as root hubs)
D = Device descriptor info.
P = Product ID info. (from Device descriptor, but they won't fit
    together on one line)
S = String descriptors.
C = Configuration descriptor info. (* = active configuration)
I = Interface descriptor info.
E = Endpoint descriptor info.

=======================================================================

/proc/bus/usb/devices output format:

Legend:
  d = decimal number (may have leading spaces or 0's)
  x = hexadecimal number (may have leading spaces or 0's)
  s = string


Topology info:

T:  Bus=dd Lev=dd Prnt=dd Port=dd Cnt=dd Dev#=ddd Spd=ddd MxCh=dd
|   |      |      |       |       |      |        |       |__MaxChildren
|   |      |      |       |       |      |        |__Device Speed in Mbps
|   |      |      |       |       |      |__DeviceNumber
|   |      |      |       |       |__Count of devices at this level
|   |      |      |       |__Connector/Port on Parent for this device
|   |      |      |__Parent DeviceNumber
|   |      |__Level in topology for this bus
|   |__Bus number
|__Topology info tag

    Speed may be:
        1.5     Mbit/s for low speed USB
        12      Mbit/s for full speed USB
        480     Mbit/s for high speed USB (added for USB 2.0)


Bandwidth info:
B:  Alloc=ddd/ddd us (xx%), #Int=ddd, #Iso=ddd
|   |                       |         |__Number of isochronous requests
|   |                       |__Number of interrupt requests
|   |__Total Bandwidth allocated to this bus
|__Bandwidth info tag

    Bandwidth allocation is an approximation of how much of one frame
    (millisecond) is in use.  It reflects only periodic transfers, which
    are the only transfers that reserve bandwidth.  Control and bulk
    transfers use all other bandwidth, including reserved bandwidth that
    is not used for transfers (such as for short packets).

    The percentage is how much of the "reserved" bandwidth is scheduled by
    those transfers.  For a low or full speed bus (loosely, "USB 1.1"),
    90% of the bus bandwidth is reserved.  For a high speed bus (loosely,
    "USB 2.0") 80% is reserved.


Device descriptor info &amp; Product ID info:

D:  Ver=x.xx Cls=xx(s) Sub=xx Prot=xx MxPS=dd #Cfgs=dd
P:  Vendor=xxxx ProdID=xxxx Rev=xx.xx

where
D:  Ver=x.xx Cls=xx(sssss) Sub=xx Prot=xx MxPS=dd #Cfgs=dd
|   |        |             |      |       |       |__NumberConfigurations
|   |        |             |      |       |__MaxPacketSize of Default Endpoint
|   |        |             |      |__DeviceProtocol
|   |        |             |__DeviceSubClass
|   |        |__DeviceClass
|   |__Device USB version
|__Device info tag #1

where
P:  Vendor=xxxx ProdID=xxxx Rev=xx.xx
|   |           |           |__Product revision number
|   |           |__Product ID code
|   |__Vendor ID code
|__Device info tag #2


String descriptor info:

S:  Manufacturer=ssss
|   |__Manufacturer of this device as read from the device.
|      For USB host controller drivers (virtual root hubs) this may
|      be omitted, or (for newer drivers) will identify the kernel
|      version and the driver which provides this hub emulation.
|__String info tag

S:  Product=ssss
|   |__Product description of this device as read from the device.
|      For older USB host controller drivers (virtual root hubs) this
|      indicates the driver; for newer ones, it's a product (and vendor)
|      description that often comes from the kernel's PCI ID database.
|__String info tag

S:  SerialNumber=ssss
|   |__Serial Number of this device as read from the device.
|      For USB host controller drivers (virtual root hubs) this is
|      some unique ID, normally a bus ID (address or slot name) that
|      can't be shared with any other device.
|__String info tag



Configuration descriptor info:

C:* #Ifs=dd Cfg#=dd Atr=xx MPwr=dddmA
| | |       |       |      |__MaxPower in mA
| | |       |       |__Attributes
| | |       |__ConfiguratioNumber
| | |__NumberOfInterfaces
| |__ "*" indicates the active configuration (others are " ")
|__Config info tag

    USB devices may have multiple configurations, each of which act
    rather differently.  For example, a bus-powered configuration
    might be much less capable than one that is self-powered.  Only
    one device configuration can be active at a time; most devices
    have only one configuration.

    Each configuration consists of one or more interfaces.  Each
    interface serves a distinct "function", which is typically bound
    to a different USB device driver.  One common example is a USB
    speaker with an audio interface for playback, and a HID interface
    for use with software volume control.


Interface descriptor info (can be multiple per Config):

I:  If#=dd Alt=dd #EPs=dd Cls=xx(sssss) Sub=xx Prot=xx Driver=ssss
|   |      |      |       |             |      |       |__Driver name
|   |      |      |       |             |      |          or "(none)"
|   |      |      |       |             |      |__InterfaceProtocol
|   |      |      |       |             |__InterfaceSubClass
|   |      |      |       |__InterfaceClass
|   |      |      |__NumberOfEndpoints
|   |      |__AlternateSettingNumber
|   |__InterfaceNumber
|__Interface info tag

    A given interface may have one or more "alternate" settings.
    For example, default settings may not use more than a small
    amount of periodic bandwidth.  To use significant fractions
    of bus bandwidth, drivers must select a non-default altsetting.

    Only one setting for an interface may be active at a time, and
    only one driver may bind to an interface at a time.  Most devices
    have only one alternate setting per interface.


Endpoint descriptor info (can be multiple per Interface):

E:  Ad=xx(s) Atr=xx(ssss) MxPS=dddd Ivl=dddms
|   |        |            |         |__Interval (max) between transfers
|   |        |            |__EndpointMaxPacketSize
|   |        |__Attributes(EndpointType)
|   |__EndpointAddress(I=In,O=Out)
|__Endpoint info tag

    The interval is nonzero for all periodic (interrupt or isochronous)
    endpoints.  For high speed endpoints the transfer interval may be
    measured in microseconds rather than milliseconds.

    For high speed periodic endpoints, the "MaxPacketSize" reflects
    the per-microframe data transfer size.  For "high bandwidth"
    endpoints, that can reflect two or three packets (for up to
    3KBytes every 125 usec) per endpoint.

    With the Linux-USB stack, periodic bandwidth reservations use the
    transfer intervals and sizes provided by URBs, which can be less
    than those found in endpoint descriptor.


=======================================================================


If a user or script is interested only in Topology info, for
example, use something like "grep ^T: /proc/bus/usb/devices"
for only the Topology lines.  A command like
"grep -i ^[tdp]: /proc/bus/usb/devices" can be used to list
only the lines that begin with the characters in square brackets,
where the valid characters are TDPCIE.  With a slightly more able
script, it can display any selected lines (for example, only T, D,
and P lines) and change their output format.  (The "procusb"
Perl script is the beginning of this idea.  It will list only
selected lines [selected from TBDPSCIE] or "All" lines from
/proc/bus/usb/devices.)

The Topology lines can be used to generate a graphic/pictorial
of the USB devices on a system's root hub.  (See more below
on how to do this.)

The Interface lines can be used to determine what driver is
being used for each device.

The Configuration lines could be used to list maximum power
(in milliamps) that a system's USB devices are using.
For example, "grep ^C: /proc/bus/usb/devices".


Here's an example, from a system which has a UHCI root hub,
an external hub connected to the root hub, and a mouse and
a serial converter connected to the external hub.

T:  Bus=00 Lev=00 Prnt=00 Port=00 Cnt=00 Dev#=  1 Spd=12  MxCh= 2
B:  Alloc= 28/900 us ( 3%), #Int=  2, #Iso=  0
D:  Ver= 1.00 Cls=09(hub  ) Sub=00 Prot=00 MxPS= 8 #Cfgs=  1
P:  Vendor=0000 ProdID=0000 Rev= 0.00
S:  Product=USB UHCI Root Hub
S:  SerialNumber=dce0
C:* #Ifs= 1 Cfg#= 1 Atr=40 MxPwr=  0mA
I:  If#= 0 Alt= 0 #EPs= 1 Cls=09(hub  ) Sub=00 Prot=00 Driver=hub
E:  Ad=81(I) Atr=03(Int.) MxPS=   8 Ivl=255ms
T:  Bus=00 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  2 Spd=12  MxCh= 4
D:  Ver= 1.00 Cls=09(hub  ) Sub=00 Prot=00 MxPS= 8 #Cfgs=  1
P:  Vendor=0451 ProdID=1446 Rev= 1.00
C:* #Ifs= 1 Cfg#= 1 Atr=e0 MxPwr=100mA
I:  If#= 0 Alt= 0 #EPs= 1 Cls=09(hub  ) Sub=00 Prot=00 Driver=hub
E:  Ad=81(I) Atr=03(Int.) MxPS=   1 Ivl=255ms
T:  Bus=00 Lev=02 Prnt=02 Port=00 Cnt=01 Dev#=  3 Spd=1.5 MxCh= 0
D:  Ver= 1.00 Cls=00(&gt;ifc ) Sub=00 Prot=00 MxPS= 8 #Cfgs=  1
P:  Vendor=04b4 ProdID=0001 Rev= 0.00
C:* #Ifs= 1 Cfg#= 1 Atr=80 MxPwr=100mA
I:  If#= 0 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=01 Prot=02 Driver=mouse
E:  Ad=81(I) Atr=03(Int.) MxPS=   3 Ivl= 10ms
T:  Bus=00 Lev=02 Prnt=02 Port=02 Cnt=02 Dev#=  4 Spd=12  MxCh= 0
D:  Ver= 1.00 Cls=00(&gt;ifc ) Sub=00 Prot=00 MxPS= 8 #Cfgs=  1
P:  Vendor=0565 ProdID=0001 Rev= 1.08
S:  Manufacturer=Peracom Networks, Inc.
S:  Product=Peracom USB to Serial Converter
C:* #Ifs= 1 Cfg#= 1 Atr=a0 MxPwr=100mA
I:  If#= 0 Alt= 0 #EPs= 3 Cls=00(&gt;ifc ) Sub=00 Prot=00 Driver=serial
E:  Ad=81(I) Atr=02(Bulk) MxPS=  64 Ivl= 16ms
E:  Ad=01(O) Atr=02(Bulk) MxPS=  16 Ivl= 16ms
E:  Ad=82(I) Atr=03(Int.) MxPS=   8 Ivl=  8ms


Selecting only the "T:" and "I:" lines from this (for example, by using
"procusb ti"), we have:

T:  Bus=00 Lev=00 Prnt=00 Port=00 Cnt=00 Dev#=  1 Spd=12  MxCh= 2
T:  Bus=00 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  2 Spd=12  MxCh= 4
I:  If#= 0 Alt= 0 #EPs= 1 Cls=09(hub  ) Sub=00 Prot=00 Driver=hub
T:  Bus=00 Lev=02 Prnt=02 Port=00 Cnt=01 Dev#=  3 Spd=1.5 MxCh= 0
I:  If#= 0 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=01 Prot=02 Driver=mouse
T:  Bus=00 Lev=02 Prnt=02 Port=02 Cnt=02 Dev#=  4 Spd=12  MxCh= 0
I:  If#= 0 Alt= 0 #EPs= 3 Cls=00(&gt;ifc ) Sub=00 Prot=00 Driver=serial


Physically this looks like (or could be converted to):

                      +------------------+
                      |  PC/root_hub (12)|   Dev# = 1
                      +------------------+   (nn) is Mbps.
    Level 0           |  CN.0   |  CN.1  |   [CN = connector/port #]
                      +------------------+
                          /
                         /
            +-----------------------+
  Level 1   | Dev#2: 4-port hub (12)|
            +-----------------------+
            |CN.0 |CN.1 |CN.2 |CN.3 |
            +-----------------------+
                \           \____________________
                 \_____                          \
                       \                          \
               +--------------------+      +--------------------+
  Level 2      | Dev# 3: mouse (1.5)|      | Dev# 4: serial (12)|
               +--------------------+      +--------------------+



Or, in a more tree-like structure (ports [Connectors] without
connections could be omitted):

PC:  Dev# 1, root hub, 2 ports, 12 Mbps
|_ CN.0:  Dev# 2, hub, 4 ports, 12 Mbps
     |_ CN.0:  Dev #3, mouse, 1.5 Mbps
     |_ CN.1:
     |_ CN.2:  Dev #4, serial, 12 Mbps
     |_ CN.3:
|_ CN.1:


                         ### END ###</example>
      <para>Interpretation of /proc/bus/usb info on 2.6 kernels:</para>
      <example xml:space="preserve">
/proc/bus/usb filesystem output
===============================
(version 2003.05.30)


The usbfs filesystem for USB devices is traditionally mounted at
/proc/bus/usb.  It provides the /proc/bus/usb/devices file, as well as
the /proc/bus/usb/BBB/DDD files.


**NOTE**: If /proc/bus/usb appears empty, and a host controller
          driver has been linked, then you need to mount the
          filesystem.  Issue the command (as root):

      mount -t usbfs none /proc/bus/usb

          An alternative and more permanent method would be to add

      none  /proc/bus/usb  usbfs  defaults  0  0

          to /etc/fstab.  This will mount usbfs at each reboot.
          You can then issue `cat /proc/bus/usb/devices` to extract
          USB device information, and user mode drivers can use usbfs
          to interact with USB devices.

          There are a number of mount options supported by usbfs.
          Consult the source code (linux/drivers/usb/core/inode.c) for
          information about those options.

**NOTE**: The filesystem has been renamed from "usbdevfs" to
          "usbfs", to reduce confusion with "devfs".  You may
          still see references to the older "usbdevfs" name.

For more information on mounting the usbfs file system, see the
"USB Device Filesystem" section of the USB Guide. The latest copy
of the USB Guide can be found at http://www.linux-usb.org/


THE /proc/bus/usb/BBB/DDD FILES:
--------------------------------
Each connected USB device has one file.  The BBB indicates the bus
number.  The DDD indicates the device address on that bus.  Both
of these numbers are assigned sequentially, and can be reused, so
you can't rely on them for stable access to devices.  For example,
it's relatively common for devices to re-enumerate while they are
still connected (perhaps someone jostled their power supply, hub,
or USB cable), so a device might be 002/027 when you first connect
it and 002/048 sometime later.

These files can be read as binary data.  The binary data consists
of first the device descriptor, then the descriptors for each
configuration of the device.  That information is also shown in
text form by the /proc/bus/usb/devices file, described later.

These files may also be used to write user-level drivers for the USB
devices.  You would open the /proc/bus/usb/BBB/DDD file read/write,
read its descriptors to make sure it's the device you expect, and then
bind to an interface (or perhaps several) using an ioctl call.  You
would issue more ioctls to the device to communicate to it using
control, bulk, or other kinds of USB transfers.  The IOCTLs are
listed in the linux/usbdevice_fs.h file, and at this writing the
source code (linux/drivers/usb/devio.c) is the primary reference
for how to access devices through those files.

Note that since by default these BBB/DDD files are writable only by
root, only root can write such user mode drivers.  You can selectively
grant read/write permissions to other users by using "chmod".  Also,
usbfs mount options such as "devmode=0666" may be helpful.



THE /proc/bus/usb/devices FILE:
-------------------------------
In /proc/bus/usb/devices, each device's output has multiple
lines of ASCII output.
I made it ASCII instead of binary on purpose, so that someone
can obtain some useful data from it without the use of an
auxiliary program.  However, with an auxiliary program, the numbers
in the first 4 columns of each "T:" line (topology info:
Lev, Prnt, Port, Cnt) can be used to build a USB topology diagram.

Each line is tagged with a one-character ID for that line:

T = Topology (etc.)
B = Bandwidth (applies only to USB host controllers, which are
    virtualized as root hubs)
D = Device descriptor info.
P = Product ID info. (from Device descriptor, but they won't fit
    together on one line)
S = String descriptors.
C = Configuration descriptor info. (* = active configuration)
I = Interface descriptor info.
E = Endpoint descriptor info.

=======================================================================

/proc/bus/usb/devices output format:

Legend:
  d = decimal number (may have leading spaces or 0's)
  x = hexadecimal number (may have leading spaces or 0's)
  s = string


Topology info:

T:  Bus=dd Lev=dd Prnt=dd Port=dd Cnt=dd Dev#=ddd Spd=ddd MxCh=dd
|   |      |      |       |       |      |        |       |__MaxChildren
|   |      |      |       |       |      |        |__Device Speed in Mbps
|   |      |      |       |       |      |__DeviceNumber
|   |      |      |       |       |__Count of devices at this level
|   |      |      |       |__Connector/Port on Parent for this device
|   |      |      |__Parent DeviceNumber
|   |      |__Level in topology for this bus
|   |__Bus number
|__Topology info tag

    Speed may be:
        1.5     Mbit/s for low speed USB
        12      Mbit/s for full speed USB
        480     Mbit/s for high speed USB (added for USB 2.0)


Bandwidth info:
B:  Alloc=ddd/ddd us (xx%), #Int=ddd, #Iso=ddd
|   |                       |         |__Number of isochronous requests
|   |                       |__Number of interrupt requests
|   |__Total Bandwidth allocated to this bus
|__Bandwidth info tag

    Bandwidth allocation is an approximation of how much of one frame
    (millisecond) is in use.  It reflects only periodic transfers, which
    are the only transfers that reserve bandwidth.  Control and bulk
    transfers use all other bandwidth, including reserved bandwidth that
    is not used for transfers (such as for short packets).

    The percentage is how much of the "reserved" bandwidth is scheduled by
    those transfers.  For a low or full speed bus (loosely, "USB 1.1"),
    90% of the bus bandwidth is reserved.  For a high speed bus (loosely,
    "USB 2.0") 80% is reserved.


Device descriptor info &amp; Product ID info:

D:  Ver=x.xx Cls=xx(s) Sub=xx Prot=xx MxPS=dd #Cfgs=dd
P:  Vendor=xxxx ProdID=xxxx Rev=xx.xx

where
D:  Ver=x.xx Cls=xx(sssss) Sub=xx Prot=xx MxPS=dd #Cfgs=dd
|   |        |             |      |       |       |__NumberConfigurations
|   |        |             |      |       |__MaxPacketSize of Default Endpoint
|   |        |             |      |__DeviceProtocol
|   |        |             |__DeviceSubClass
|   |        |__DeviceClass
|   |__Device USB version
|__Device info tag #1

where
P:  Vendor=xxxx ProdID=xxxx Rev=xx.xx
|   |           |           |__Product revision number
|   |           |__Product ID code
|   |__Vendor ID code
|__Device info tag #2


String descriptor info:

S:  Manufacturer=ssss
|   |__Manufacturer of this device as read from the device.
|      For USB host controller drivers (virtual root hubs) this may
|      be omitted, or (for newer drivers) will identify the kernel
|      version and the driver which provides this hub emulation.
|__String info tag

S:  Product=ssss
|   |__Product description of this device as read from the device.
|      For older USB host controller drivers (virtual root hubs) this
|      indicates the driver; for newer ones, it's a product (and vendor)
|      description that often comes from the kernel's PCI ID database.
|__String info tag

S:  SerialNumber=ssss
|   |__Serial Number of this device as read from the device.
|      For USB host controller drivers (virtual root hubs) this is
|      some unique ID, normally a bus ID (address or slot name) that
|      can't be shared with any other device.
|__String info tag



Configuration descriptor info:

C:* #Ifs=dd Cfg#=dd Atr=xx MPwr=dddmA
| | |       |       |      |__MaxPower in mA
| | |       |       |__Attributes
| | |       |__ConfiguratioNumber
| | |__NumberOfInterfaces
| |__ "*" indicates the active configuration (others are " ")
|__Config info tag

    USB devices may have multiple configurations, each of which act
    rather differently.  For example, a bus-powered configuration
    might be much less capable than one that is self-powered.  Only
    one device configuration can be active at a time; most devices
    have only one configuration.

    Each configuration consists of one or more interfaces.  Each
    interface serves a distinct "function", which is typically bound
    to a different USB device driver.  One common example is a USB
    speaker with an audio interface for playback, and a HID interface
    for use with software volume control.


Interface descriptor info (can be multiple per Config):

I:  If#=dd Alt=dd #EPs=dd Cls=xx(sssss) Sub=xx Prot=xx Driver=ssss
|   |      |      |       |             |      |       |__Driver name
|   |      |      |       |             |      |          or "(none)"
|   |      |      |       |             |      |__InterfaceProtocol
|   |      |      |       |             |__InterfaceSubClass
|   |      |      |       |__InterfaceClass
|   |      |      |__NumberOfEndpoints
|   |      |__AlternateSettingNumber
|   |__InterfaceNumber
|__Interface info tag

    A given interface may have one or more "alternate" settings.
    For example, default settings may not use more than a small
    amount of periodic bandwidth.  To use significant fractions
    of bus bandwidth, drivers must select a non-default altsetting.

    Only one setting for an interface may be active at a time, and
    only one driver may bind to an interface at a time.  Most devices
    have only one alternate setting per interface.


Endpoint descriptor info (can be multiple per Interface):

E:  Ad=xx(s) Atr=xx(ssss) MxPS=dddd Ivl=dddss
|   |        |            |         |__Interval (max) between transfers
|   |        |            |__EndpointMaxPacketSize
|   |        |__Attributes(EndpointType)
|   |__EndpointAddress(I=In,O=Out)
|__Endpoint info tag

    The interval is nonzero for all periodic (interrupt or isochronous)
    endpoints.  For high speed endpoints the transfer interval may be
    measured in microseconds rather than milliseconds.

    For high speed periodic endpoints, the "MaxPacketSize" reflects
    the per-microframe data transfer size.  For "high bandwidth"
    endpoints, that can reflect two or three packets (for up to
    3KBytes every 125 usec) per endpoint.

    With the Linux-USB stack, periodic bandwidth reservations use the
    transfer intervals and sizes provided by URBs, which can be less
    than those found in endpoint descriptor.


=======================================================================


If a user or script is interested only in Topology info, for
example, use something like "grep ^T: /proc/bus/usb/devices"
for only the Topology lines.  A command like
"grep -i ^[tdp]: /proc/bus/usb/devices" can be used to list
only the lines that begin with the characters in square brackets,
where the valid characters are TDPCIE.  With a slightly more able
script, it can display any selected lines (for example, only T, D,
and P lines) and change their output format.  (The "procusb"
Perl script is the beginning of this idea.  It will list only
selected lines [selected from TBDPSCIE] or "All" lines from
/proc/bus/usb/devices.)

The Topology lines can be used to generate a graphic/pictorial
of the USB devices on a system's root hub.  (See more below
on how to do this.)

The Interface lines can be used to determine what driver is
being used for each device.

The Configuration lines could be used to list maximum power
(in milliamps) that a system's USB devices are using.
For example, "grep ^C: /proc/bus/usb/devices".


Here's an example, from a system which has a UHCI root hub,
an external hub connected to the root hub, and a mouse and
a serial converter connected to the external hub.

T:  Bus=00 Lev=00 Prnt=00 Port=00 Cnt=00 Dev#=  1 Spd=12  MxCh= 2
B:  Alloc= 28/900 us ( 3%), #Int=  2, #Iso=  0
D:  Ver= 1.00 Cls=09(hub  ) Sub=00 Prot=00 MxPS= 8 #Cfgs=  1
P:  Vendor=0000 ProdID=0000 Rev= 0.00
S:  Product=USB UHCI Root Hub
S:  SerialNumber=dce0
C:* #Ifs= 1 Cfg#= 1 Atr=40 MxPwr=  0mA
I:  If#= 0 Alt= 0 #EPs= 1 Cls=09(hub  ) Sub=00 Prot=00 Driver=hub
E:  Ad=81(I) Atr=03(Int.) MxPS=   8 Ivl=255ms
T:  Bus=00 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  2 Spd=12  MxCh= 4
D:  Ver= 1.00 Cls=09(hub  ) Sub=00 Prot=00 MxPS= 8 #Cfgs=  1
P:  Vendor=0451 ProdID=1446 Rev= 1.00
C:* #Ifs= 1 Cfg#= 1 Atr=e0 MxPwr=100mA
I:  If#= 0 Alt= 0 #EPs= 1 Cls=09(hub  ) Sub=00 Prot=00 Driver=hub
E:  Ad=81(I) Atr=03(Int.) MxPS=   1 Ivl=255ms
T:  Bus=00 Lev=02 Prnt=02 Port=00 Cnt=01 Dev#=  3 Spd=1.5 MxCh= 0
D:  Ver= 1.00 Cls=00(&gt;ifc ) Sub=00 Prot=00 MxPS= 8 #Cfgs=  1
P:  Vendor=04b4 ProdID=0001 Rev= 0.00
C:* #Ifs= 1 Cfg#= 1 Atr=80 MxPwr=100mA
I:  If#= 0 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=01 Prot=02 Driver=mouse
E:  Ad=81(I) Atr=03(Int.) MxPS=   3 Ivl= 10ms
T:  Bus=00 Lev=02 Prnt=02 Port=02 Cnt=02 Dev#=  4 Spd=12  MxCh= 0
D:  Ver= 1.00 Cls=00(&gt;ifc ) Sub=00 Prot=00 MxPS= 8 #Cfgs=  1
P:  Vendor=0565 ProdID=0001 Rev= 1.08
S:  Manufacturer=Peracom Networks, Inc.
S:  Product=Peracom USB to Serial Converter
C:* #Ifs= 1 Cfg#= 1 Atr=a0 MxPwr=100mA
I:  If#= 0 Alt= 0 #EPs= 3 Cls=00(&gt;ifc ) Sub=00 Prot=00 Driver=serial
E:  Ad=81(I) Atr=02(Bulk) MxPS=  64 Ivl= 16ms
E:  Ad=01(O) Atr=02(Bulk) MxPS=  16 Ivl= 16ms
E:  Ad=82(I) Atr=03(Int.) MxPS=   8 Ivl=  8ms


Selecting only the "T:" and "I:" lines from this (for example, by using
"procusb ti"), we have:

T:  Bus=00 Lev=00 Prnt=00 Port=00 Cnt=00 Dev#=  1 Spd=12  MxCh= 2
T:  Bus=00 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  2 Spd=12  MxCh= 4
I:  If#= 0 Alt= 0 #EPs= 1 Cls=09(hub  ) Sub=00 Prot=00 Driver=hub
T:  Bus=00 Lev=02 Prnt=02 Port=00 Cnt=01 Dev#=  3 Spd=1.5 MxCh= 0
I:  If#= 0 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=01 Prot=02 Driver=mouse
T:  Bus=00 Lev=02 Prnt=02 Port=02 Cnt=02 Dev#=  4 Spd=12  MxCh= 0
I:  If#= 0 Alt= 0 #EPs= 3 Cls=00(&gt;ifc ) Sub=00 Prot=00 Driver=serial


Physically this looks like (or could be converted to):

                      +------------------+
                      |  PC/root_hub (12)|   Dev# = 1
                      +------------------+   (nn) is Mbps.
    Level 0           |  CN.0   |  CN.1  |   [CN = connector/port #]
                      +------------------+
                          /
                         /
            +-----------------------+
  Level 1   | Dev#2: 4-port hub (12)|
            +-----------------------+
            |CN.0 |CN.1 |CN.2 |CN.3 |
            +-----------------------+
                \           \____________________
                 \_____                          \
                       \                          \
               +--------------------+      +--------------------+
  Level 2      | Dev# 3: mouse (1.5)|      | Dev# 4: serial (12)|
               +--------------------+      +--------------------+



Or, in a more tree-like structure (ports [Connectors] without
connections could be omitted):

PC:  Dev# 1, root hub, 2 ports, 12 Mbps
|_ CN.0:  Dev# 2, hub, 4 ports, 12 Mbps
     |_ CN.0:  Dev #3, mouse, 1.5 Mbps
     |_ CN.1:
     |_ CN.2:  Dev #4, serial, 12 Mbps
     |_ CN.3:
|_ CN.1:


                         ### END ###</example>
    </appendix>
  </node>
  <node>
    <nodename>Index</nodename>
    <nodeprev>Kernel Config</nodeprev>
    <nodeup>Top</nodeup>
    <unnumbered>
      <title>Index</title>
      <printindex>cp</printindex>
    </unnumbered>
  </node>
</texinfo>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-indent-step:1
sgml-indent-data:nil
End:
-->
